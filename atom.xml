<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://blog.kuranado.com</id>
    <title>KURANADO</title>
    <updated>2020-10-03T02:49:35.181Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://blog.kuranado.com"/>
    <link rel="self" href="http://blog.kuranado.com/atom.xml"/>
    <subtitle>笔记/博客</subtitle>
    <logo>http://blog.kuranado.com/images/avatar.png</logo>
    <icon>http://blog.kuranado.com/favicon.ico</icon>
    <rights>All rights reserved 2020, KURANADO</rights>
    <entry>
        <title type="html"><![CDATA[CSS 浮动.md]]></title>
        <id>http://blog.kuranado.com/post/css-fu-dong-md/</id>
        <link href="http://blog.kuranado.com/post/css-fu-dong-md/">
        </link>
        <updated>2020-10-03T02:44:38.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="什么是浮动">什么是浮动</h2>
<p>float 属性用于创建浮动框，将其移动到一边，直到左边边缘或右边边缘及包含块或另一个浮动框的边缘<br>
浮动最典型的应用：可以让多个块级元素在一行内并列显示（把块级元素转换为行内块元素虽然也可以在一行内并列显示，但行内块元素之间有间隙，而这个间隙是不可控的）</p>
<pre><code>div {
    width: 200px;
    height: 200px;
    background-color: skyblue;
    float: left;
}
&lt;div&gt;第一个盒子&lt;/div&gt;
&lt;div&gt;第二个盒子&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601693114.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<pre><code>div {
    width: 200px;
    height: 200px;
    background-color: skyblue;
}
.left {
    float: left;
}
.right {    
    float: right;
}
&lt;div class=&quot;left&quot;&gt;第一个盒子&lt;/div&gt;
&lt;div class=&quot;right&quot;&gt;第二个盒子&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1601693126.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="浮动特性重难点">浮动特性（重难点）</h2>
<h3 id="浮动的元素会脱离标准流脱标">浮动的元素会脱离标准流（脱标）</h3>
<p>浮动的元素脱标后，浮动的盒子<strong>不再保留原先的位置</strong></p>
<pre><code>.left {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    float: left;
}
.standard {
    width: 300px;
    height: 300px;
    background-color: peru;
}
&lt;div class=&quot;left&quot;&gt;浮动的盒子&lt;/div&gt;
&lt;div class=&quot;standard&quot;&gt;标准流的盒子&lt;/div&gt;
</code></pre>
<p><img src="http://image.kuranado.com/blog/1601693145.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
如上图，浮动的元素会压住下面标准流的盒子，但是，浮动的盒子不会压住下面标准流的图片或文字，因为浮动产生的最初目的是为了做文字环绕效果的（如果想让盒子压住文字或图片，应该为盒子添加绝对定位或固定定位）：</p>
<pre><code>div {
    float: left;
    width: 100px;
    height: 100px;
    background-color: skyblue;
}
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;浮动的元素不会压住标准流盒子里的文字或图片&lt;/p&gt;
</code></pre>
<figure data-type="image" tabindex="3"><img src="http://image.kuranado.com/blog/1601693158.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h3 id="浮动的元素会一行内显示并且元素顶部对齐">浮动的元素会一行内显示并且元素顶部对齐</h3>
<ul>
<li>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且<strong>顶端对齐</strong>排列</li>
</ul>
<pre><code>div {
    width: 200px;
    height: 200px;
    float: left;
}
.one {
    background-color: pink;
}
.two {
    background-color: orange;
    height: 220px;
}
.three {
    background-color: gray;
}
.four {
    background-color: skyblue;
}
&lt;div class=&quot;one&quot;&gt;1&lt;/div&gt;
&lt;div class=&quot;two&quot;&gt;2&lt;/div&gt;
&lt;div class=&quot;three&quot;&gt;3&lt;/div&gt;
&lt;div class=&quot;four&quot;&gt;4&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="4"><img src="http://image.kuranado.com/blog/1601693171.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<ul>
<li>浮动的元素是相互贴靠在一起，不会有缝隙，如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐<br>
<img src="http://image.kuranado.com/blog/1601693180.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
<img src="http://image.kuranado.com/blog/1601693202.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></li>
</ul>
<h3 id="浮动的元素具有行内块元素的特性">浮动的元素具有行内块元素的特性</h3>
<ul>
<li>任何元素都可以浮动，不管原先是什么模式的元素，添加浮动之后具有与<strong>行内块元素</strong>相似的特性</li>
</ul>
<pre><code>span {
    float: left;
    width: 100px;
    height: 100px;
    background-color: pink;
}
&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;
</code></pre>
<p><img src="http://image.kuranado.com/blog/1601693215.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
span 为行内元素，行内元素直接指定高度或宽度是无效的，但是为其添加浮动后，便具有了与行内块元素相似的特性，因为行内块元素的宽度、高度、外边距、内边距都可以设置，所以上面代码的宽度和高度将会生效。<br>
所以如果行内元素有了浮动，则不需要转换为块级元素或行内块元素，便可以直接为其设置高度和宽度。</p>
<pre><code>span {
    float: left;
    width: 100px;
    height: 100px;
    background-color: pink;
}
p {    
    height: 200px;
    background-color: purple;
}
&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;
&lt;p&gt;p&lt;/p&gt;
</code></pre>
<p><img src="http://image.kuranado.com/blog/1601693225.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
p 是块状元素，没有浮动，是标准流的盒子，没有为其指定宽度，其宽度默认为容器（父元素）的 100%，下面为 p 添加浮动：</p>
<pre><code>span {
    float: left;
    width: 100px;
    height: 100px;
    background-color: pink;
}
p {    
    float: left;
    height: 200px;
    background-color: purple;
}
&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;
&lt;p&gt;p&lt;/p&gt;
</code></pre>
<p><img src="http://image.kuranado.com/blog/1601693238.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
为 p 元素添加浮动后，它便拥有了与行内块元素相似的特性，如果没有为行内块元素指定宽度，则行内块元素的默认宽度为它本身内容的宽度</p>
<h2 id="浮动元素经常和标准流父级搭配使用">浮动元素经常和标准流父级搭配使用</h2>
<ul>
<li>为了约束浮动元素位置，网页布局一般采取的策略是：先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置，这也刚好符合网页布局第一准则</li>
<li>一个元素浮动了，理论上，应该为其余的兄弟元素也设置浮动</li>
<li>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</li>
</ul>
<pre><code>.one {
    width: 100px;
    height: 100px;
    background-color: pink;
}
.two {
    width: 200px;
    height: 200px;
    background-color: orange;
    float: left;
}
.three {
    width: 300px;
    height: 300px;
    background-color: skyblue;
}
&lt;div class=&quot;one&quot;&gt;标准流&lt;/div&gt;
&lt;div class=&quot;two&quot;&gt;浮动&lt;/div&gt;
&lt;div class=&quot;three&quot;&gt;标准流&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="5"><img src="http://image.kuranado.com/blog/1601693251.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="清除浮动">清除浮动</h2>
<h3 id="为什么要清除浮动">为什么要清除浮动</h3>
<ol>
<li>如果为父盒子定义高度，父盒子内子元素都设置浮动没问题，然而子元素的数据往往是不确定的，如果子元素数量较多，很可能会超出父盒子的范围，所以父盒子一般不方便指定高度</li>
<li>由于很多情况下，父盒子不方便指定高度，父盒子内浮动的子盒子又不占有位置，所以父盒子的高度就会变成 0，进而影响页面上其它标准流盒子的排版</li>
</ol>
<h3 id="清除浮动的本质">清除浮动的本质</h3>
<ul>
<li>清除浮动的本质是<strong>清除浮动元素造成的影响</strong></li>
<li>如果父盒子本身有高度，则不需要清除浮动</li>
<li>清除浮动之后，父盒子就会根据浮动的子盒子自动检测高度。标准流的父盒子有了高度，就不会影响下面的标准流了</li>
</ul>
<h3 id="语法">语法</h3>
<ul>
<li>clear: 属性值
<ul>
<li>left 不允许左侧有浮动元素（清除左侧浮动的影响）</li>
<li>right 不允许右侧有浮动元素（清除右侧浮动的影响）</li>
<li>both 最常用，同时清除左右两侧浮动的影响</li>
</ul>
</li>
</ul>
<h3 id="清除浮动的四种方法">清除浮动的四种方法</h3>
<h4 id="1-额外标签法不常用">1. 额外标签法（不常用）</h4>
<p>也称隔墙法，W3C 推荐做法<br>
在浮动元素末尾添加一个空的<strong>块级</strong>标签，例如：<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>（不一定必须是 div 标签，只要是块级元素即可）</p>
<ul>
<li>优点：通俗易懂，书写方便</li>
<li>缺点：添加许多无意义的标签，结构化较差</li>
</ul>
<pre><code>.box {
    width: 230px;
    background-color: #ccc;
}
.one {
    width: 100px;
    height: 100px;
    background-color: pink;
    float: left
}
.two {
    width: 100px;
    height: 100px;
    background-color: orange;
    float: left;
}
.three {
    width: 300px;
    height: 300px;
    background-color: skyblue;
}
.clear {
    clear: both;
}
&lt;div class=&quot;box&quot;&gt;
    &lt;div class=&quot;one&quot;&gt;浮动1&lt;/div&gt;
    &lt;div class=&quot;two&quot;&gt;浮动2&lt;/div&gt;
    &lt;div class=&quot;one&quot;&gt;浮动3&lt;/div&gt;
    &lt;div class=&quot;two&quot;&gt;浮动4&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;three&quot;&gt;标准流&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="6"><img src="http://image.kuranado.com/blog/1601693263.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h4 id="2-为父盒子添加-overflow-属性">2. 为父盒子添加 overflow 属性</h4>
<p>可以给父级元素添加 overflow 属性，将其属性设置为 hidden 或 auto 或 scroll</p>
<ul>
<li>优点：代码简洁</li>
<li>缺点：无法显示溢出的部分</li>
</ul>
<pre><code>.box {
    width: 230px;
    background-color: #ccc;
    overflow: hidden;
}
.one {
    width: 100px;
    height: 100px;
    background-color: pink;
    float: left
}
.two {
    width: 100px;
    height: 100px;
    background-color: orange;
    float: left;
}
.three {
    width: 300px;
    height: 300px;
    background-color: skyblue;
}
.clear {
    clear: both;
}
&lt;div class=&quot;box&quot;&gt;
    &lt;div class=&quot;one&quot;&gt;浮动1&lt;/div&gt;
    &lt;div class=&quot;two&quot;&gt;浮动2&lt;/div&gt;
    &lt;div class=&quot;one&quot;&gt;浮动3&lt;/div&gt;
    &lt;div class=&quot;two&quot;&gt;浮动4&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;three&quot;&gt;标准流&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="7"><img src="http://image.kuranado.com/blog/1601693274.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h4 id="3-为父盒子添加-after-伪元素">3. 为父盒子添加 after 伪元素</h4>
<p>本质是 CSS 为父元素内最后添加一个子元素，原理和额外标签法类似<br>
为<strong>父元素</strong>添加如下样式（类名一般约定为 clearfix）：</p>
<pre><code>.clearfix:after {
    content: &quot;&quot;;
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
}
.clearfix:after {
    /** 兼容 IE6、IE7 专用**/
    *zoom: 1;
}
</code></pre>
<ul>
<li>优点：没有增加标签，结构更简单</li>
<li>缺点：需要照顾低版本的浏览器</li>
<li>代表网站：百度、淘宝网、网易等</li>
</ul>
<pre><code>.clearfix:after {
    content: &quot;&quot;;
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
}
.clearfix {
    /** 兼容 IE6、IE7 专用**/
    *zoom: 1;
}
.box {
    width: 230px;
    background-color: #ccc;
}
.one {
    width: 100px;
    height: 100px;
    background-color: pink;
    float: left
}
.two {
    width: 100px;
    height: 100px;
    background-color: orange;
    float: left;
}
.three {
    width: 300px;
    height: 300px;
    background-color: skyblue;
}
.clear {
    clear: both;
}
&lt;div class=&quot;box clearfix&quot;&gt;
    &lt;div class=&quot;one&quot;&gt;浮动1&lt;/div&gt;
    &lt;div class=&quot;two&quot;&gt;浮动2&lt;/div&gt;
    &lt;div class=&quot;one&quot;&gt;浮动3&lt;/div&gt;
    &lt;div class=&quot;two&quot;&gt;浮动4&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;three&quot;&gt;标准流&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="8"><img src="http://image.kuranado.com/blog/1601693288.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h4 id="4-为父元素添加双伪元素">4. 为父元素添加双伪元素</h4>
<p>为父元素添加如下样式：</p>
<pre><code>.clearfix:before, .clearfix:after {
    content: &quot;&quot;;
    display: table;
}
.clearfix:after {
    clear: both;
}
.clearfix {
    /** 兼容 IE6、IE7 专用**/
    *zoom: 1;
}
</code></pre>
<ul>
<li>优点：代码更简洁</li>
<li>缺点：需要照顾低版本浏览器</li>
</ul>
<pre><code>.clearfix:before, .clearfix:after {
    content: &quot;&quot;;
    display: table;
}
.clearfix:after {
    clear: both;
}
.clearfix {
    /** 兼容 IE6、IE7 专用**/
    *zoom: 1;
}
.box {
    width: 230px;
    background-color: #ccc;
}
.one {
    width: 100px;
    height: 100px;
    background-color: pink;
    float: left
}
.two {
    width: 100px;
    height: 100px;
    background-color: orange;
    float: left;
}
.three {
    width: 300px;
    height: 300px;
    background-color: skyblue;
}
.clear {
    clear: both;
}
&lt;div class=&quot;box clearfix&quot;&gt;
    &lt;div class=&quot;one&quot;&gt;浮动1&lt;/div&gt;
    &lt;div class=&quot;two&quot;&gt;浮动2&lt;/div&gt;
    &lt;div class=&quot;one&quot;&gt;浮动3&lt;/div&gt;
    &lt;div class=&quot;two&quot;&gt;浮动4&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;three&quot;&gt;标准流&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="9"><img src="http://image.kuranado.com/blog/1601693298.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 盒子模型.md]]></title>
        <id>http://blog.kuranado.com/post/css-he-zi-mo-xing-md/</id>
        <link href="http://blog.kuranado.com/post/css-he-zi-mo-xing-md/">
        </link>
        <updated>2020-10-02T02:57:53.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<blockquote>
<p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，包括：边框、外边距、内边距和实际内容</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601607497.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="边框">边框</h2>
<ul>
<li>border-width 边框粗细</li>
<li>border-style 边框样式
<ul>
<li>none 默认，无边框</li>
<li>solid 最常用，实线边框</li>
<li>dashed 虚线边框</li>
<li>double 双线边框</li>
<li>dotted 电线边框</li>
</ul>
</li>
<li>border-color 边框颜色</li>
<li>border 边框简写，没有先后顺序要求，但一般写成：<code>border: 边框粗细 边框样式 边框颜色</code>，如 <code>border: 1px solid red;</code></li>
<li>border-top 只设置上边框</li>
<li>border-bottom 只设置下边框</li>
<li>border-left 只设置左边框</li>
<li>border-right 只设置右边框</li>
<li>border-collapse 合并相邻边框</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>边框会改变盒子大小，如：</li>
</ul>
<pre><code>/** 200px * 200px 的盒子 **/
div {
    width: 200px;
    height: 200px;
    background-color: pink;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<p>加上 border 后，将会使盒子变大：</p>
<pre><code>/** 220px * 220px 的盒子 **/
div {
    width: 200px;
    height: 200px;
    background-color: pink;
    border: 10px solid red;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<p>如果加上边框后，并不想改变盒子原有大小，则可以用盒子原有宽度/高度减去 2 * 边框的宽度：</p>
<pre><code>/** 200px * 200px 的盒子 **/
div {
    width: 180px;
    height: 180px;
    background-color: pink;
    border: 10px solid red;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<h2 id="内边距">内边距</h2>
<ul>
<li>padding 设置内边距，即<strong>边框与内容之间的距离</strong>
<ul>
<li>跟一个值，表示上下左右的内边距</li>
<li>跟两个值，第一个值表示上、下内边距，第二个值表示左、右内边距</li>
<li>跟三个值，第一个值表示上内边距，第二个值表示左、右内边距，第三个值表示下内边距</li>
<li>跟四个值，依次表示上、右、下、左内边距</li>
</ul>
</li>
<li>padding-left 左内边距</li>
<li>padding-right 右内边距</li>
<li>padding-top 上内边距</li>
<li>padding-bottom 下内边距</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>内边距会改变盒子大小，如：</li>
</ul>
<pre><code>/** 200px * 200px 的盒子 **/
div {
    width: 200px;
    height: 200px;
    background-color: pink;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<p>加上 padding 后，将会撑大盒子：</p>
<pre><code>/** 220px * 220px 的盒子 **/
div {
    width: 200px;
    height: 200px;
    background-color: pink;
    padding: 10px;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<p>如果加上边框后，并不想改变盒子原有大小，则可以用盒子原有宽度/高度减去 2 * padding 的宽度：</p>
<pre><code>/** 200px * 200px 的盒子 **/
div {
    width: 180px;
    height: 180px;
    background-color: pink;
    padding: 10px;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<ul>
<li>如何盒子本身没有指定 width 或 height 属性，则此时 padding 不会撑开盒子大小，如：</li>
</ul>
<pre><code>div {
    height: 200px;
    background-color: pink;
    padding: 30px;
}
&lt;body&gt;
    &lt;!-- div 只指定了高度，没有指定宽度，所以该盒子高度将变成 260px，但是宽度保持不变 --&gt;
    &lt;div&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<pre><code>div {
    width: 100%;
    height: 200px;
    background-color: pink;
    padding: 30px;
}
&lt;body&gt;
    &lt;!-- div 既指定了高度，也指定了宽度，所以该盒子高度将变成 260px，宽度在父元素宽度的基础上增加 2 * 30px --&gt;
    &lt;div&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<pre><code>div {
    width: 200px;
    height: 200px;
    background-color: pink;
}
div p {
    padding: 30px;
    background-color: purple;
}
&lt;body&gt;
    &lt;div&gt;
        &lt;!-- p 是块状元素，没有为其指定宽度，则其宽度默认是容器（父元素）的 100%，所以此处 p 的宽度是 200px；也没有为其指定高度，所以此处 p 的高度是 2 * 30px = 60px --&gt;
        &lt;p&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<pre><code>div {
    width: 200px;
    height: 200px;
    background-color: pink;
}
div p {
    width: 100%;
    padding: 30px;
    background-color: purple;
}
&lt;body&gt;
    &lt;div&gt;
        &lt;!-- p 是块状元素，为其指定了高度是容器（父元素）的 100%，所以此处 p 的宽度是 200px + 2 * 30px = 260px；没有为其指定高度，所以此处 p 的高度是 2 * 30px = 60px --&gt;
        &lt;p&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<h2 id="外边距">外边距</h2>
<ul>
<li>margin 设置外边距，即控制<strong>盒子与盒子之间的距离</strong>
<ul>
<li>跟一个值，表示上下左右的外边距</li>
<li>跟两个值，第一个值表示上、下外边距，第二个值表示左、右外边距</li>
<li>跟三个值，第一个值表示上外边距，第二个值表示左、右外边距，第三个值表示下外边距</li>
<li>跟四个值，依次表示上、右、下、左外边距</li>
</ul>
</li>
<li>margin-left 左外边距</li>
<li>margin-right 右外边距</li>
<li>margin-top 上外边距</li>
<li>margin-bottom 下外边距</li>
</ul>
<h3 id="外边距的典型应用">外边距的典型应用</h3>
<ul>
<li>外边距可以让<strong>块级</strong>盒子水平居中，但必须满足如下两个条件：
<ol>
<li>盒子必须指定了<strong>宽度</strong></li>
<li>盒子左右的外边距都设置为 auto，如：margin: 0 auto;</li>
</ol>
<pre><code>div {
    width: 900px;
    height: 200px;
    background-color: pink;
    margin: 0 auto;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
</li>
<li><strong>行内元素</strong>或者<strong>行内块元素</strong>水平居中，只要给其父元素添加 text-align: center; 即可</li>
</ul>
<pre><code>div {
    width: 900px;
    height: 200px;
    background-color: pink;
    margin: 0 auto;
    text-align: center;
}
&lt;div&gt;
    &lt;!-- 行内元素 --&gt;
    &lt;span&gt;Hello&lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;!-- 行内块元素 --&gt;
    &lt;img src=&quot;./images/logo.png&quot; alt=&quot;&quot;&gt;
&lt;/div&gt;
</code></pre>
<h3 id="外边距可能造成的问题">外边距可能造成的问题</h3>
<h4 id="相邻块元素垂直外边距合并问题元素浮动后不会出现此问题">相邻块元素垂直外边距合并问题（元素浮动后不会出现此问题）</h4>
<p>使用 margin 定义块元素的<strong>垂直外边距</strong>时，可能会出现外边距的合并。当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top，则它么之间的垂直间距不是 margin-bottom 和 margin-top 之和。而是取两个值中的较大者<br>
<img src="http://image.kuranado.com/blog/1601607517.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
针对此问题的解决方案：尽量只给一个盒子添加 margin 值</p>
<h4 id="嵌套块元素垂直外边距的塌陷问题元素浮动后不会出现此问题">嵌套块元素垂直外边距的塌陷问题（元素浮动后不会出现此问题）</h4>
<p>对于两个嵌套（父子关系）的块元素，父元素有上外边距，同时子元素也有上外边距，此时父元素会塌陷成较大的上外边距<br>
<img src="http://image.kuranado.com/blog/1601607529.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></p>
<pre><code>.father {
    width: 200px;
    height: 200px;
    background-color: pink;
    margin-top: 50px;
}
.son {
    width: 40px;
    height: 40px;
    background-color: purple;
    margin-top: 100px;
}
&lt;div class=&quot;father&quot;&gt;
    &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><img src="http://image.kuranado.com/blog/1601607541.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
针对此问题的解决方案有 3 个：</p>
<ul>
<li>为父元素定义上边框</li>
</ul>
<pre><code>    
.father {
    width: 200px;
    height: 200px;
    background-color: pink;
    margin-top: 50px;
    border-top: 1px solid transparent;
}
.son {
    width: 40px;
    height: 40px;
    background-color: purple;
    margin-top: 100px;
}
&lt;div class=&quot;father&quot;&gt;
    &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1601607551.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<ul>
<li>为父元素定义上内边距</li>
<li>为父元素添加 overflow:hidden</li>
</ul>
<h4 id="兼容性">兼容性</h4>
<h2 id="内外边距">内外边距</h2>
<h3 id="清除浏览器默认内外边距">清除浏览器默认内外边距</h3>
<pre><code>/** CSS 的第一行代码 **/
* {
    margin: 0;
    padding: 0;
}
</code></pre>
<h3 id="行内元素的内外边距兼容性">行内元素的内外边距兼容性</h3>
<p>行内元素为了照顾兼容性，尽量只设置左右<strong>内外</strong>边距，不要设置上下内外边距。但是转换为块元素或行内块元素就没有这个问题</p>
<pre><code>span {
    /** span 为行内元素，只有左右内外边距生效为 20px，上下内外边距没有生效 **/
    margin: 20px
    padding: 20px;
}
&lt;span&gt;Hello&lt;/span&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电影 & 电视剧.md]]></title>
        <id>http://blog.kuranado.com/post/dian-ying-and-dian-shi-ju-md/</id>
        <link href="http://blog.kuranado.com/post/dian-ying-and-dian-shi-ju-md/">
        </link>
        <updated>2020-10-01T01:09:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="已看">已看</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-135816"><label class="task-list-item-label" for="task-item-135816"> Rango 蓝戈</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3769720"><label class="task-list-item-label" for="task-item-3769720"> 超能陆战队</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1818509"><label class="task-list-item-label" for="task-item-1818509"> 忠犬八公的故事</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9692896"><label class="task-list-item-label" for="task-item-9692896"> 肖申克的救赎</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3310055"><label class="task-list-item-label" for="task-item-3310055"> 魔女宅急变</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6009067"><label class="task-list-item-label" for="task-item-6009067"> 致命魔术</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3995029"><label class="task-list-item-label" for="task-item-3995029"> 机器人瓦利</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8350939"><label class="task-list-item-label" for="task-item-8350939"> 超级大坏蛋</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2534722"><label class="task-list-item-label" for="task-item-2534722"> 功夫熊猫 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3611970"><label class="task-list-item-label" for="task-item-3611970"> 龙猫</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9612629"><label class="task-list-item-label" for="task-item-9612629"> 冰雪奇缘 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4078054"><label class="task-list-item-label" for="task-item-4078054"> 冰雪奇缘-生日惊喜</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3721737"><label class="task-list-item-label" for="task-item-3721737"> 恐怖游轮</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1129133"><label class="task-list-item-label" for="task-item-1129133"> 天空之城</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-780027"><label class="task-list-item-label" for="task-item-780027"> 千与千寻</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5530384"><label class="task-list-item-label" for="task-item-5530384"> 哈尔的移动城堡</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6567728"><label class="task-list-item-label" for="task-item-6567728"> 杀死比尔 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8985349"><label class="task-list-item-label" for="task-item-8985349"> 速度与激情 3、4、5、6、7、8</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7258417"><label class="task-list-item-label" for="task-item-7258417"> 天将雄师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5336572"><label class="task-list-item-label" for="task-item-5336572"> 神偷奶爸 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3920805"><label class="task-list-item-label" for="task-item-3920805"> 小黄人大冒险</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7797691"><label class="task-list-item-label" for="task-item-7797691"> 钢铁侠</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2423200"><label class="task-list-item-label" for="task-item-2423200"> 海扁王 1</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9751940"><label class="task-list-item-label" for="task-item-9751940"> 东成西就</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1030673"><label class="task-list-item-label" for="task-item-1030673"> 起风了</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8894113"><label class="task-list-item-label" for="task-item-8894113"> 婚纱</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3794475"><label class="task-list-item-label" for="task-item-3794475"> 天降美食 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1241644"><label class="task-list-item-label" for="task-item-1241644"> 指环王-护戒使者</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1038626"><label class="task-list-item-label" for="task-item-1038626"> 指环王-双塔奇兵</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7676847"><label class="task-list-item-label" for="task-item-7676847"> 指环王-王者归来</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5474608"><label class="task-list-item-label" for="task-item-5474608"> 霍比特人-意外之旅</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3772043"><label class="task-list-item-label" for="task-item-3772043"> 霍比特人-史矛革荒漠</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2736091"><label class="task-list-item-label" for="task-item-2736091"> 霍比特人-五军之战</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1961952"><label class="task-list-item-label" for="task-item-1961952"> 头脑特工队</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4051696"><label class="task-list-item-label" for="task-item-4051696"> 源代码</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2961481"><label class="task-list-item-label" for="task-item-2961481"> 记忆碎片</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9988645"><label class="task-list-item-label" for="task-item-9988645"> 妈妈再爱我一次</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9156035"><label class="task-list-item-label" for="task-item-9156035"> 青春派</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3619393"><label class="task-list-item-label" for="task-item-3619393"> 黑客帝国 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9031430"><label class="task-list-item-label" for="task-item-9031430"> 模仿游戏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7279938"><label class="task-list-item-label" for="task-item-7279938"> 天才眼镜狗</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7818109"><label class="task-list-item-label" for="task-item-7818109"> 穿靴子的猫</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4113025"><label class="task-list-item-label" for="task-item-4113025"> 穿靴子的猫番外篇-萌猫三剑客</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2667800"><label class="task-list-item-label" for="task-item-2667800"> 盗梦空间</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9259229"><label class="task-list-item-label" for="task-item-9259229"> 逆世界</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1665058"><label class="task-list-item-label" for="task-item-1665058"> 终结者</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-941972"><label class="task-list-item-label" for="task-item-941972"> 碟中谍 1、2、3、4、5</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3893307"><label class="task-list-item-label" for="task-item-3893307"> 黑衣人 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9856567"><label class="task-list-item-label" for="task-item-9856567"> 少年班</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8451981"><label class="task-list-item-label" for="task-item-8451981"> 教父 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-73532"><label class="task-list-item-label" for="task-item-73532"> 阿甘正传</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2139991"><label class="task-list-item-label" for="task-item-2139991"> 剪刀手爱德华</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3388892"><label class="task-list-item-label" for="task-item-3388892"> 第九区</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-664245"><label class="task-list-item-label" for="task-item-664245"> 人工智能</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4295572"><label class="task-list-item-label" for="task-item-4295572"> 惊天魔盗团 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2084890"><label class="task-list-item-label" for="task-item-2084890"> 大圣归来</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3591099"><label class="task-list-item-label" for="task-item-3591099"> 马达加斯加的企鹅 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3489579"><label class="task-list-item-label" for="task-item-3489579"> 狮子王</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6813199"><label class="task-list-item-label" for="task-item-6813199"> 百万富翁</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2207112"><label class="task-list-item-label" for="task-item-2207112"> 驯龙高手 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6896864"><label class="task-list-item-label" for="task-item-6896864"> 怪物史莱克 1、2、3、4</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7375668"><label class="task-list-item-label" for="task-item-7375668"> 机器管家</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9017692"><label class="task-list-item-label" for="task-item-9017692"> 返老还童</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6306830"><label class="task-list-item-label" for="task-item-6306830"> 飞屋环游记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8874860"><label class="task-list-item-label" for="task-item-8874860"> 像素大战</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9554376"><label class="task-list-item-label" for="task-item-9554376"> 蚁人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1914289"><label class="task-list-item-label" for="task-item-1914289"> 侏罗纪公园</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9032408"><label class="task-list-item-label" for="task-item-9032408"> 憨豆特工</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6132452"><label class="task-list-item-label" for="task-item-6132452"> 憨豆的黄金周</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3275031"><label class="task-list-item-label" for="task-item-3275031"> 玛丽与马克思</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-158626"><label class="task-list-item-label" for="task-item-158626"> 海上钢琴师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1399819"><label class="task-list-item-label" for="task-item-1399819"> 功夫之王</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4921806"><label class="task-list-item-label" for="task-item-4921806"> 四大名捕</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8334659"><label class="task-list-item-label" for="task-item-8334659"> 天下无贼</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9894391"><label class="task-list-item-label" for="task-item-9894391"> 那些年我们一起追过的女孩</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1650090"><label class="task-list-item-label" for="task-item-1650090"> 功夫</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9284358"><label class="task-list-item-label" for="task-item-9284358"> 长江7号</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4512809"><label class="task-list-item-label" for="task-item-4512809"> 后天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6062211"><label class="task-list-item-label" for="task-item-6062211"> 2012</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7165215"><label class="task-list-item-label" for="task-item-7165215"> 我是传奇</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6127814"><label class="task-list-item-label" for="task-item-6127814"> 超人汉考克</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5737862"><label class="task-list-item-label" for="task-item-5737862"> 哥斯拉</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9491890"><label class="task-list-item-label" for="task-item-9491890"> 暮光之城 1、2、3、4 破晓上、4 破晓下</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4641269"><label class="task-list-item-label" for="task-item-4641269"> 风之谷</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4149485"><label class="task-list-item-label" for="task-item-4149485"> 叶问 1、2、3、4</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3154541"><label class="task-list-item-label" for="task-item-3154541"> 海绵宝宝历险记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2663655"><label class="task-list-item-label" for="task-item-2663655"> 十月围城</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8656769"><label class="task-list-item-label" for="task-item-8656769"> 一代宗师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4097936"><label class="task-list-item-label" for="task-item-4097936"> 师父</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7738695"><label class="task-list-item-label" for="task-item-7738695"> 镖门</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-811968"><label class="task-list-item-label" for="task-item-811968"> 极速蜗牛</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8444544"><label class="task-list-item-label" for="task-item-8444544"> 史蒂夫乔布斯</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5894405"><label class="task-list-item-label" for="task-item-5894405"> 乔布斯传</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9099530"><label class="task-list-item-label" for="task-item-9099530"> 疯狂动物城</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1577852"><label class="task-list-item-label" for="task-item-1577852"> 美人鱼</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5314166"><label class="task-list-item-label" for="task-item-5314166"> 楚门的世界</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7989551"><label class="task-list-item-label" for="task-item-7989551"> 雷蒙-斯尼奇的不幸历险</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8358380"><label class="task-list-item-label" for="task-item-8358380"> 机械姬</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1143969"><label class="task-list-item-label" for="task-item-1143969"> 拯救大兵瑞恩</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6551718"><label class="task-list-item-label" for="task-item-6551718"> 入殓师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8024759"><label class="task-list-item-label" for="task-item-8024759"> 盗走达芬奇</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6080889"><label class="task-list-item-label" for="task-item-6080889"> 蝴蝶效应 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6419813"><label class="task-list-item-label" for="task-item-6419813"> 偷天换日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7016248"><label class="task-list-item-label" for="task-item-7016248"> 十二只猴子</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1023094"><label class="task-list-item-label" for="task-item-1023094"> 星际穿越</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2341412"><label class="task-list-item-label" for="task-item-2341412"> 死侍 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6701301"><label class="task-list-item-label" for="task-item-6701301"> 异邦人-无皇刃谭</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7772362"><label class="task-list-item-label" for="task-item-7772362"> 饥饿游戏 1</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3956769"><label class="task-list-item-label" for="task-item-3956769"> 机械心（法国）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5427503"><label class="task-list-item-label" for="task-item-5427503"> 怪兽大学</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3924807"><label class="task-list-item-label" for="task-item-3924807"> 美国队长 3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5766890"><label class="task-list-item-label" for="task-item-5766890"> 神战 - 权利之眼</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4193858"><label class="task-list-item-label" for="task-item-4193858"> 心灵捕手</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8795806"><label class="task-list-item-label" for="task-item-8795806"> 头文字D剧场版-梦现</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4284596"><label class="task-list-item-label" for="task-item-4284596"> 哆啦A梦-伴我同行</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9206513"><label class="task-list-item-label" for="task-item-9206513"> BAT MAN VS SUPER MAN</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-25473"><label class="task-list-item-label" for="task-item-25473"> 鲁滨逊漂流记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8964211"><label class="task-list-item-label" for="task-item-8964211"> 泰迪熊 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8673551"><label class="task-list-item-label" for="task-item-8673551"> 爱宠大机密</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1148023"><label class="task-list-item-label" for="task-item-1148023"> 生化危机 1 - 变种生还</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9099626"><label class="task-list-item-label" for="task-item-9099626"> 生化危机 2 - 启示录</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3887791"><label class="task-list-item-label" for="task-item-3887791"> 生化危机 3 - 灭绝</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9026185"><label class="task-list-item-label" for="task-item-9026185"> 生化危机 4 - 战神再生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7239927"><label class="task-list-item-label" for="task-item-7239927"> 生化危机 5 - 惩罚</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6069570"><label class="task-list-item-label" for="task-item-6069570"> 生化危机 6 - 终章</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4405050"><label class="task-list-item-label" for="task-item-4405050"> 生化危机-恶化</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2085416"><label class="task-list-item-label" for="task-item-2085416"> 这个杀手不太冷</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7979362"><label class="task-list-item-label" for="task-item-7979362"> 生化危机-诅咒</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3695133"><label class="task-list-item-label" for="task-item-3695133"> 茱莉亚的眼睛</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-925307"><label class="task-list-item-label" for="task-item-925307"> 你的名字</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2905579"><label class="task-list-item-label" for="task-item-2905579"> 秒速五厘米</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-87513"><label class="task-list-item-label" for="task-item-87513"> 机械师 2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-837042"><label class="task-list-item-label" for="task-item-837042"> 佩小姐的奇幻城堡</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3942610"><label class="task-list-item-label" for="task-item-3942610"> 猫的报恩</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3977321"><label class="task-list-item-label" for="task-item-3977321"> 权力的游戏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9216061"><label class="task-list-item-label" for="task-item-9216061"> 杀戮都市 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5901017"><label class="task-list-item-label" for="task-item-5901017"> 热血高校 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1529763"><label class="task-list-item-label" for="task-item-1529763"> 言叶之庭</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6519779"><label class="task-list-item-label" for="task-item-6519779"> 加勒比海盗 1、2、3、4、5</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9968512"><label class="task-list-item-label" for="task-item-9968512"> 萤火虫之墓</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3803643"><label class="task-list-item-label" for="task-item-3803643"> 变形金刚 1、2、3、4、5</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-117514"><label class="task-list-item-label" for="task-item-117514"> 当幸福来敲门</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-606045"><label class="task-list-item-label" for="task-item-606045"> 少年派的奇幻漂流</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4030312"><label class="task-list-item-label" for="task-item-4030312"> 美丽心灵</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2331904"><label class="task-list-item-label" for="task-item-2331904"> 序列之争</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3837447"><label class="task-list-item-label" for="task-item-3837447"> 凉宫春日的消失</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5122819"><label class="task-list-item-label" for="task-item-5122819"> 境界的彼方-未来篇</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4032731"><label class="task-list-item-label" for="task-item-4032731"> 菊次郎的夏天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5647076"><label class="task-list-item-label" for="task-item-5647076"> 环太平洋 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1593624"><label class="task-list-item-label" for="task-item-1593624"> 轻音少女剧场版</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3079801"><label class="task-list-item-label" for="task-item-3079801"> 玉子的爱情故事</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7808410"><label class="task-list-item-label" for="task-item-7808410"> 寻梦环游记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5584625"><label class="task-list-item-label" for="task-item-5584625"> 明日边缘</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-255262"><label class="task-list-item-label" for="task-item-255262"> 土拨鼠之日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5028567"><label class="task-list-item-label" for="task-item-5028567"> 魁拔 1 - 十万火急</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7526910"><label class="task-list-item-label" for="task-item-7526910"> 魁拔 2 - 大战元泱界</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7283304"><label class="task-list-item-label" for="task-item-7283304"> 魁拔 3 - 战神崛起</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9205940"><label class="task-list-item-label" for="task-item-9205940"> 英伦对决</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9507177"><label class="task-list-item-label" for="task-item-9507177"> 奇幻森林</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4446402"><label class="task-list-item-label" for="task-item-4446402"> 唐人街探案 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7325850"><label class="task-list-item-label" for="task-item-7325850"> 电锯惊魂 1、8</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7376778"><label class="task-list-item-label" for="task-item-7376778"> 艺伎回忆录</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6010423"><label class="task-list-item-label" for="task-item-6010423"> 猫汤</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-155077"><label class="task-list-item-label" for="task-item-155077"> 伊豆的舞女</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2975239"><label class="task-list-item-label" for="task-item-2975239"> 神鞭</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6273150"><label class="task-list-item-label" for="task-item-6273150"> 达芬奇密码</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4476836"><label class="task-list-item-label" for="task-item-4476836"> 哈利波特 1 - 魔法师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4491208"><label class="task-list-item-label" for="task-item-4491208"> 哈利波特 2 - 密室</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7989545"><label class="task-list-item-label" for="task-item-7989545"> 西虹市首富</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2467761"><label class="task-list-item-label" for="task-item-2467761"> 奇异博士</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7793948"><label class="task-list-item-label" for="task-item-7793948"> 失恋 33 天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5988591"><label class="task-list-item-label" for="task-item-5988591"> 情书</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9612240"><label class="task-list-item-label" for="task-item-9612240"> 朝花夕誓</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8694780"><label class="task-list-item-label" for="task-item-8694780"> 风雨哈佛路</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6187986"><label class="task-list-item-label" for="task-item-6187986"> 飓风营救</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5388763"><label class="task-list-item-label" for="task-item-5388763"> 摩天营救</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3807405"><label class="task-list-item-label" for="task-item-3807405"> 摄影机不要停</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9583350"><label class="task-list-item-label" for="task-item-9583350"> 阿尔法-狼伴归途</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2871137"><label class="task-list-item-label" for="task-item-2871137"> 疯狂的麦克斯 1、4</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7007421"><label class="task-list-item-label" for="task-item-7007421"> 流浪地球</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1496850"><label class="task-list-item-label" for="task-item-1496850"> 海王</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3274444"><label class="task-list-item-label" for="task-item-3274444"> 特种部队 2 - 全面反击</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9460911"><label class="task-list-item-label" for="task-item-9460911"> 白蛇缘起</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8524517"><label class="task-list-item-label" for="task-item-8524517"> 花牌情缘 上之句</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-786549"><label class="task-list-item-label" for="task-item-786549"> 花牌情缘 下之句</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1768185"><label class="task-list-item-label" for="task-item-1768185"> 神探夏洛克</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7070636"><label class="task-list-item-label" for="task-item-7070636"> 惊奇队长</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1819452"><label class="task-list-item-label" for="task-item-1819452"> X 战警</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3483658"><label class="task-list-item-label" for="task-item-3483658"> 银河护卫队 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8148427"><label class="task-list-item-label" for="task-item-8148427"> 帕丁顿熊 2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3418741"><label class="task-list-item-label" for="task-item-3418741"> 复仇者联盟 1、2、3、4</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2124172"><label class="task-list-item-label" for="task-item-2124172"> 阿丽塔</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2988479"><label class="task-list-item-label" for="task-item-2988479"> 蜘蛛侠 - 英雄远征</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5569024"><label class="task-list-item-label" for="task-item-5569024"> 哪吒之魔童降世</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3960411"><label class="task-list-item-label" for="task-item-3960411"> 中国机长</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5547039"><label class="task-list-item-label" for="task-item-5547039"> 天气之子</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9842363"><label class="task-list-item-label" for="task-item-9842363"> 生死狙击</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9582062"><label class="task-list-item-label" for="task-item-9582062"> 星际探索</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2347234"><label class="task-list-item-label" for="task-item-2347234"> 猩球崛起</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-167484"><label class="task-list-item-label" for="task-item-167484"> 全民风暴</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3034713"><label class="task-list-item-label" for="task-item-3034713"> 忍者神龟-变种时代</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5178409"><label class="task-list-item-label" for="task-item-5178409"> 荒野猎人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8506380"><label class="task-list-item-label" for="task-item-8506380"> 调音师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9593248"><label class="task-list-item-label" for="task-item-9593248"> 忍者神龟 2 - 破影而出 2020年4月25日星期六</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1733671"><label class="task-list-item-label" for="task-item-1733671"> 灭绝 - 烂片</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5080179"><label class="task-list-item-label" for="task-item-5080179"> Hello World</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2080132"><label class="task-list-item-label" for="task-item-2080132"> 黑金</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4474239"><label class="task-list-item-label" for="task-item-4474239"> 灵魂摆渡</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5415652"><label class="task-list-item-label" for="task-item-5415652"> 画壁</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5748811"><label class="task-list-item-label" for="task-item-5748811"> 诸神之怒</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1280120"><label class="task-list-item-label" for="task-item-1280120"> 诸神之战 2020年7月11日星期六</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6192712"><label class="task-list-item-label" for="task-item-6192712"> X 特遣队</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2072556"><label class="task-list-item-label" for="task-item-2072556"> 王牌特工 2 黄金圈 2020年10月1日星期四</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8976538"><label class="task-list-item-label" for="task-item-8976538"> 王牌特工 1 特工学院 2020年10月1日星期四</label></li>
</ul>
<h2 id="待看">待看</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1790041"><label class="task-list-item-label" for="task-item-1790041"> 幽灵公主</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2990843"><label class="task-list-item-label" for="task-item-2990843"> 种下星星的日子</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9762531"><label class="task-list-item-label" for="task-item-9762531"> 蜘蛛侠-英雄归来</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6434288"><label class="task-list-item-label" for="task-item-6434288"> 匆匆那年</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1226902"><label class="task-list-item-label" for="task-item-1226902"> 泰坦尼克号</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-240283"><label class="task-list-item-label" for="task-item-240283"> 罗马假日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5814645"><label class="task-list-item-label" for="task-item-5814645"> 红猪</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8734383"><label class="task-list-item-label" for="task-item-8734383"> 侧耳倾听</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1806999"><label class="task-list-item-label" for="task-item-1806999"> 小美人鱼</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5996822"><label class="task-list-item-label" for="task-item-5996822"> 玩具总动员</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5539899"><label class="task-list-item-label" for="task-item-5539899"> 怪兽大战外星人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1535102"><label class="task-list-item-label" for="task-item-1535102"> 料理鼠王</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5348082"><label class="task-list-item-label" for="task-item-5348082"> ET</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5108008"><label class="task-list-item-label" for="task-item-5108008"> 硅谷传奇</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1013964"><label class="task-list-item-label" for="task-item-1013964"> 卧虎藏龙</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9480131"><label class="task-list-item-label" for="task-item-9480131"> 阿凡达 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-394511"><label class="task-list-item-label" for="task-item-394511"> 冰河世纪</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6953994"><label class="task-list-item-label" for="task-item-6953994"> 疯狂原始人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9881565"><label class="task-list-item-label" for="task-item-9881565"> 守护者联盟</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6776485"><label class="task-list-item-label" for="task-item-6776485"> 贫民窟的百万富翁</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8238763"><label class="task-list-item-label" for="task-item-8238763"> 银翼杀手</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9291368"><label class="task-list-item-label" for="task-item-9291368"> 彗星来的那一夜</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9384315"><label class="task-list-item-label" for="task-item-9384315"> 希特勒的名单</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4392897"><label class="task-list-item-label" for="task-item-4392897"> 十二怒汉</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6868770"><label class="task-list-item-label" for="task-item-6868770"> 异次元骇客</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7423228"><label class="task-list-item-label" for="task-item-7423228"> 感官游戏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5496206"><label class="task-list-item-label" for="task-item-5496206"> 冒名顶替</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7967129"><label class="task-list-item-label" for="task-item-7967129"> 无姓之人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4420175"><label class="task-list-item-label" for="task-item-4420175"> 香草的天空</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2249906"><label class="task-list-item-label" for="task-item-2249906"> 星际迷航</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7354961"><label class="task-list-item-label" for="task-item-7354961"> 独立日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6316343"><label class="task-list-item-label" for="task-item-6316343"> 荒野猎人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1540980"><label class="task-list-item-label" for="task-item-1540980"> 第三种爱情</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3249307"><label class="task-list-item-label" for="task-item-3249307"> 拉登日记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6684284"><label class="task-list-item-label" for="task-item-6684284"> 乱世佳人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9317237"><label class="task-list-item-label" for="task-item-9317237"> 苔丝</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7634372"><label class="task-list-item-label" for="task-item-7634372"> 霸王别姬</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5978213"><label class="task-list-item-label" for="task-item-5978213"> 美丽人生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4330159"><label class="task-list-item-label" for="task-item-4330159"> 三傻大闹宝莱坞</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8517610"><label class="task-list-item-label" for="task-item-8517610"> 放牛班的春天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-57732"><label class="task-list-item-label" for="task-item-57732"> 怦然心动</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1202536"><label class="task-list-item-label" for="task-item-1202536"> V字仇杀队</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3186074"><label class="task-list-item-label" for="task-item-3186074"> 被嫌弃的松子的一生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3204951"><label class="task-list-item-label" for="task-item-3204951"> 穿越时空的少女</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4219856"><label class="task-list-item-label" for="task-item-4219856"> 荒野生存</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6995845"><label class="task-list-item-label" for="task-item-6995845"> 叛逆的物语</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-811109"><label class="task-list-item-label" for="task-item-811109"> 沉默的羔羊</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4961958"><label class="task-list-item-label" for="task-item-4961958"> 控方证人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5186788"><label class="task-list-item-label" for="task-item-5186788"> 锅匠 裁缝 士兵 间谍（Tinker Tailor Soldier Spy）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3379603"><label class="task-list-item-label" for="task-item-3379603"> 第六感</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8726567"><label class="task-list-item-label" for="task-item-8726567"> 傲慢与偏见</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8640367"><label class="task-list-item-label" for="task-item-8640367"> 刺客联盟</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5574884"><label class="task-list-item-label" for="task-item-5574884"> 末日崩塌</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2893963"><label class="task-list-item-label" for="task-item-2893963"> 隧道</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2844253"><label class="task-list-item-label" for="task-item-2844253"> 感冒</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-854814"><label class="task-list-item-label" for="task-item-854814"> 铁线虫入侵</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6117629"><label class="task-list-item-label" for="task-item-6117629"> 恐怖直播</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5288538"><label class="task-list-item-label" for="task-item-5288538"> 万物理论</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5205595"><label class="task-list-item-label" for="task-item-5205595"> 社交网络</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8428927"><label class="task-list-item-label" for="task-item-8428927"> 缩小人生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-404190"><label class="task-list-item-label" for="task-item-404190"> 地球停转之日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3773418"><label class="task-list-item-label" for="task-item-3773418"> 恋空</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1151843"><label class="task-list-item-label" for="task-item-1151843"> 黑镜</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5549780"><label class="task-list-item-label" for="task-item-5549780"> 死亡诗社</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1461250"><label class="task-list-item-label" for="task-item-1461250"> 和莎莫的 500 天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3668074"><label class="task-list-item-label" for="task-item-3668074"> 饮食男女</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2514313"><label class="task-list-item-label" for="task-item-2514313"> 我是大哥大</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1424215"><label class="task-list-item-label" for="task-item-1424215"> 星运里的错</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7963772"><label class="task-list-item-label" for="task-item-7963772"> 突袭</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1362741"><label class="task-list-item-label" for="task-item-1362741"> 无敌破坏王 1</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1493900"><label class="task-list-item-label" for="task-item-1493900"> 无敌破坏王 2 - 大闹互联网</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6060159"><label class="task-list-item-label" for="task-item-6060159"> 回到未来</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4080573"><label class="task-list-item-label" for="task-item-4080573"> 刺客信条</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2988876"><label class="task-list-item-label" for="task-item-2988876"> 死亡笔记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-748560"><label class="task-list-item-label" for="task-item-748560"> 金田一</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2758499"><label class="task-list-item-label" for="task-item-2758499"> 安德的游戏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6860544"><label class="task-list-item-label" for="task-item-6860544"> 最终幻想</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8874202"><label class="task-list-item-label" for="task-item-8874202"> 阿拉丁神灯</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8053516"><label class="task-list-item-label" for="task-item-8053516"> 木乃伊</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-292054"><label class="task-list-item-label" for="task-item-292054"> 国家宝藏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2602376"><label class="task-list-item-label" for="task-item-2602376"> 博物馆奇妙夜</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5537793"><label class="task-list-item-label" for="task-item-5537793"> 舞出我人生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1606694"><label class="task-list-item-label" for="task-item-1606694"> 赌博默示录 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9700550"><label class="task-list-item-label" for="task-item-9700550"> 超体</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1078172"><label class="task-list-item-label" for="task-item-1078172"> 蓝色大海的传说</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1712737"><label class="task-list-item-label" for="task-item-1712737"> 来自星星的你</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9630568"><label class="task-list-item-label" for="task-item-9630568"> 巨额来电</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1206619"><label class="task-list-item-label" for="task-item-1206619"> 二代妖精</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2525673"><label class="task-list-item-label" for="task-item-2525673"> 可可西里的美丽传说</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8646470"><label class="task-list-item-label" for="task-item-8646470"> 信条</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-631139"><label class="task-list-item-label" for="task-item-631139"> 摩天大楼</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式总结.md]]></title>
        <id>http://blog.kuranado.com/post/zheng-ze-biao-da-shi-zong-jie-md/</id>
        <link href="http://blog.kuranado.com/post/zheng-ze-biao-da-shi-zong-jie-md/">
        </link>
        <updated>2020-10-01T00:59:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基本">基本</h2>
<ul>
<li>正则表达式区分字母大小写</li>
<li><code>.</code> 字符可以匹配<strong>任意</strong>单个字符、字母、数字、空格甚至是 <code>.</code> 字符本身。但在绝大多数正则表达式实现里，<code>.</code> 不能匹配换行符</li>
<li><code>\</code> 用于转义</li>
<li><code>\.</code> 匹配字符 <code>.</code> 本身</li>
<li><code>\\</code> 匹配字符 <code>\</code></li>
</ul>
<hr>
<h2 id="字符区间">字符区间</h2>
<ul>
<li><code>[abc]</code> 匹配字符 <code>a</code> 或 <code>b</code> 或 <code>c</code>，</li>
<li><code>[0-9]</code> 等价于 <code>[0123456789]</code></li>
<li><code>[a-z]</code> 等价于 <code>[abcdefghijklmnopqrstuvwxyz]</code>，<code>[A-Z]</code> 等价于 <code>[ABCDEFGHIJKLMNOPQRSTUVWXYZ]</code>，<code>[A-z]</code> 等价于 <code>[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]</code>（按照 Ascii 顺序），<code>[A-Za-z0-9]</code> 等价于 <code>[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789]</code></li>
</ul>
<blockquote>
<p>很多程序员喜欢把一个字符也定义为一个字符区间，如 <code>[a]</code> 等价于 <code>a</code>，<code>[\r]?</code> 等价于 <code>\r?</code>，但前者可以避免产生误解、增加可读性，所以建议一个字符也定义为字符区间</p>
</blockquote>
<hr>
<h2 id="排除">排除</h2>
<ul>
<li><code>[^a-c]</code> 排除 <code>a</code> 或 <code>b</code> 或 <code>c</code></li>
</ul>
<hr>
<h2 id="空白字符">空白字符</h2>
<ul>
<li><code>[\b]</code> 匹配回退（并删除）一个字符（Backspace 键）</li>
<li><code>\f</code> 匹配换页符</li>
<li><code>\r</code> 匹配回车符</li>
<li><code>\n</code> 匹配换行符</li>
<li><code>\t</code> 匹配制表符（Tab 键）</li>
<li><code>\v</code> 匹配垂直制表符</li>
</ul>
<blockquote>
<p>在 Unix 或 Linux 上使用 <code>\n</code> 匹配行尾标记，Windows 上使用 <code>\r\n</code> 匹配行尾标记</p>
</blockquote>
<hr>
<h2 id="特定字符类型">特定字符类型</h2>
<ul>
<li><code>\d</code> 匹配任何一个数字字符，等价于 <code>[0-9]</code></li>
<li><code>\D</code> 匹配任何一个<strong>非数字</strong>字符，等价于 <code>[^0-9]</code></li>
<li><code>\w</code> 匹配任何一个字母（大小写均可）或数字类型或下划线字符，等价于 <code>[A-z0-9_]</code></li>
<li><code>\W</code> 匹配任何一个<strong>非字母（大小写均可）或数字类型或下划线字符</strong>，等价于 <code>[^A-z0-9_]</code></li>
<li><code>\s</code> 匹配任何一个空白字符，等价于 <code>[\f\r\n\t\v ]</code>，注意包含空格</li>
<li><code>\S</code> 匹配任何一个非空白字符，等价于 <code>[^\f\r\n\t\v ]</code></li>
</ul>
<hr>
<h2 id="转义">转义</h2>
<ul>
<li><code>.</code>、<code>[</code>、<code>]</code>、<code>\</code>、<code>+</code>、<code>*</code>、<code>?</code>、<code>(</code>、<code>)</code> 等具有特殊含义的符号被称为<strong>元字符</strong>，如果要匹配元字符，则需要对元字符进行转义，如 <code>\.</code> 匹配字符 <code>.</code>，<code>\[</code> 匹配字符 <code>[</code>，<code>\]</code> 匹配字符 <code>]</code>，<code>\\</code> 匹配字符 <code>\</code></li>
<li><code>/</code> 字符并不是元字符，在绝大多数正则表达式解析器中如果要匹配字符 <code>/</code> 并不需要转义，但有些解析器却要求必须转义才能够匹配，所以建议总是在需要匹配字符 <code>/</code> 时对其进行转义，即使用 <code>\/</code> 匹配字符 <code>/</code>，这样在所有解析器中都能够正常工作</li>
<li>像 <code>.</code>、<code>+</code> 这样的元字符出现在字符区间内部时，将会被解释为普通字符，可以不用转义，如 <code>[\w\.]</code> 等价于 <code>[\w.]</code>，但为了防止误解，建议显示转义</li>
</ul>
<hr>
<h2 id="重复匹配">重复匹配</h2>
<ul>
<li><code>+</code> 元字符匹配一个或多个字符，如 <code>a+</code> 匹配一个或多个连续的 <code>a</code>，<code>[0-9]+</code> 匹配一个或多个连续的数字</li>
<li><code>*</code> 元字符匹配 0 个或多个字符</li>
<li><code>?</code> 元字符匹配 0 个或 1 个字符</li>
<li><code>{n}</code> 重复匹配 n 次</li>
<li><code>{m,n}</code> 重复匹配 m ~ n 次，如 <code>{0,1}</code> 表示最少匹配 0 次，最多匹配 1 次，等价于 <code>?</code></li>
<li><code>{m,}</code> 重复匹配至少 m 次</li>
<li><code>*</code> 和 <code>+</code> 是贪婪型元字符，它们会尽可能地从一段文本的开头一致匹配到末尾，而不是碰到一个匹配时就停止，如果想要碰到第一个匹配时就停止，则应该使用元字符对应的懒惰型。<code>*</code> 元字符对应的懒惰型为 <code>*?</code>，<code>+</code> 元字符对应的懒惰型为 <code>+?</code>。如想要匹配 HTML <code>&lt;b&gt;</code> 标签中的文本，贪婪型正则如下：<pre><code>&lt;[Bb]&gt;.*&lt;\/[Bb]&gt;
</code></pre>
但对于如下文本匹配却有问题：<br>
<img src="http://image.kuranado.com/blog/1601514029.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
正确写法是使用懒惰型：<pre><code>&lt;[Bb]&gt;.*?&lt;\/[Bb]&gt;
</code></pre>
匹配结果：<br>
<img src="http://image.kuranado.com/blog/1601514040.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></li>
</ul>
<blockquote>
<p>在为字符区间加后缀的时候，必须把后缀放到区间外面，如 <code>[0-9]+</code> 是正确的，而 <code>[0-9+]</code> 是错误的，同理 <code>[0-9]*</code>、<code>[0-9]?</code> 是正确的，而 <code>[0-9*]</code>、<code>[0-9?]</code> 是错误的<br>
注意 <code>{m,n}</code> 是正确的，<code>{m, n}</code> 是不正确的，因为个人习惯在英文 <code>,</code> 后加一个空格，但在使用此正则时需要注意避免</p>
</blockquote>
<hr>
<h2 id="位置匹配">位置匹配</h2>
<ul>
<li><code>\b</code> 表示边界（boundary），匹配<strong>单词</strong>的开头或结尾。这里所谓的单词是指能够被 <code>\w</code> 匹配的内容即称为单词，<code>\b</code> 匹配的时字符之间的一个位置：一边是单词（能够被 <code>\w</code> 所匹配的），一边是其它内容（能够被 <code>\W</code> 所匹配的）。<code>b</code> 匹配的是一个位置，而不是任何实际字符</li>
<li><code>\B</code> 不匹配单词边界</li>
<li><code>^</code> 匹配字符串开头位置。<code>^</code> 用于字符区间中表示排除，如 <code>[^abc]</code> <code>[^a-c]</code> 排除 <code>a</code> 或 <code>b</code> 或 <code>c</code>，但当 <code>^</code> 用于字符区间之外时，则表示匹配字符串的起始位置</li>
<li><code>$</code> 匹配字符串结尾位置</li>
<li><code>(?m)</code> 用于开启多行模式，<code>(?m)</code> 必须出现在整个模式的最前面，但实际包括 JavaScript 在内的许多正则表达式都不支持 <code>(?m)</code></li>
</ul>
<hr>
<h2 id="子表达式">子表达式</h2>
<ul>
<li>前面介绍的重复匹配只作用于紧挨着它的前一个字符或元字符，为了能够重复匹配多个字符，需要使用子表达式</li>
<li>子表达式必须出现在元字符 <code>(</code> 和 <code>)</code> 之间</li>
<li>对于不需要使用子表达式的地方，如果加上元字符 <code>(</code> 和 <code>)</code> 使其成为子表达式，虽然对匹配结果不会有任何影响，但可能会影响性能，如把 <code>\d{1,3}</code> 如果写成子表达式：<code>(\d{1,3})</code>，匹配结果完全一样，但后者可能会影响性能</li>
<li>因为模式是从左到右进行评估的，首先测试第一个，然后测试第二个，只要有任何一个模式匹配，就不再测试选择结构中的其它模式。比如 IP 地址的匹配：<br>
IP 地址范围为 0.0.0.0 ~ 255.255.255.255，总结如下：
<ol>
<li>任意的 1 位或 2 位数字</li>
<li>任意的以 1 开头的 3 位数字</li>
<li>任意的以 2 开头，第二位数字在 0 到 4 之间的 3 位数字</li>
<li>任意的以 25 开头，第三位数字在 0 到 5 之间的 3 位数字<br>
很容易写出如下正则：</li>
</ol>
<pre><code>(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))
</code></pre>
但这个正则却是错误的，如 IP 地址：<code>12.159.46.200</code> 的匹配结果如下图，最后的 0 无法被匹配，这是因为 <code>20</code> 已经被子表达式 <code>(\d{1, 2})</code> 匹配，并没有被 <code>(25[0-5])</code> 匹配<br>
<img src="http://image.kuranado.com/blog/1601514063.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
正确的写法如下：<pre><code>((((25[0-5])\d)|(2[0-4]\d)|(1\d{2})|(\d{1,2}))\.){3}(((25[0-5])\d)|(2[0-4]\d)|(1\d{2})|(\d{1,2}))
</code></pre>
匹配结果：<br>
<img src="http://image.kuranado.com/blog/1601514071.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></li>
</ul>
<hr>
<h2 id="反向引用">反向引用</h2>
<ul>
<li>
<p>反向引用允许正则表达式模式引用之前匹配的结果，如想要匹配所有的 HTML 标题，正则如下：</p>
<pre><code>(&lt;[Hh]1&gt;.*?&lt;\/[Hh]1&gt;)|(&lt;[Hh]2&gt;.*?&lt;\/[Hh]2&gt;)|(&lt;[Hh]3&gt;.*?&lt;\/[Hh]3&gt;)|(&lt;[Hh]4&gt;.*?&lt;\/[Hh]4&gt;)|(&lt;[Hh]5&gt;.*?&lt;\/[Hh]5&gt;)|(&lt;[Hh]6&gt;.*?&lt;\/[Hh]6&gt;)
</code></pre>
<p>匹配结果也的确是正确的：<br>
<img src="http://image.kuranado.com/blog/1601514090.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
但是这样写未免过于臃肿，所以有人可能会这样写：</p>
<pre><code>&lt;[Hh][1-6]&gt;.*?&lt;\/[Hh][1-6]&gt; 
</code></pre>
<p>但实际这却是错误的，因为他会将 <code>&lt;h2&gt;</code> 和 <code>&lt;/h3&gt;</code> 匹配到一块，而这是错误的 HTML 标题：       <img src="http://image.kuranado.com/blog/1601514113.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></p>
<p>正确的写法是使用反向引用：</p>
<pre><code>&lt;[Hh]([1-6])&gt;.*?&lt;\/[Hh]\1&gt;
</code></pre>
<p>匹配结果：<br>
<img src="http://image.kuranado.com/blog/1601514136.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
使用了 <code>\1</code> 引用了第 1 个子表达式 <code>([1-6])</code>，如果有第 2 个、第 3 个等子表达式，则使用 <code>\2</code>、<code>\3</code> 引用</p>
</li>
<li>
<p>反向引用只能引用括号里的子表达式</p>
</li>
<li>
<p>不同的正则实现中，反向引用的语法存在很大差异，如 JavaScript 和 vim 在搜索时使用 <code>\</code> 标识反向引用，在替换时使用 <code>$</code> 标识反向引用，Perl 搜索和替换都使用 <code>$</code> 标识反向引用</p>
</li>
</ul>
<hr>
<h2 id="反向引用替换">反向引用替换</h2>
<ul>
<li>如将文档中的所有邮箱地址全替换为 HTML 链接
<ol>
<li>先写出正则表达式，找出所有的邮箱地址，为了能够使用反向引用，加 <code>(</code> 和 <code>)</code> 让其变成子表达式：<pre><code>(\w+[\w\.]*@[\w\.]+\.\w+)
</code></pre>
</li>
<li>编写替换的表达式：<pre><code>&lt;a href=&quot;mailto:$1&quot;&gt;$1&lt;/a&gt;
</code></pre>
</li>
<li>开始替换，可以使用编程语言，如 JavaScript，这里简单直接以 VsCode 操作为例（注意要选择正则表达式模式）：<br>
<img src="http://image.kuranado.com/blog/1601514160.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
点击替换按钮，替换结果如下：<br>
<img src="http://image.kuranado.com/blog/1601514172.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></li>
</ol>
</li>
<li>反向引用替换大小写转换（并不是所有正则表达式实现都支持）：
<ul>
<li><code>\U</code> 把 <code>\U</code> 到 <code>\E</code> 之间的字符全部转换为大写</li>
<li><code>\L</code> 把 <code>\L</code> 到 <code>\E</code> 之间的字符全部转换为小写</li>
<li><code>\E</code> 结束 <code>\U</code> 或 <code>\L</code> 转换</li>
<li><code>u</code> 把下一个字符转换为大写</li>
<li><code>l</code> 把下一个字符转换为小写</li>
</ul>
</li>
</ul>
<hr>
<h2 id="环视">环视</h2>
<ul>
<li><code>?=</code> 表示向前查看，如：<code>?=:</code> 匹配字符 <code>:</code> 但不消耗字符 <code>:</code>，所谓的不消耗是指匹配到的 <code>:</code> 不会在最终的匹配结果中返回。如对于如下文本：<pre><code>http://www.baidu.com
</code></pre>
表达式 <code>http:</code> 匹配 <code>http:</code>，而如果使用向前查看，表达式为：<code>http(?=:)</code>，匹配结果为：<code>http</code>，不包含字符 <code>:</code></li>
<li><code>?&lt;=</code> 表示向后查看，如：<code>?&lt;=\$</code> 匹配字符 <code>$</code>，但不消耗字符 <code>$</code>，如对于如下文本：<pre><code>ABC01: $253.00
</code></pre>
表达式 <code>\$[\d\.]+\d{2}</code> 匹配 <code>$253.00</code>，而如果使用向后查看，表达式为：<code>(?&lt;=\$)[\d\.]+\d{2}</code>，匹配结果为：<code>253.00</code>，不包含字符 <code>$</code></li>
<li>向前查看和向后查看的否定式分别为：<code>?!</code> 和 <code>?&lt;!</code>，即将肯定式中的 <code>=</code> 换成 <code>!</code></li>
</ul>
<blockquote>
<p>所有主流正则表达式实现都支持向前查看，但有些语言不支持向后查看，如 JavaScript</p>
</blockquote>
<hr>
<h2 id="正则测试网站">正则测试网站</h2>
<ul>
<li><a href="https://regex101.com/">https://regex101.com/</a></li>
<li><a href="https://www.regextester.com/">https://www.regextester.com/</a></li>
</ul>
<hr>
<h2 id="参考">参考</h2>
<ul>
<li>《正则表达式必知必会修订版》</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 元素的显示模式.md]]></title>
        <id>http://blog.kuranado.com/post/css-yuan-su-de-xian-shi-mo-shi-md/</id>
        <link href="http://blog.kuranado.com/post/css-yuan-su-de-xian-shi-mo-shi-md/">
        </link>
        <updated>2020-10-01T00:36:19.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="块元素">块元素</h2>
<ul>
<li>div、p、h1 ~ h6、ul、ol、li 标签都是典型的块元素</li>
<li>独占一行</li>
<li>宽度、高度、外边距、内边距都可以控制</li>
<li>宽度默认是容器（父元素）的 100%</li>
<li>不会继承父元素的高度</li>
<li>是一个容器或盒子，里面可以放块元素或行内元素</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>文字类的元素内不能再放块元素，如 p 标签内不能再放块元素，特别是不能再放 div 标签，同理，h1 ~ h6 也是文字类块元素，里面不能再放其它块元素</li>
</ul>
<h2 id="行内元素">行内元素</h2>
<ul>
<li>a、strong、b、em、i、del、s、ins、u、span 标签都是典型的行内元素，行内元素也称为内联元素</li>
<li>相邻行内元素显示在一行上，一行可以显示多个行内元素</li>
<li><strong>为行内元素设置宽度、高度是不生效的</strong></li>
<li>默认宽度就是它本身内容的宽度</li>
<li>行内元素只能容纳文本或其它行内元素（a 标签除外，a 标签内可以再放块元素，如 div 标签）</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>a 标签内不能再放其它 a 标签</li>
<li>a 标签内可以再放块元素，如 div 标签，但是一般的做法是将 a 标签转换为块元素，然后再在 a 标签内放块元素（这种情况下，a 不转换为块级元素也可以，但是安全起见，建议当 a 标签内包含块级元素时，将 a 标签转换为块级元素）</li>
</ul>
<h2 id="行内块元素">行内块元素</h2>
<ul>
<li>img、input、td 都是典型的行内块元素，它们同时具有块元素和行内元素的特点</li>
<li>相邻行内块元素显示在一行上，但是它们之间会有空白缝隙，一行可以显示多个行内块元素</li>
<li>默认宽度就是它本身内容的宽度</li>
<li>宽度、高度、外边距、内边距都可以控制</li>
</ul>
<h2 id="元素显示模式转换">元素显示模式转换</h2>
<h3 id="转换为行内元素使用的很少">转换为行内元素（使用的很少）</h3>
<pre><code>div {
    background-color: skyblue;
    display: inline;
}
&lt;div&gt;转行内元素一&lt;/div&gt;
&lt;div&gt;转行内元素二&lt;/div&gt;
</code></pre>
<h3 id="转换为块元素最常用">转换为块元素（最常用）</h3>
<pre><code>span {
    width: 200px;
    height: 200px;
    background-color: pink;
    display: block;
}
&lt;span&gt;转块元素一&lt;/span&gt;
&lt;span&gt;转块元素二&lt;/span&gt;
</code></pre>
<h3 id="转换为行内块元素常用">转换为行内块元素（常用）</h3>
<pre><code>span {
    width: 200px;
    height: 200px;
    background-color: pink;
    display: inline-block;
}
&lt;span&gt;转行内块元素一&lt;/span&gt;
&lt;span&gt;转行内块元素二&lt;/span&gt;
</code></pre>
<h2 id="单行文字垂直居中原理">单行文字垂直居中原理</h2>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601512614.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>行高等于文字本身高度 + 上边距 + 下边距，如果盒子高度等于行高，文字显然会垂直居中，如：</p>
<pre><code>a {
    display: block;
    width: 200px;
    height: 40px;
    font-size: 14px;
    line-height: 40px;
    color: white;
    font-weight: 700;
    text-decoration: none;
    padding-left: 30px;
    background-color: #434648;
}
a:hover {
    background-color: #F74E00;
}
&lt;a href=&quot;#&quot;&gt;手机 电话卡&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;电视 盒子&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;笔记本 平板&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;出行 穿戴&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;智能 路由器&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;健康 儿童&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;耳机 音箱&lt;/a&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1601512625.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>如果行高小于盒子高度，则文字会偏上；如果行高大于盒子高度，则文字会偏下</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VsCode 中 Emmet 语法快速生成HTML 和 CSS 代码.md]]></title>
        <id>http://blog.kuranado.com/post/vscode-zhong-emmet-yu-fa-kuai-su-sheng-cheng-html-he-css-dai-ma-md/</id>
        <link href="http://blog.kuranado.com/post/vscode-zhong-emmet-yu-fa-kuai-su-sheng-cheng-html-he-css-dai-ma-md/">
        </link>
        <updated>2020-09-30T01:36:35.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<blockquote>
<p>敲完简写后，按 Tab 自动完成</p>
</blockquote>
<h2 id="html">HTML</h2>
<ul>
<li><code>div</code></li>
</ul>
<pre><code>&lt;div&gt;&lt;/div&gt;
</code></pre>
<ul>
<li><code>div*3</code></li>
</ul>
<pre><code>&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</code></pre>
<ul>
<li><code>{}</code> 定义标签内的内容，<code>div{Hello}</code></li>
</ul>
<pre><code>&lt;div&gt;Hello&lt;/div&gt;
</code></pre>
<ul>
<li><code>div{Hello}*3</code></li>
</ul>
<pre><code>&lt;div&gt;Hello&lt;/div&gt;
&lt;div&gt;Hello&lt;/div&gt;
&lt;div&gt;Hello&lt;/div&gt;
</code></pre>
<ul>
<li>父子关系标签，使用 <code>&gt;</code>，如 <code>ul&gt;li</code>：</li>
</ul>
<pre><code>&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p><code>div&gt;p</code>：</p>
<pre><code>&lt;div&gt;
    &lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<ul>
<li>兄弟关系标签，使用 <code>+</code>，如 <code>div+p</code>：</li>
</ul>
<pre><code>&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
</code></pre>
<ul>
<li><code>()</code> 指定优先级，如 <code>ul&gt;(li+bq)</code>：</li>
</ul>
<pre><code>&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/ul&gt;
</code></pre>
<p><code>(ul&gt;li)+bq</code>：</p>
<pre><code>&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
</code></pre>
<ul>
<li>带有类选择器，如 <code>.gray</code>，默认生成 class 为 gray 的 div：</li>
</ul>
<pre><code>&lt;div class=&quot;gray&quot;&gt;&lt;/div&gt;
</code></pre>
<p>如果要生成其它标签 class 为 gray，则 <code>p.gray</code>：</p>
<pre><code>&lt;p class=&quot;gray&quot;&gt;&lt;/p&gt;
</code></pre>
<p>一次生成多个 class 选择器，如 <code>.box1.box2.box3</code>：</p>
<pre><code>&lt;div class=&quot;box1 box2 box3&quot;&gt;&lt;/div&gt;
</code></pre>
<p><code>p.box1.box2.box3</code>：</p>
<pre><code>&lt;p class=&quot;box1 box2 box3&quot;&gt;&lt;/p&gt;
</code></pre>
<ul>
<li>带有 ID 选择器，如 <code>#gray</code>，默认生成 id 为 gray 的 div：</li>
</ul>
<pre><code>&lt;div id=&quot;gray&quot;&gt;&lt;/div&gt;
</code></pre>
<p>如果要生成其它标签 id 为 gray，则 <code>p#gray</code>：</p>
<pre><code>&lt;p id=&quot;gray&quot;&gt;&lt;/p&gt;
</code></pre>
<p>既有类选择器，又有 id 选择器，如 <code>p.box1.box2#gray</code>：</p>
<pre><code>&lt;p class=&quot;box1 box2&quot; id=&quot;gray&quot;&gt;&lt;/p&gt;
</code></pre>
<ul>
<li><code>[]</code> 表示属性，如 <code>ul&gt;li&gt;a[href=&quot;#&quot;]</code>：</li>
</ul>
<pre><code>&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<ul>
<li><code>$</code> 表示自增，如 <code>div{$}*3</code>：</li>
</ul>
<pre><code>&lt;div&gt;1&lt;/div&gt;
&lt;div&gt;2&lt;/div&gt;
&lt;div&gt;3&lt;/div&gt;
</code></pre>
<p><code>div.gray$*3</code>：</p>
<pre><code>&lt;div class=&quot;gray1&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;gray2&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;gray3&quot;&gt;&lt;/div&gt;
</code></pre>
<p><code>p.gray${$}*3</code>：</p>
<pre><code>&lt;p class=&quot;gray1&quot;&gt;1&lt;/p&gt;
&lt;p class=&quot;gray2&quot;&gt;2&lt;/p&gt;
&lt;p class=&quot;gray3&quot;&gt;3&lt;/p&gt;
</code></pre>
<p><code>ul&gt;li.gray${Hello$}*3</code>：</p>
<pre><code>&lt;ul&gt;
    &lt;li class=&quot;gray1&quot;&gt;Hello1&lt;/li&gt;
    &lt;li class=&quot;gray2&quot;&gt;Hello2&lt;/li&gt;
    &lt;li class=&quot;gray3&quot;&gt;Hello3&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<h2 id="css">CSS</h2>
<p>CSS 中一般取每个单词首字母，然后 Tab 即可自动补全/生成：</p>
<ul>
<li><code>w200</code>：</li>
</ul>
<pre><code>width: 200px;
</code></pre>
<ul>
<li><code>h200</code>：</li>
</ul>
<pre><code>height: 200px;
</code></pre>
<ul>
<li><code>lh26px</code>：</li>
</ul>
<pre><code>line-height: 26px;
</code></pre>
<ul>
<li><code>ti2em</code>：</li>
</ul>
<pre><code>text-indent: 2em;
</code></pre>
<ul>
<li><code>tdn</code>：</li>
</ul>
<pre><code>text-decoration: none;
</code></pre>
<ul>
<li><code>tac</code>：</li>
</ul>
<pre><code>text-align: center;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 选择器.md]]></title>
        <id>http://blog.kuranado.com/post/css-xuan-ze-qi-md/</id>
        <link href="http://blog.kuranado.com/post/css-xuan-ze-qi-md/">
        </link>
        <updated>2020-09-30T00:14:07.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="基础选择器">基础选择器</h2>
<h3 id="标签选择器">标签选择器</h3>
<pre><code>/** 选择所有 p 标签 **/
p {
    color: red;
}
</code></pre>
<h3 id="类选择器">类选择器</h3>
<pre><code>/** 选择所有 class 属性值为 red 的标签 **/
.red {
    color: red;
}
&lt;p class=&quot;red&quot;&gt;Hello&lt;/p&gt;
</code></pre>
<h3 id="类选择器-多类名">类选择器-多类名</h3>
<pre><code>.box {
    width: 100px;
    height: 100px;
    font-size: 35px;
}
.red {
    color: red;
}
.green {
    color: green;
}
&lt;div class=&quot;box red&quot;&gt;红色&lt;/div&gt;
&lt;div class=&quot;box green&quot;&gt;绿色&lt;/div&gt;
&lt;div class=&quot;box red&quot;&gt;红色&lt;/div&gt;
</code></pre>
<h3 id="id-选择器">ID 选择器</h3>
<pre><code>#pink {
    color: pink;
}
&lt;p id=&quot;pink&quot;&gt;Hello&lt;/p&gt;
</code></pre>
<h3 id="通配符选择器">通配符选择器</h3>
<pre><code>/** 选择页面所有标签 **/
* {
    maring: 0;
    padding: 0;
}
</code></pre>
<h2 id="复合选择器">复合选择器</h2>
<h3 id="后代选择器又称包含选择器重要">后代选择器（又称包含选择器，重要）</h3>
<pre><code>/** 选择 ol 下的所有 li 标签（包括子元素、孙子元素、重孙等） **/
ol li {
    color: pink;
}
</code></pre>
<h3 id="子选择器重要">子选择器（重要）</h3>
<pre><code>/** 只选择第一代子元素（只选择亲儿子） **/
div &gt; a {
    color: red;
}
</code></pre>
<h3 id="并集选择器重要">并集选择器（重要）</h3>
<pre><code>/** 选择 div 标签、 p 标签和 .nav 下的 ul 下的 li 标签 **/
div, 
p, 
.nav ul li {
    color: red;
}
</code></pre>
<h3 id="伪类选择器">伪类选择器</h3>
<h4 id="链接伪类选择器">链接伪类选择器</h4>
<pre><code>/** 选择所有未被点击过的链接（不常用，一般直接用 a 标签选择器选择） **/
a:link {
    color: black;
}
/** 选择所有点击过的链接 **/
a:visited {
    color: orange;
}
/** 选择鼠标悬浮的链接，最常用 **/
a:hover {
    color: blue;
}
/** 选择鼠标按下，还没有抬起的链接 **/
a:active {
    color: green;
}
</code></pre>
<p>一般只会用到 a:hover 选择器，如果 4 个链接伪类选择器都要使用，则一定要按照 <strong>LVHA</strong> 的先后顺序定义，否则将不会生效</p>
<h4 id="focus-伪类选择器">focus 伪类选择器</h4>
<pre><code>/** 选择获取焦点的表单元素 **/
input:focus {
    background-color: yellow;
}
</code></pre>
<h2 id="选择器权重优先级">选择器权重（优先级）</h2>
<ul>
<li>!import &gt; 行内样式 &gt; ID 选择器 &gt; 类选择器，伪类选择器 &gt; 标签选择器 &gt; 继承或者 <code>*</code></li>
</ul>
<table>
<thead>
<tr>
<th>选择器</th>
<th>权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>继承或者 <code>*</code></td>
<td>0 0 0 0</td>
</tr>
<tr>
<td>标签选择器，伪元素选择器</td>
<td>0 0 0 1</td>
</tr>
<tr>
<td>类选择器，伪类选择器，属性选择器（CSS3）</td>
<td>0 0 1 0</td>
</tr>
<tr>
<td>ID 选择器</td>
<td>0 1 0 0</td>
</tr>
<tr>
<td>行内样式</td>
<td>1 0 0 0</td>
</tr>
<tr>
<td>!import</td>
<td>无穷大</td>
</tr>
</tbody>
</table>
<ul>
<li>浏览器为 a 标签默认指定了蓝色、带下划线的样式，如：</li>
</ul>
<pre><code>body {
    color: red;
}
&lt;body&gt;
    &lt;!-- 显示为蓝色带下划线，因为浏览器默认为 a 标签指定了蓝色下划线，而标签选择器优先级 &gt; 继承，所以最终显示为蓝色带下划线 --&gt;
    &lt;a href=&quot;#&quot;&gt;链接&lt;/a&gt;
&lt;/body&gt;
</code></pre>
<ul>
<li>复合选择器会有权重叠加，如：</li>
</ul>
<pre><code>ul li {
    color: red;
}
li {
    color: green;
}
&lt;ul&gt;
    &lt;!-- 显示为红色，而不是绿色，因为标签选择器的权重为 0 0 0 1，所以复合选择器 ul li 的权重为 0 0 0 1 + 0 0 0 1 = 0 0 0 2，0 0 0 2 &gt; 标签选择器 li 的权重 0 0 0 1，所以最后显示为红色而不是绿色 --&gt;
    &lt;li&gt;Hello&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>再如：</p>
<pre><code>.nav li {
    color: pink;
}
ul li {
    color: red;
}
li {
    color: green;
}
&lt;ul class=&quot;nav&quot;&gt;
    &lt;!-- 显示为粉色，不是红色也不是绿色，复合选择器 .nav li 的权重为 0 0 1 0 + 0 0 0 1 = 0 0 1 1，该值大于复合选择器 ul li 的权重 0 0 0 2，也大于标签选择器 li 的权重 0 0 0 1，所以最后显示为粉色 --&gt;
    &lt;li&gt;Hello&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<ul>
<li>权重虽然会有叠加，但一定不会有进位，如 0 0 0 9 + 0 0 0 2 = 0 0 0 11 而不是 0 0 1 1</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同时管理 GitHub/GitLab/Gitee 等多个 SSH  Key.md]]></title>
        <id>http://blog.kuranado.com/post/githubgitlab-tong-shi-guan-li-duo-ge-ssh-keymd/</id>
        <link href="http://blog.kuranado.com/post/githubgitlab-tong-shi-guan-li-duo-ge-ssh-keymd/">
        </link>
        <updated>2020-09-29T01:17:21.000Z</updated>
        <content type="html"><![CDATA[<p>平时在 GitHub 拉取、提交代码时都是通过本地放置 <code>~/.ssh/id_rsa</code> 私钥，GitHub 账号下配置公钥 <code>id_rsa.pub</code> 完成的<br>
但除了 GitHub，有时候还需要用到 GitLab、Gitee 等代码托管平台，如何在同一台电脑上配置多对秘钥呢？</p>
<h2 id="生成-ssh-key">生成 ssh key</h2>
<p>生成并添加第一个ssh key</p>
<pre><code>cd ~/.ssh
ssh-keygen -t rsa -C &quot;youremail@163.com&quot;
</code></pre>
<p>这时可以一路回车，不输入任何字符，将自动生成 id_rsa 和 id_rsa.pub 文件<br>
然后把 id_rsa.pub 内容添加到 GitHub 账号下，私钥保留在 <code>~/.ssh</code> 目录</p>
<p>生成并添加第二个ssh key</p>
<pre><code>$ ssh-keygen -t rsa -C &quot;youremail@163.com&quot;
</code></pre>
<p>注意，这时不能一路回车，否则邮箱将覆盖上一次生成的 ssh key，给这个文件起一个名字， 比如叫 id_rsa_gitlab, 相应的也会生成一个 id_rsa_gitlab.pub 文件。</p>
<p>此时查看 <code>~/.ssh</code> 下的目录文件，发现多了 id_rsa_gitlab 和 id_rsa_gitlab.pub 两个文件<br>
同样，将 id_rsa_gitlab.pub 文件内容复制到 GitLab 账号下，id_rsa_gitlab 文件留在 <code>~/.ssh</code> 目录下</p>
<h2 id="增加修改配置文件">增加/修改配置文件</h2>
<p>在 <code>~/.ssh</code> 目录下新建一个 config 文件</p>
<pre><code>touch config
</code></pre>
<p>并添加以下内容</p>
<pre><code># gitlab
Host gitlab.com
    HostName gitlab.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
# github
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github
</code></pre>
<p><strong>需要注意的是，公司一般都是自建 GitLab，如公司自建 GitLab 地址为 <code>http://gitlab.companyname.com</code>，则 Host 和 HostName 就需要配置为 <code>gitlab.companyname.com</code> 才可以</strong>：</p>
<pre><code># github
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
# gitlab
Host gitlab.companyname.com
    HostName gitlab.companyname.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_gitlab
</code></pre>
<p>同理可以继续为其它代码托管平台生成公私钥</p>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601342260.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="测试">测试</h2>
<pre><code>$ ssh -T git@github.com
</code></pre>
<p>如果输出：Hi xxx You've successfully authenticated, but GitHub does not provide shell access.，说明成功的连上 github 了，以后可以自由从 GitHub 克隆、拉取、提交代码<br>
但是如果提示：Bad owner or permissions on /home/jing/.ssh/config，则是因为 <code>~/.ssh/config</code> 文件的权限不对，执行 <code>chmod 600 ~/.ssh/config</code> 修改权限即可</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="http://xuyuan923.github.io/2014/11/04/github-gitlab-ssh/">GitHub/GitLab 同时管理多个ssh key</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 泛型总结.md]]></title>
        <id>http://blog.kuranado.com/post/java-fan-xing-zong-jie-md/</id>
        <link href="http://blog.kuranado.com/post/java-fan-xing-zong-jie-md/">
        </link>
        <updated>2020-09-28T09:30:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="泛型类">泛型类</h2>
<p>我们知道使用泛型可以使类型错误在编译时就被检测到，从而能够增加程序的健壮性。</p>
<h3 id="定义泛型类">定义泛型类</h3>
<pre><code>public class Generic&lt;T&gt; {

    private T key;

    public Generic(T key) {
        this.key = key;
    }

    public T getKey() {
        return key;
    }

    public void setKey(T key) {
        this.key = key;
    }
}
</code></pre>
<h3 id="实例化泛型类">实例化泛型类</h3>
<pre><code>Generic&lt;String&gt; genericString = new Generic&lt;&gt;(&quot;abc&quot;);
Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
System.out.println(genericString.getKey());
System.out.println(genericInteger.getKey());
</code></pre>
<p>需要注意的是泛型的类型参数必须是<code>引用类型</code>（类、接口、数组等都是 <code>引用类型</code>）而不能是简单类型，如 <code>Generic&lt;int&gt; generic = new Generic&lt;&gt;(123);</code> 是不允许的。</p>
<p>当然和 List 等一样，实例化泛型类可以传入任意类型而并不一定非要传入泛型类实参，只不过既然我们将类定义为泛型类，其目的就是希望开发者们能够传入确定的类型实参，以增加程序健壮性：</p>
<pre><code>Generic generic = new Generic(&quot;abc&quot;);
Generic generic2 = new Generic(123);
Generic generic3 = new Generic(true);
</code></pre>
<h2 id="泛型接口">泛型接口</h2>
<h3 id="定义泛型接口">定义泛型接口</h3>
<pre><code>public interface Generator&lt;T&gt; {
    public T fun();
}
</code></pre>
<h3 id="实现泛型接口">实现泛型接口</h3>
<pre><code>public class PersonGenerator&lt;T&gt; implements Generator&lt;T&gt; {
    @Override
    public T fun() {
        return null;
    }
}
</code></pre>
<p>可见当类实现泛型接口时若没有传入泛型实参，则需要将泛型也加到类的定义中，否则像下面的代码将会出现编译错误：</p>
<pre><code>public class PersonGenerator implements Generator&lt;T&gt; {
    @Override
    public T fun() {
        return null;
    }
}
</code></pre>
<p>如果实现泛型接口时传入了泛型实参，则该类中所有使用泛型的地方都要替换成传入的泛型实参：</p>
<pre><code>public class PersonGenerator implements Generator&lt;String&gt; {
    @Override
    public String fun() {
        return null;
    }
}
</code></pre>
<h2 id="泛型方法">泛型方法</h2>
<p>为了判断数组中是否包含某值写了如下两个重载方法：</p>
<pre><code>public static void main(String[] args) {
    Integer[] integers = new Integer[]{1, 2, 3};
    String[] strings = new String[]{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
    System.out.println(contains(2, integers));
    System.out.println(contains(&quot;b&quot;, strings));
}
public static boolean contains(Integer integer, Integer[] integers) {
    return Arrays.asList(integers).contains(integer);
}
public static boolean contains(String s, String[] strings) {
    return Arrays.asList(strings).contains(s);
}
</code></pre>
<p>但如果还想要判断 Float 类型的数组中是否包含某个值就有需要编写一个重载方法，好在我们可以通过泛型方法有效的避免这些冗余的方法：</p>
<pre><code>public static void main(String[] args) {
    Integer[] integers = new Integer[]{1, 2, 3};
    String[] strings = new String[]{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
    Float[] floats = new Float[]{0.1f, 0.2f, 0.3f};
    System.out.println(contains(2, integers));
    System.out.println(contains(&quot;b&quot;, strings));
    System.out.println(contains(0.2f, floats));
}
public static &lt;T&gt; boolean contains(T t, T[] ts) {
    return Arrays.asList(ts).contains(t);
}
</code></pre>
<p>需要注意的是方法返回值前需要包含形式参数，如 <code>&lt;T&gt;</code>， <strong>否则该方法不能被称为泛型方法</strong>，编译也将出错。<br>
值得一提的是，如果同时保留以下两个方法：</p>
<pre><code>public static &lt;T&gt; boolean contains(T t, T[] ts) {
    return Arrays.asList(ts).contains(t);
}
public static boolean contains(Integer integer, Integer[] integers) {
    return Arrays.asList(integers).contains(integer);
}
</code></pre>
<p><code>contains(&quot;b&quot;, strings)</code> 会自动匹配泛型方法，而 <code>contains(2, integers)</code> 匹配的是普通方法而不是泛型方法。</p>
<h2 id="泛型通配符">泛型通配符</h2>
<h3 id="无限定通配符-unbounded-wildcard">无限定通配符-Unbounded Wildcard</h3>
<p>我们知道 Integer、Double、Float 等都是 Number 类的子类，所以下面的代码完全没问题：</p>
<pre><code>public static void main(String[] args) {
    printMsg(123);
}
public static void printMsg(Number number) {
    System.out.println(number);
}
</code></pre>
<p>基本类型 123 被自动装箱成 Integer 类型，而 Integer 又是 Number 类的子类，所以可以作为 printMsg 方法的实参。</p>
<p>但泛型类 <code>Generic&lt;Number&gt;</code> 和 <code>Generic&lt;Integer&gt;</code> 可以认为是两个完全没有关联的新类型，两者之间不具有任何继承关系，所以下面的代码会出现编译错误：</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Number&gt; genericNumber = new Generic&lt;&gt;(123);
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    printMsg(genericNumber);  // 编译通过
    printMsg(genericInteger); // 编译出错，因为 Generic&lt;Integer&gt; 和 Generic&lt;Number&gt; 二者之间没有任何继承关系
}
public static void printMsg(Generic&lt;Number&gt; generic) {
    System.out.println(generic.getKey());
}
</code></pre>
<p>而如果就是希望 printMsg 方法既能接收 <code>Generic&lt;Number&gt;</code> 又能够接收 <code>Generic&lt;Integer&gt;</code>类型，甚至是能够接收传入了任意实参类型的 <code>Generic</code> 泛型类（如 <code>Generic&lt;String&gt;</code>、<code>Generic&lt;Random&gt;</code>等），则需要用到泛型通配符 <code>?</code> 了：</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Number&gt; genericNumber = new Generic&lt;&gt;(123);
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    printMsg(genericNumber);  // 编译通过
    printMsg(genericInteger); // 编译通过
}
public static void printMsg(Generic&lt;?&gt; generic) {
    System.out.println(generic.getKey());
}
</code></pre>
<h3 id="上限通配符-upper-bounded-wildcard">上限通配符-Upper Bounded Wildcard</h3>
<p>为泛型添加上边界，即传入的类型实参必须是指定类型或指定类型的子类。使用 <code>extends</code> 指定上限通配符</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Number&gt; genericNumber = new Generic&lt;&gt;(123);
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    Generic&lt;Float&gt; genericFloat = new Generic&lt;&gt;(0.5f);
    Generic&lt;String&gt; genericString = new Generic&lt;&gt;(&quot;Hello&quot;);
    printMsg(genericNumber);  // 编译通过
    printMsg(genericInteger); // 编译通过
    printMsg(genericFloat);   // 编译通过
    printMsg(genericString);  // 编译出错
}
public static void printMsg(Generic&lt;? extends Number&gt; generic) {
    System.out.println(generic.getKey());
}
</code></pre>
<p>因为 <code>Generic&lt;? extends Number&gt; generic</code> 指定了传入的类型实参必须是 Number 类或 Number 类的子类，所以<code>printMsg(genericString);</code> 出错，因为 String 不是 Number 的子类</p>
<h3 id="下限通配符-lower-bounded-wildcard">下限通配符-Lower Bounded Wildcard</h3>
<p>和上限通配符类似，下限通配符使用 <code>super</code> 关键字实现：</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Number&gt; genericNumber = new Generic&lt;&gt;(123);
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    Generic&lt;Float&gt; genericFloat = new Generic&lt;&gt;(0.5f);
    Generic&lt;String&gt; genericString = new Generic&lt;&gt;(&quot;Hello&quot;);
    printMsg(genericNumber);  // 编译通过
    printMsg(genericInteger); // 编译通过
    printMsg(genericFloat);   // 编译出错
    printMsg(genericString);  // 编译出错
}
public static void printMsg(Generic&lt;? super Integer&gt; generic) {
    System.out.println(generic.getKey());
}
</code></pre>
<p>因为 <code>Generic&lt;? super Integer&gt; generic</code> 指定了传入的类型实参必须是 Integer 类或 Integer 类的父类，所以 <code>printMsg(genericFloat);</code> 和 <code>printMsg(genericString);</code> 出现编译错误，因为 Float 和 String 都不是 Integer 类的父类</p>
<h2 id="类型擦除-type-erasure">类型擦除-Type Erasure</h2>
<p>Java 的泛型只在编译阶段有效，编译过程中正确检验泛型结果后，会将泛型相关信息擦除，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法，即泛型信息不回进入运行时阶段：</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    Generic&lt;String&gt; genericString= new Generic&lt;&gt;(&quot;Hello&quot;);
    System.out.println(genericInteger.getClass() == genericString.getClass());  // 返回 true
}
</code></pre>
<p>结果返回 <code>true</code> ，说明虽然编译时 <code>Generic&lt;Integer&gt;</code> 和 <code>Generic&lt;String&gt;</code> 是不同的类型，但因为泛型的类型擦除，所以编译后 <code>genericInteger</code> 和 <code>genericString</code> 为相同的类型</p>
<h2 id="命名规则">命名规则</h2>
<p>JDK 中文档经常能看到 <code>T</code>、<code>K</code>、<code>V</code>、<code>E</code>、<code>N</code> 等类型参数，而我们在编写泛型相关代码时，这些符号都可以随意使用，实际上还可以使用 JDK 文档中从来没用过的符号，如 <code>A</code>、<code>B</code>、<code>C</code> 等，但却极力不推荐这样做</p>
<p>JDK 文档中各符号的含义：</p>
<ul>
<li>T：类型</li>
<li>K：键</li>
<li>V：值</li>
<li>E：元素（如集合类中的元素全部用该符号表示）</li>
<li>N：Number</li>
</ul>
<p>我们应该遵循 JDK 中已有的规范</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://blog.csdn.net/u012152619/article/details/47253811">java泛型详解</a><br>
<a href="https://blog.csdn.net/s10461/article/details/53941091/">java 泛型详解-绝对是对泛型方法讲解最详细的，没有之一</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[适配器模式.md]]></title>
        <id>http://blog.kuranado.com/post/gua-pei-qi-mo-shi-md/</id>
        <link href="http://blog.kuranado.com/post/gua-pei-qi-mo-shi-md/">
        </link>
        <updated>2020-09-28T04:52:46.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>适配器模式又叫 Adapter 模式</p>
</blockquote>
<h2 id="什么是适配器模式">什么是适配器模式</h2>
<blockquote>
<p>将一个类的接口转换成客户希望的另一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的类可以在一起工作</p>
</blockquote>
<p>适配器模式中的角色：</p>
<ul>
<li>Target：目标接口。客户所期望的接口，可以是具体的类，也可以是抽象类或接口</li>
<li>Adaptee：需要适配的类</li>
<li>Adapter：适配器。通过包装一个需要适配的对象，把原接口转换成目标接口</li>
</ul>
<h2 id="栗子">栗子</h2>
<p>网购一块键盘，收到货时却是这样的：</p>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601268804.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>......，黑心店家竟然发了块 PS2 接口的键盘</p>
<p>可把我给气坏了！！！</p>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1601268819.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>因为笔记本接口是这样的：</p>
<figure data-type="image" tabindex="3"><img src="http://image.kuranado.com/blog/1601268843.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>只有 USB 接口</p>
<p>黑心店家不给退货，没办法，翻箱倒柜，DIY 了一个 PS2 转 USB 的转换器：</p>
<figure data-type="image" tabindex="4"><img src="http://image.kuranado.com/blog/1601268890.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>最终如愿以偿的用上了新键盘</p>
<figure data-type="image" tabindex="5"><img src="http://image.kuranado.com/blog/1601268901.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>好了，就以这个场景为例，简单写下代码吧：</p>
<h3 id="adaptee">Adaptee</h3>
<p>拥有 PS2 接口的键盘是需要被适配的类</p>
<pre><code>package com.kuranado.adaptor;

/**
 * PS2 键盘（要被适配的对象）
 * @Author: Xinling Jing
 * @Date: 2018-12-23 13:28
 */
public class PS2KeyboardAdaptee {

    public void specificRequest() {
        System.out.println(&quot;处理打字请求&quot;);
    }

}
</code></pre>
<h3 id="target">Target</h3>
<p>客户（也就是笔记本）所期望的 USB 接口</p>
<pre><code>package com.kuranado.adaptor;

/**
 * USB 接口（目标接口，客户所期望的接口）
 * @Author: Xinling Jing
 * @Date: 2018-12-23 13:33
 */
public interface USBTarget {

    void handleRequest();

}
</code></pre>
<h3 id="adapter">Adapter</h3>
<p>PS2 和 USB 的转换器，通过组合的方式包装了被适配的对象，并调用被适配对象所具有的功能。<br>
因为客户端只关心 USB 接口的使用，所以需要实现 USBTarget</p>
<pre><code>package com.kuranado.adaptor;

/**
 * PS2 到 USB 转接口（适配器）
 * @Author: Xinling Jing
 * @Date: 2018-12-23 13:43
 */
public class PS22USBAdapter implements USBTarget {

    private PS2KeyboardAdaptee adaptee;

    @Override
    public void handleRequest() {
        adaptee.specificRequest();
    }

    public PS22USBAdapter(PS2KeyboardAdaptee adaptee) {
        this.adaptee = adaptee;
    }
}
</code></pre>
<h3 id="client">Client</h3>
<p>客户端调用 Target 接口</p>
<pre><code>package com.kuranado.adaptor;

/**
 * 电脑客户端类
 * @Author: Xinling Jing
 * @Date: 2018-12-23 13:31
 */
public class ComputerClient {

    public void test(USBTarget target) {
        target.handleRequest();
    }

    public static void main(String[] args) {
        ComputerClient client = new ComputerClient();
        PS2KeyboardAdaptee adaptee = new PS2KeyboardAdaptee();
        USBTarget target = new PS22USBAdapter(adaptee);
        client.test(target);
    }
}
</code></pre>
<p>程序运行效果：</p>
<pre><code>处理打字请求
</code></pre>
<p>总结适配器模式各个角色的的关系如下图：</p>
<figure data-type="image" tabindex="6"><img src="http://image.kuranado.com/blog/1601268916.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="实际业务中的栗子">实际业务中的栗子</h2>
<p>上面的例子比较简单，但真正业务中该如何应用适配器模式呢？此处把《研磨设计模式》中的例子拿过来与大家一起学习</p>
<h3 id="1-logmodel日志类用于保存日志相关信息">1. LogModel：日志类，用于保存日志相关信息：</h3>
<pre><code>/**
 * 日志类
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:01
 */
@Data
public class LogModel implements Serializable {

    private static final long serialVersionUID = -2324527735778406382L;
   
    private String logId;
    /**
     * 日志内容
     */
    private String logContent;
    /**
     * 操作人
     */
    private String operateUser;
    /**
     * 操作时间
     */
    private String operateTime;

    public LogModel() {
    }

    public LogModel(String logId, String logContent, String operateUser, String operateTime) {
        this.logId = logId;
        this.logContent = logContent;
        this.operateUser = operateUser;
        this.operateTime = operateTime;
    }
}
</code></pre>
<h3 id="2-logfileoperateapi从文件中读取日志或向文件中写入日志的接口">2. LogFileOperateApi：从文件中读取日志或向文件中写入日志的接口：</h3>
<pre><code>/**
 *
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:08
 */
public interface LogFileOperateApi {

    List&lt;LogModel&gt; readLogFile();

    void writeLogFile(List&lt;LogModel&gt; logModels);
}
</code></pre>
<h3 id="3-logfileoperateapi-接口的实现类">3. LogFileOperateApi 接口的实现类：</h3>
<pre><code>/**
 *
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:10
 */
public class LogFileOperateApiImpl implements LogFileOperateApi {

    // 默认的日志路径
    private String logFilePathName = &quot;/Users/jing/Code/GitHub/DesignPatterns/src/main/resources/AdaptorLog.log&quot;;

    public LogFileOperateApiImpl(String logFilePathName) {
        if (logFilePathName != null &amp;&amp; logFilePathName.trim().length() &gt; 0) {
            this.logFilePathName = logFilePathName;
        }
    }

    @Override
    @SuppressWarnings(&quot;unchecked&quot;)
    public List&lt;LogModel&gt; readLogFile() {
        File file;
        ObjectInputStream objectInputStream = null;
        List&lt;LogModel&gt; logModels = null;
        try {
            file = new File(logFilePathName);
            if (file.exists()) {
                InputStream inputStream = new FileInputStream(file);
                if (inputStream.available() != 0) {
                    objectInputStream = new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)));
                    logModels = (List&lt;LogModel&gt;) objectInputStream.readObject();
                } else {
                    return null;
                }
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            if (objectInputStream != null) {
                try {
                    objectInputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return logModels;
    }

    @Override
    public void writeLogFile(List&lt;LogModel&gt; logModels) {
        ObjectOutputStream objectOutputStream = null;
        File file;
        try {
            file = new File(logFilePathName);
            objectOutputStream = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
            objectOutputStream.writeObject(logModels);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (objectOutputStream != null) {
                try {
                    objectOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
</code></pre>
<h3 id="4-client">4. Client:</h3>
<pre><code>/**
 * 客户端
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:01
 */
public class Client {

    public static void main(String[] args) {

        LogModel logModel = new LogModel(&quot;0001&quot;, &quot;这是第一条测试日志&quot;, &quot;JING&quot;, &quot;2018-08-03 09:44:35&quot;);

        List&lt;LogModel&gt; logModels = new ArrayList&lt;&gt;();
        logModels.add(logModel);

        LogFileOperateApi logFileOperateApi = new LogFileOperateApiImpl(&quot;&quot;);
        logFileOperateApi.writeLogFile(logModels);
        List&lt;LogModel&gt; models = logFileOperateApi.readLogFile();
        System.out.println(models);
    }
}
</code></pre>
<p>客户端创建了一个日志对象，并将该日志对象写入了文件，然后从文件中读取出日志，并打印出来：</p>
<pre><code>[LogModel(logId=0001, logContent=这是第一条测试日志, operateUser=JING, operateTime=2018-08-03 09:44:35)]
</code></pre>
<p>这样程序正常运行着，可是突然有一天 leader 说为了方便日志管理，要求把日志存储到数据库中，于是你快速定义了将日志存取到数据库的接口：</p>
<h3 id="5-logdboperateapi">5. LogDbOperateApi:</h3>
<pre><code>/**
 *
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:15
 */
public interface LogDbOperateApi {

    /**
     * 将日志保存到数据库
     * @param logModel
     */
    void createLog(LogModel logModel);

    /**
     * 更新数据库中的日志
     * @param logModel
     */
    void updateLog(LogModel logModel);

    /**
     * 删除数据库中的日志
     * @param logModel
     */
    void removeLog(LogModel logModel);

    /**
     * 获取数据库中的所有日志
     * @return
     */
    List&lt;LogModel&gt; getAllLog();

}
</code></pre>
<p>然后实现该接口：</p>
<h3 id="6-logdboperateapiimpl">6. LogDbOperateApiImpl：</h3>
<pre><code>/**
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:48
 */
public class LogDbOperateApiImpl implements LogDbOperateApi {

    @Override
    public void createLog(LogModel logModel) {
        System.out.println(&quot;成功插入日志:&quot; + logModel.toString() + &quot;到数据库中&quot;);
    }

    @Override
    public void updateLog(LogModel logModel) {
        System.out.println(&quot;成功更新数据库中日志:&quot; + logModel.toString());
    }

    @Override
    public void removeLog(LogModel logModel) {
        System.out.println(&quot;成功删除数据库中日志:&quot; + logModel.toString() + &quot;到数据库中&quot;);
    }

    @Override
    public List&lt;LogModel&gt; getAllLog() {
        System.out.println(&quot;已找到数据库中的所有日志&quot;);
        return null;
    }
}
</code></pre>
<h3 id="7-client">7. Client:</h3>
<pre><code>/**
 * 客户端
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:01
 */
public class Client {

    public static void main(String[] args) {

        LogModel logModel = new LogModel(&quot;0001&quot;, &quot;这是一条测试日志&quot;, &quot;JING&quot;, &quot;2018-08-03 09:44:35&quot;);
        LogDbOperateApi logDbOperateApi = new LogDbOperateApiImpl();
        logDbOperateApi.createLog(logModel);
    }
}
</code></pre>
<p>程序运行结果：</p>
<pre><code>成功插入日志:LogModel(logId=0001, logContent=这是一条测试日志, operateUser=JING, operateTime=2018-08-03 09:44:35)到数据库中
</code></pre>
<p><strong>到这里我们把 LogFileOperateApi 叫做第一版接口，LogDbOperateApi 叫做第二版接口</strong></p>
<p>好啦，所有的工作都做完了，终于可以开开心心的去撩妹啦</p>
<p>刚和妹子约好晚上共度良宵，leader 却又找到了你，因为他觉得还 是 把 日 志 存 储 到 文 件 中 比 较 好！！！</p>
<figure data-type="image" tabindex="7"><img src="http://imgblog.kuranado.com/womeishengqi.jpeg" alt="" loading="lazy"></figure>
<p>此刻内心想法：I have a line of MMP to tell you when the perfect timing comes to us. （╯' - ')╯︵ ┻━┻</p>
<p>工作还得继续，硬着头皮想到了这么几个解决办法：</p>
<ul>
<li>方法一：修改客户端调用，重新修改为调用第一版的接口</li>
<li>方法二：按照第二版的接口重新实现一个将日志存取到文件的实现类</li>
<li>方法三：不修改客户端调用，编写一个适配器，将第二版的接口适配到第一版的实现上，也就是使用适配器模式</li>
</ul>
<p>这三个方法哪个更可取呢？</p>
<ul>
<li>方法一：现在所有的业务都使用第二版接口，要更改为第一版接口的话，即要更改整个项目所有地方，费时费力</li>
<li>方法二：已经完成的功能何必再重做一遍呢</li>
<li>方法三：复用已有代码，省时省力</li>
</ul>
<h3 id="8-adapter">8. Adapter</h3>
<pre><code>/**
 *
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:59
 */
public class Adapter implements LogDbOperateApi {

    private LogFileOperateApi adaptee;

    public Adapter(LogFileOperateApi adaptee) {
        this.adaptee = adaptee;
    }

    @Override
    public void createLog(LogModel logModel) {
        List&lt;LogModel&gt; logModels = adaptee.readLogFile();
        logModels.add(logModel);
        adaptee.writeLogFile(logModels);
    }

    @Override
    public void updateLog(LogModel logModel) {
        List&lt;LogModel&gt; logModels = adaptee.readLogFile();
        for (int i = 0; i &lt; logModels.size(); i ++) {
            if (logModels.get(i).getLogId().equals(logModel.getLogId())) {
                logModels.set(i, logModel);
                break;
            }
        }
        adaptee.writeLogFile(logModels);
    }

    @Override
    public void removeLog(LogModel logModel) {
        List&lt;LogModel&gt; logModels = adaptee.readLogFile();
        logModels.remove(logModel);
    }

    @Override
    public List&lt;LogModel&gt; getAllLog() {
        return adaptee.readLogFile();
    }
}
</code></pre>
<h3 id="9-client">9. Client</h3>
<p>此时客户端只要做一点小修改即可：</p>
<pre><code>/**
 * 客户端
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:01
 */
public class Client {

    public static void main(String[] args) {

        LogModel logModel = new LogModel(&quot;0002&quot;, &quot;这是第二条测试日志&quot;, &quot;JING&quot;, &quot;2019-09-04 10:55:46&quot;);
        List&lt;LogModel&gt; logModels = new ArrayList&lt;&gt;();
        logModels.add(logModel);
        LogFileOperateApi logFileOperateApi = new LogFileOperateApiImpl(&quot;&quot;);
        LogDbOperateApi target = new Adapter(logFileOperateApi);
        target.createLog(logModel);
        System.out.println(target.getAllLog());
    }
}
</code></pre>
<pre><code>[LogModel(logId=0001, logContent=这是第一条测试日志, operateUser=JING, operateTime=2018-08-03 09:44:35), LogModel(logId=0002, logContent=这是第二条测试日志, operateUser=JING, operateTime=2019-09-04 10:55:46)]
</code></pre>
<p>整体结构：</p>
<figure data-type="image" tabindex="8"><img src="http://image.kuranado.com/blog/1601271526.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>第二版接口对应适配器中的 Target，第一版的实现扮演适配器中的 Adaptee。整个适配器模式中最关键的就是 Adapter，它需要实现第二版的接口，但在内部实现的时候通过对象组合的方式调用第一版已经实现的功能。</p>
<p>好啦，这回终于可以结束工作，时间也还早，可以放心的去陪妹子逛街啦！</p>
<h2 id="工作中的应用场景">工作中的应用场景</h2>
<ul>
<li>旧系统的改造和升级</li>
<li>系统维护</li>
</ul>
<h2 id="常见实现">常见实现</h2>
<h3 id="java-io">Java IO</h3>
<ul>
<li>java.io.InputStreamReader(InputStream)：通过适配器将字节流转换为我们需要的字符流</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=HKVZNuZwVhQ&amp;t=1280s&amp;list=PLkQ01vCRt9bUFnXOD66dabj2NM9Wbjhoc&amp;index=7">【GOF23设计模式】 适配器模式</a></li>
<li><a href="https://mrdear.cn/2018/03/14/experience/design_patterns--adapter/">学长博客</a></li>
<li>《研磨设计模式》</li>
</ul>
]]></content>
    </entry>
</feed>