<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://blog.kuranado.com</id>
    <title>KURANADO</title>
    <updated>2020-10-22T13:26:30.053Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://blog.kuranado.com"/>
    <link rel="self" href="http://blog.kuranado.com/atom.xml"/>
    <subtitle>笔记/博客</subtitle>
    <logo>http://blog.kuranado.com/images/avatar.png</logo>
    <icon>http://blog.kuranado.com/favicon.ico</icon>
    <rights>All rights reserved 2020, KURANADO</rights>
    <entry>
        <title type="html"><![CDATA[常见正则示例.md]]></title>
        <id>http://blog.kuranado.com/post/chang-jian-zheng-ze-shi-li-md/</id>
        <link href="http://blog.kuranado.com/post/chang-jian-zheng-ze-shi-li-md/">
        </link>
        <updated>2020-10-22T13:21:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="url">URL</h2>
<p>简单写法：</p>
<h3 id="表达式">表达式</h3>
<pre><code>https?:\/\/[-\w.]+(:\d+)?(\/([\w\/_.]*)?)?
</code></pre>
<ul>
<li><code>https?:\/\/</code> 匹配 <code>http://</code> 或 <code>https://</code></li>
<li><code>[-\w.]+</code> 匹配主机名</li>
<li><code>(:\d+)?</code> 匹配一个可选的端口号</li>
<li><code>(\/([\w\/_.]*)?)?</code> 匹配路径</li>
</ul>
<h3 id="测试文本">测试文本</h3>
<pre><code>https://www.forta.com/blog
https://www.forta.com:80/blog/index.do
http://www.forta.com
http://ben:password@www.forta.com/
http://localhost/index.php?username=1&amp;type=2
http://localhost:8500
</code></pre>
<h3 id="匹配结果">匹配结果</h3>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1603372932.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>虽然第四条和第五条匹配不正确，但该写法已经可以满足绝大部分使用场景了，如需要匹配的更精准，参考下面的写法：</p>
<p>复杂写法：</p>
<h3 id="表达式-2">表达式</h3>
<pre><code>https?:\/\/(\w*:\w*@)?[-\w.]+(:\d+)?(\/([\w\/_.]*(\?\S+)?)?)?
</code></pre>
<ul>
<li><code>(\w*:\w*@)?</code> 匹配 Url 中的用户名和密码</li>
<li><code>(\?\S+)?</code> 匹配查询参数</li>
</ul>
<h3 id="匹配结果-2">匹配结果</h3>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1603372958.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>这种写法虽然匹配的更精准，但性能上也会大打折扣</p>
<hr>
<h2 id="ip-地址">IP 地址</h2>
<p>IP 地址范围为 0.0.0.0 ~ 255.255.255.255，总结如下：</p>
<ol>
<li>任意的 1 位或 2 位数字</li>
<li>任意的以 1 开头的 3 位数字</li>
<li>任意的以 2 开头，第二位数字在 0 到 4 之间的 3 位数字</li>
<li>任意的以 25 开头，第三位数字在 0 到 5 之间的 3 位数字<br>
很容易写出如下正则：</li>
</ol>
<pre><code>(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))
</code></pre>
<p>但这个正则却是错误的，如 IP 地址：<code>12.159.46.200</code> 的匹配结果如下图，最后的 0 无法被匹配，这是因为 <code>20</code> 已经被子表达式 <code>(\d{1, 2})</code> 匹配，并没有被 <code>(25[0-5])</code> 匹配<br>
<img src="http://image.kuranado.com/blog/1603372978.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
正确的写法如下：</p>
<pre><code>((((25[0-5])\d)|(2[0-4]\d)|(1\d{2})|(\d{1,2}))\.){3}(((25[0-5])\d)|(2[0-4]\d)|(1\d{2})|(\d{1,2}))
</code></pre>
<p>匹配结果：<br>
<img src="http://image.kuranado.com/blog/1603372987.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></p>
<hr>
<h2 id="邮箱地址">邮箱地址</h2>
<h3 id="表达式-3">表达式</h3>
<pre><code>(\w+\.)*\w+@(\w+\.)+[A-z]+
</code></pre>
<h3 id="测试文本-2">测试文本</h3>
<pre><code>jing@163.com
jing.xin@mail.kuranado.com
</code></pre>
<h3 id="匹配结果-3">匹配结果</h3>
<figure data-type="image" tabindex="3"><img src="http://image.kuranado.com/blog/1603372998.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<hr>
<h2 id="身份证号">身份证号</h2>
<h3 id="表达式-4">表达式</h3>
<pre><code>^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{4}$
</code></pre>
<h3 id="测试文本-3">测试文本</h3>
<pre><code>322225199809020429
</code></pre>
<h2 id="手机号">手机号</h2>
<h3 id="表达式-5">表达式</h3>
<pre><code>^1(3|4|5|6|7|8|9)\d{9}$
</code></pre>
<h3 id="测试文本-4">测试文本</h3>
<pre><code>18855465629
</code></pre>
<h2 id="html-注释">HTML 注释</h2>
<h3 id="表达式-6">表达式</h3>
<pre><code>&lt;!-{2,}.*?-{2,}&gt;
</code></pre>
<h3 id="测试文本-5">测试文本</h3>
<pre><code>&lt;!-- comment --&gt;
&lt;!---- -- comment -- -----&gt;
</code></pre>
<h3 id="匹配结果-4">匹配结果</h3>
<figure data-type="image" tabindex="4"><img src="http://image.kuranado.com/blog/1603373014.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<hr>
<h2 id="java-单行注释">Java 单行注释</h2>
<h3 id="表达式-7">表达式</h3>
<pre><code>\/\/.*
</code></pre>
<h3 id="测试文本-6">测试文本</h3>
<pre><code>// comment
</code></pre>
<h3 id="匹配结果-5">匹配结果</h3>
<figure data-type="image" tabindex="5"><img src="http://image.kuranado.com/blog/1603373023.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<hr>
<h2 id="java-多行注释">Java 多行注释</h2>
<h3 id="表达式-8">表达式</h3>
<pre><code>/\*[\s\S]*?\*/
</code></pre>
<h3 id="测试文本-7">测试文本</h3>
<pre><code>public class UpgradeEntity {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database columnT_UPGRADE_TASK.ID
     *
     * @mbggenerated Wed Oct 14 14:39:23 CST 2020
     */
    private long id;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database columnT_UPGRADE_TASK.UPGRADE_NAMES
     *
     * @mbggenerated Wed Oct 14 14:39:23 CST 2020
     */
    private String upgradeNames;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database columnT_UPGRADE_TASK.UPGRADE_DESCRIPTION
     *
     * @mbggenerated Wed Oct 14 14:39:23 CST 2020
     */
    private String upgradeDescription;
</code></pre>
<h3 id="匹配结果-6">匹配结果</h3>
<figure data-type="image" tabindex="6"><img src="http://image.kuranado.com/blog/1603373053.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="参考">参考</h2>
<ul>
<li>《正则表达式必知必会修订版》</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS3 过渡.md]]></title>
        <id>http://blog.kuranado.com/post/css3-guo-du-md/</id>
        <link href="http://blog.kuranado.com/post/css3-guo-du-md/">
        </link>
        <updated>2020-10-19T11:06:04.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>transition: 要过渡的属性1 花费时间1 运动曲线1 何时开始1, 要过渡的属性2 花费时间2 运动曲线2 何时开始2; 谁想要过渡效果，就为谁设置 trasition 属性
<ul>
<li>要过渡的属性 即想要变化的 CSS 属性，如 width、heigth、background-color、padding、margin、border 都可以，如果想要所有的属性都有过渡效果，则将该值设置为 all</li>
<li>花费时间 过渡需要花费的时间，单位 s，如 .5s（单位 s 不可省略）</li>
<li>运动曲线 可省略，默认为 ease<br>
<img src="http://image.kuranado.com/blog/1603105590.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></li>
<li>何时开始 可省略，默认为 0s，表示立即触发。单位 s（单位 s 不可省略）</li>
</ul>
</li>
</ul>
<pre><code>div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    /* 口诀：过渡写到本身上，谁做动画给谁加 */
    transition: width 1s ease .5s;
}
div:hover {
    width: 200px;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<p>当鼠标悬浮在 div 上时，0.5s 后，该 div 的宽度会在 1s 内由原来的 100px 过渡到 200px</p>
<pre><code>div {
    width: 100px;
    height: 100px;
    background-color: skyblue;
    transition: width 1s ease .5s, heigth 1s ease .5s;
}
div:hover {
    width: 200px;
    height: 200px;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<p>当鼠标悬浮在 div 上时，0.5s 后，该 div 的宽度会在 1s 内由原来的 100px 过渡到 200px，同时高度也会在 1s 内由原来的 100px 过渡到 200px</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode - 836. 矩形重叠]]></title>
        <id>http://blog.kuranado.com/post/leetcode-836-ju-xing-chong-die/</id>
        <link href="http://blog.kuranado.com/post/leetcode-836-ju-xing-chong-die/">
        </link>
        <updated>2020-10-15T10:58:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="836-矩形重叠"><a href="https://leetcode-cn.com/problems/rectangle-overlap/">836. 矩形重叠</a> 2020年3月18日星期三</h2>
<p>月度打卡题<br>
刚开始在平板上画了画，发现重叠的情况有很多种，于是利用<strong>逆向思维</strong>，找出所有不重叠的情况，如下图，看起来比较复杂，但仔细一看，下图描述的情况其实非常简单，即如果不想交，则：矩形 r2 要么在矩形 r1 的左边，下面要么在矩形 r1 的右边，要么在矩形 r1 的上边，要么在矩形 r1 的下边，可以写出如下表达式：</p>
<p>r2.x<sub>2</sub> &lt; r1.x<sub>1</sub> || r2.x<sub>1</sub> &gt; r1.x<sub>2</sub> || r2.y<sub>1</sub> &gt; r1.y<sub>2</sub> || r2.y<sub>2</sub> &lt; r1.y<sub>1</sub></p>
<p>不重叠则是对上述表达式取反，大学学数字逻辑时，都知道取反后表达式为：</p>
<p>r2.x<sub>2</sub> &gt;= r1.x<sub>1</sub> || r2.x<sub>1</sub> &gt;= r1.x<sub>2</sub> || r2.y<sub>1</sub> &gt;= r1.y<sub>2</sub> || r2.y<sub>2</sub> &lt;= r1.y<sub>1</sub></p>
<p>由于题目要求只是边重叠并不算做矩形重叠，去掉等于号即可</p>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1602759551.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h3 id="最终代码-0ms">最终代码 0ms</h3>
<pre><code class="language-java">class Solution {
    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {
        if (rec2[2] &gt; rec1[0] &amp;&amp; rec2[0] &lt; rec1[2] &amp;&amp; rec2[1] &lt; rec1[3] &amp;&amp; rec2[3] &gt; rec1[1]) {
            return true;
        }
        return false;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS3 盒子模型.md]]></title>
        <id>http://blog.kuranado.com/post/css3-he-zi-mo-xing-md/</id>
        <link href="http://blog.kuranado.com/post/css3-he-zi-mo-xing-md/">
        </link>
        <updated>2020-10-14T08:26:55.000Z</updated>
        <content type="html"><![CDATA[<p>CSS3 通过 box-sizing 属性指定盒子模型</p>
<ul>
<li>box-sizing: content-box 盒子宽为 width + padding + border，高位 height + padding + border + magin 也就是默认的盒子模型。PC 端如果需要完全兼容，就用该传统模式</li>
</ul>
<pre><code>div {
    /* 盒子会被 padding 和 border 撑大 */
    box-sizing: content-box;
    width: 200px;
    height: 200px;
    background-color: skyblue;
    padding: 20px;
    border: 20px solid pink;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1602664045.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<ul>
<li>box-sizing: border-box <strong>重点</strong>，盒子宽就是 width（前提是设置的 padding 和 brorder 不会超过 width），高就是 height（前提是设置的 padding 和 brorder 不会超过 height）。PC 端如果不要求兼容，则使用该盒子模型；因为移动端浏览器都是比较新的内核，所以移动端全部使用该盒子模型</li>
</ul>
<pre><code>div {
    /* 盒子不会被 padding 和 border 撑大 */
    box-sizing: border-box;
    width: 200px;
    height: 200px;
    background-color: skyblue;
    padding: 20px;
    border: 20px solid pink;
}
&lt;div&gt;&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1602664056.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS3 选择器.md]]></title>
        <id>http://blog.kuranado.com/post/css3-xuan-ze-qi-md/</id>
        <link href="http://blog.kuranado.com/post/css3-xuan-ze-qi-md/">
        </link>
        <updated>2020-10-13T11:16:58.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="属性选择器">属性选择器</h2>
<pre><code>/* 选择所有拥有 type 属性的元素 */
input[type]
/* 选择所有拥有 type 属性，且该属性值为 password 的元素 */
input[type=&quot;password&quot;]
/* 选择所有以具有 class 属性，且属性值以 icon 开头的 div 标签 */
div[class^=&quot;icon&quot;]
/* 选择所有以具有 class 属性，且属性值以 icon 结尾的 div 标签 */
div[class$=&quot;icon&quot;]
/* 选择所有以具有 class 属性，且属性值中包含 icon 的 div 标签 */
div[class*=&quot;icon&quot;]
</code></pre>
<h2 id="结构伪类选择器">结构伪类选择器</h2>
<pre><code>/* 选择 ul 下的第一个子元素 */
ul :first-child
/* 选择 ul 下的第一个子元素，且该子元素必须是 li */
ul li:first-child
/* 选择 ul 下的第一个子元素，且该子元素必须是 li */
ul li:last-child
/* 选择 ul 下的第 3 （n 从 1 开始）个子元素，且该子元素必须是 li */
ul li:nth-child(3)
/* 选择 ul 下所有偶数位子元素（2、4、6...），且该子元素必须是 li */
ul li:nth-child(even)
/* 选择 ul 下所有偶数位子元素（1、3、5...），且该子元素必须是 li */
ul li:nth-child(odd)
/* 选择 ul 下所有 li 子元素（只能是字母 n，不能是其他字母），n 从 0 开始，每匹配一个元素后，n 自增 1（刚开始为 0，一个元素也匹配不到，自增为 1 后，菜开始匹配到元素） */
ul li:nth-child(n)
/* 选择 ul 下所有偶数位子元素（2、4、6...），且该子元素必须是 li（2 * 0、2 * 1、2 * 2、2 * 3...）*/
ul li:nth-child(2n)
/* 选择 ul 下所有奇数位子元素（1、3、5...），且该子元素必须是 li（2 * 0 + 1、2 * 1 + 1、2 * 2 + 1...）*/
ul li:nth-child(2n)
/* 选择 ul 下所有 5 的倍数位子元素（5、10、15...），且该子元素必须是 li */
ul li:nth-child(5n)
/* 选择 ul 下从第 5 个开始（包含第 5 个）后面的子元素（5、6、7...），且该子元素必须是 li（0 + 5、1 + 5、2 + 5） */
ul li:nth-child(n+5)
/* 选择 ul 下前 5 （包含第 5 个）子元素（1、2、3、4、5），且该子元素必须是 li（-0 + 5、-1 + 5、-2 + 5、-3 + 5、-4 + 5）*/
ul li:nth-child(-n+5)
</code></pre>
<p>nth-child() 和 nth-of-type() 用法完全相同，都可以在括号中填数字，关键字（even、odd）和公式（如 n、2n、5n 等等），但 nth-child 和 nth-of-type 有如下区别：<br>
nth-child()：</p>
<pre><code>/* 没有选中任何元素，因为 nth-child 会先把所有的盒子都排列成序号，然后再看元素是否匹配，这里第一个 p 标签序号为 1，第一个 div 标签选好为 2，第二个 div 标签序号为 3，所以 nth-child(1) 先找到第一个 1 标签，然后校验该标签是否是 div 标签，因为第一个标签是 p 而不是 div，所以没有任何效果 */
section div:nth-child(1) {
    background-color: red;
}
&lt;section&gt;
    &lt;p&gt;光头强&lt;/p&gt;
    &lt;div&gt;熊大&lt;/div&gt;
    &lt;div&gt;熊二&lt;/div&gt;
&lt;/section&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1602587848.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>nth-of-type()：</p>
<pre><code>/* 成功选中第一个 div，因为 nth-of-type 会对指定的盒子进行编号，这里制定了盒子必须是 div */
section div:nth-of-type(1) {
    background-color: red;
}
&lt;section&gt;
    &lt;p&gt;光头强&lt;/p&gt;
    &lt;div&gt;熊大&lt;/div&gt;
    &lt;div&gt;熊二&lt;/div&gt;
&lt;/section&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1602587861.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="伪元素选择器">伪元素选择器</h2>
<p>帮助我们使用 CSS 创建新标签，而不需要显示去写 HTML 标签，从而简化 HTML 结构</p>
<table>
<thead>
<tr>
<th>选择符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>::before</td>
<td>在父元素内容的前面创建元素</td>
</tr>
<tr>
<td>::after</td>
<td>在父元素内容的后面创建元素</td>
</tr>
</tbody>
</table>
<p>注意：</p>
<ul>
<li>::before 和 ::after 创建的伪元素属于行内元素（根据需要将其转换为块级元素或行内块元素）</li>
<li>新创建的这个元素在 DOM 树中是找不到的，所以称之为伪元素</li>
<li>before 和 after <strong>必须有 content 属性</strong>，即便内容为空</li>
</ul>
<pre><code>div {
    width: 200px;
    height: 100px;
    background-color: skyblue;
}
div::before {
    content: &quot;我&quot;;
}
div::after {
    content: &quot;小猪佩奇&quot;;
}
&lt;div&gt;
    是
&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="3"><img src="http://image.kuranado.com/blog/1602587871.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 浏览器私有前缀.md]]></title>
        <id>http://blog.kuranado.com/post/css-liu-lan-qi-si-you-qian-zhui-md/</id>
        <link href="http://blog.kuranado.com/post/css-liu-lan-qi-si-you-qian-zhui-md/">
        </link>
        <updated>2020-10-11T03:33:57.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<blockquote>
<p>浏览器私有前缀是为了兼容老版本的浏览器，如果 CSS 代码只运行在较新版本的浏览器上则无需添加</p>
</blockquote>
<h2 id="私有前缀">私有前缀</h2>
<ul>
<li><code>-moz-</code> Firefox 的私有前缀</li>
<li><code>-ms-</code> IE 的私有前缀</li>
<li><code>-webkit-</code> Safari 和 Chrome 的私有前缀</li>
<li><code>-o-</code> Opera 的私有前缀</li>
</ul>
<p>国产浏览器基本也全是使用上面四种前缀中的一种</p>
<h2 id="提倡写法">提倡写法</h2>
<p>先写私有前缀，再写不带前缀，例如：</p>
<pre><code>-moz-border-radius: 10px;
-webkit-border-radius: 10px;
-o-border-radius: 10px;
border-radius: 10px;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS margin 负值的巧妙应用.md]]></title>
        <id>http://blog.kuranado.com/post/css-margin-fu-zhi-de-qiao-miao-ying-yong-md/</id>
        <link href="http://blog.kuranado.com/post/css-margin-fu-zhi-de-qiao-miao-ying-yong-md/">
        </link>
        <updated>2020-10-10T11:21:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="margin-负值的巧妙运用">margin 负值的巧妙运用</h2>
<p>先看如下代码：</p>
<pre><code>ul li {
    float: left;
    list-style: none;
    width: 100px;
    height: 100px;
    border: 1px solid skyblue;
}
&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1602328932.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>可以看到相邻 li 之间的 border 左右贴在一块，像素数为 2，而我们一般不需要这种效果，所以向左浮动时，可以让每个 li margin-left = -1，即每个 li 向左多走一个像素，这样就能让相邻的 border 上下重叠：</p>
<pre><code>ul li {
    float: left;
    margin-left: -1px;
    list-style: none;
    width: 100px;
    height: 100px;
    border: 1px solid skyblue;
}
&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1602328945.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>效果是实现了，如果现在要求鼠标悬浮在某个 li 上面时，将其边框改成红色，相信大家很容易写出如下代码：</p>
<pre><code>ul li:hover {
    border: 1px solid red;
}
</code></pre>
<p>鼠标悬浮在最后一个 li 上，它的四个边框确实都变成了红色，但是鼠标移到前三个 li 上时，边框却是如下效果：</p>
<figure data-type="image" tabindex="3"><img src="http://image.kuranado.com/blog/1602329410.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>这就是因为 margin-left: -1px; 导致左边 li 的右边框被右边 li 的左边框给压住了<br>
为了解决这个问题，可以在鼠标悬浮时为 li 添加一个 relative 定位，因为 relative 定位占有原先的位置（不脱标）且会压住浮动的盒子：</p>
<pre><code>ul li:hover {
    position: relative;
    border: 1px solid red;
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="http://image.kuranado.com/blog/1602328967.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>那如果每个 li 中上面都有一些元素，比如按钮，就需要每个 li 都是相对定位，li 上面的元素使用绝对定位，这时候在鼠标悬浮到某个 li 时，只要给当前鼠标悬浮的 li 设置一个更大的 z-index 就可以正常压住其他 li 的边框了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode - 1160. 拼写单词]]></title>
        <id>http://blog.kuranado.com/post/leetcode-1160-pin-xie-dan-ci/</id>
        <link href="http://blog.kuranado.com/post/leetcode-1160-pin-xie-dan-ci/">
        </link>
        <updated>2020-10-09T10:52:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1160-拼写单词"><a href="https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters/">1160. 拼写单词</a> 2020年3月17日星期二</h2>
<p>月度打卡题<br>
首先能想到的肯定是要对 chars 打表</p>
<h3 id="解法一-46-ms">解法一 46 ms</h3>
<p>在刚看到这题时，白天是想到了要用数组的，晚上真正回家做的时候竟全然忘记数组，使用了 Map，不过使用数组还是 Map 都大差不差，这一题的主要解题差距还是在于遍历问题，解法一是多遍历了一层的方法，比较耗时</p>
<pre><code class="language-java">class Solution {
    public int countCharacters(String[] words, String chars) {
        Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(26);
        for (int i = 0; i &lt; chars.length(); i++) {
            String s = chars.substring(i, i + 1);
            Integer sum = map.get(s);
            if (sum == null) {
                sum = 1;
            } else {
                sum++;
            }
            map.put(s, sum);
        }
        int result = 0;
        for (int i = 0; i &lt; words.length; i++) {
            Map&lt;String, Integer&gt; mapCopy = new HashMap&lt;&gt;(map);
            String word = words[i];
            boolean flag = true;
            for (int j = 0; j &lt; word.length(); j++) {
                String s = word.substring(j, j + 1);
                Integer sum = mapCopy.get(s);
                if (sum == null || sum == 0) {
                    flag = false;
                    break;
                } else {
                    sum--;
                    mapCopy.put(s, sum);
                }
            }
            if (flag) {
                result += word.length();
            }
        }
        return result;
    }
}
</code></pre>
<h3 id="时间复杂度">时间复杂度</h3>
<p>O(n<sup>2</sup>)</p>
<h3 id="空间复杂度">空间复杂度</h3>
<p>O(n)</p>
<h3 id="解法二-6-ms">解法二 6 ms</h3>
<p>相较解法一，少了一层遍历，</p>
<pre><code class="language-java">class Solution {
    public int countCharacters(String[] words, String chars) {
        int[] table = new int[26];
        for (int i = 0; i &lt; chars.length(); i++) {
            table[chars.charAt(i) - 'a'] ++;
        }
        int result = 0;
        for (int i = 0; i &lt; words.length; i++) {
            String word = words[i];
            boolean flag = true;
            int[] tmp = new int[26];
            for (int j = 0; j &lt; word.length(); j++) {
                int index = word.charAt(j) - 'a';
                if (tmp[index] == table[index]) {
                    flag = false;
                    break;
                }
                tmp[index]++;
            }
            if (flag) {
                result += word.length();
            }
        }
        return result;
    }
}
</code></pre>
<h4 id="时间复杂度-2">时间复杂度</h4>
<p>O(n)</p>
<h4 id="空间复杂度-2">空间复杂度</h4>
<p>O(n)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 文本溢出显示省略号.md]]></title>
        <id>http://blog.kuranado.com/post/css-wen-ben-yi-chu-xian-shi-sheng-lue-hao-md/</id>
        <link href="http://blog.kuranado.com/post/css-wen-ben-yi-chu-xian-shi-sheng-lue-hao-md/">
        </link>
        <updated>2020-10-09T10:48:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="单行文本溢出显示省略号">单行文本溢出显示省略号</h2>
<p>单行文本溢出显示省略号必须满足如下三个条件：</p>
<ol>
<li>先强制一行内显示文本，禁止自动换行</li>
<li>超出部分隐藏</li>
<li>使用省略号代替隐藏的超出部分</li>
</ol>
<p>默认自动换行：</p>
<pre><code>div {
    width: 100px;
    height: 50px;
    background-color: skyblue;
}
&lt;div&gt;
    单行文本溢出显示省略号
&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1602240539.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<pre><code>div {
    width: 100px;
    height: 50px;
    /* 1. 禁止自动换行，white-space 默认值为 normal，表示自动换行 */
    white-space: nowrap;
    /* 2. 隐藏溢出部分 */
    overflow: hidden;
    /* 3.  文字溢出时，使用省略号代替显示隐藏的溢出部分 */
    text-overflow: ellipsis;
    background-color: skyblue;
}
&lt;div&gt;
    单行文本溢出显示省略号
&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1602240551.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="多行文本溢出显示省略号">多行文本溢出显示省略号</h2>
<p>如下方法有较大的兼容性问题，适合于 WebKit 内核浏览器或移动端浏览器（移动端浏览器大部分是 WebKit 内核）</p>
<pre><code>div {
    width: 100px;
    height: 65px;
    /* 1. 隐藏溢出部分 */
    overflow: hidden;
    /* 2. 文字溢出时，使用省略号代替显示隐藏的超出部分 */
    text-overflow: ellipsis;
    background-color: skyblue;
    /* 弹性伸缩盒子模型显示 */
    display: -webkit-box;
    /* 限制在一个块内元素显示文本的行数，想让第几行末尾显示省略号，该属性值就等于几 */
    -webkit-line-clamp: 3;
    /* 设置或检索伸缩和对象的子元素的排列方式 */
    -webkit-box-orient: vertical;
}
&lt;div&gt;
    多行文本溢出显示省略号，不需要记代码，用时直接复制即可
&lt;/div&gt;
</code></pre>
<figure data-type="image" tabindex="3"><img src="http://image.kuranado.com/blog/1602240571.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[装饰器模式.md]]></title>
        <id>http://blog.kuranado.com/post/zhuang-shi-qi-mo-shi/</id>
        <link href="http://blog.kuranado.com/post/zhuang-shi-qi-mo-shi/">
        </link>
        <updated>2020-10-08T03:23:26.000Z</updated>
        <content type="html"><![CDATA[<p>装饰器模式也称为包装器模式，往往以 Decorator 或 Wrapper 结尾的类都是使用的装饰器模式</p>
<h2 id="什么是装饰器模式">什么是装饰器模式？</h2>
<blockquote>
<p>装饰器模式又称装饰模式、包装模式。用于动态的给一个对象添加一些额外的职责。就增加功能来说，装饰器模式比生成子类更为灵活</p>
</blockquote>
<h2 id="装饰模式结构">装饰模式结构</h2>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1602130112.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<ul>
<li>Component 组件对象的接口，可以给这些对象动态的添加职责</li>
<li>ConcreteComponent 具体的组件对象，实现组件对象接口，通常就是被装饰器装饰的原始对象，可以给这个对象添加职责</li>
<li>Decorator 所有装饰器的抽象父类，需要定义一个与组件接口一致的接口，并持有一个 Component 对象，也就是持有一个被装饰的对象（注意这个被装饰的对象不一定是最原始的那个对象了，有可能是被其它装饰器装饰过后的对象）</li>
<li>ConcreateDecorator 实际的装饰器对象，实现具体要向被装饰对象添加的功能</li>
</ul>
<h2 id="装饰器模式实现简单示例">装饰器模式实现简单示例</h2>
<h3 id="1-定义组件接口">1. 定义组件接口</h3>
<pre><code class="language-java">import lombok.Data;

/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 15:59
 */
@Data
public abstract class BasePerson {

    private String name;

    public abstract String show();
}
</code></pre>
<h3 id="2-定义具体组件类该组件类的对象将被装饰器装饰">2. 定义具体组件类，该组件类的对象将被装饰器装饰</h3>
<p>所有人开始都是一丝不挂</p>
<pre><code class="language-java">/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 16:01
 */
public class ConcretPerson extends BasePerson {

    @Override
    public String show() {
        return this.getName() + &quot;裸体&quot;;
    }
}
</code></pre>
<h3 id="3-定义装饰器接口需要和被装饰的对象实现同样的接口">3. 定义装饰器接口，需要和被装饰的对象实现同样的接口</h3>
<pre><code class="language-java">/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 16:01
 */
public abstract class BaseDecorator extends BasePerson {

    private BasePerson person;

    public BaseDecorator(BasePerson person) {
        this.person = person;
    }

    @Override
    public String show() {
        return person.show();
    }
}
</code></pre>
<h3 id="4-定义具体装饰器类">4. 定义具体装饰器类</h3>
<h4 id="穿内裤的装饰器">穿内裤的装饰器</h4>
<pre><code class="language-java">/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 16:14
 */
public class PantsDecorator extends BaseDecorator {

    public PantsDecorator(BasePerson person) {
        super(person);
    }

    @Override
    public String show() {
        return String.join(&quot; -&gt; &quot;, super.show(), &quot;穿上了红胖次&quot;);
    }
}
</code></pre>
<h4 id="穿裤子的装饰器">穿裤子的装饰器</h4>
<pre><code class="language-java">/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 16:21
 */
public class TrousersDecorator extends BaseDecorator {

    public TrousersDecorator(BasePerson person) {
        super(person);
    }

    @Override
    public String show() {
        return String.join(&quot; -&gt; &quot;, super.show(), &quot;穿上了裤子&quot;);
    }
}
</code></pre>
<h4 id="穿-t-恤的装饰器">穿 T 恤的装饰器</h4>
<pre><code class="language-java">/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 16:23
 */
public class TShirtDecorator extends BaseDecorator {

    public TShirtDecorator(BasePerson person) {
        super(person);
    }

    @Override
    public String show() {
        return String.join(&quot; -&gt; &quot;, super.show(), &quot;穿上了 T 恤&quot;);
    }
}
</code></pre>
<h4 id="梳头发的装饰器">梳头发的装饰器</h4>
<pre><code class="language-java">/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 16:25
 */
public class HairstyleDecorator extends BaseDecorator {

    public HairstyleDecorator(BasePerson person) {
        super(person);
    }

    @Override
    public String show() {
        return String.join(&quot; -&gt; &quot;, super.show(), &quot;梳了一个性感的发型&quot;);
    }
}
</code></pre>
<h3 id="5-客户端调用">5. 客户端调用</h3>
<p>客户端首先创建被装饰的组件对象，然后创建一种或多种装饰器对象，然后把装饰器对象组合起来：</p>
<pre><code class="language-java">/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 16:26
 */
public class Client {

    public static void main(String[] args) {
        
        // 小明家很穷，出门只能穿得起一条内裤
        PantsDecorator decorator = new PantsDecorator(new ConcretPerson(&quot;小明&quot;));
        System.out.println(decorator.show());

        // 康康不仅穿了内裤，还穿了裤子和 T 恤
        TShirtDecorator decorator2 = new TShirtDecorator(new TrousersDecorator(new PantsDecorator(new ConcretPerson(
            &quot;康康&quot;))));
        System.out.println(decorator2.show());

        // 西瓜个头比较小，只需要穿条内裤，然后梳理下发型就可以了
        HairstyleDecorator decorator3 = new HairstyleDecorator(new PantsDecorator(new ConcretPerson(&quot;西瓜&quot;)));
        System.out.println(decorator3.show());
    }
}
</code></pre>
<p>输出结果如下：</p>
<pre><code>小明裸体 -&gt; 穿上了红胖次
康康裸体 -&gt; 穿上了红胖次 -&gt; 穿上了裤子 -&gt; 穿上了 T 恤
西瓜裸体 -&gt; 穿上了红胖次 -&gt; 梳了一个性感的发型
</code></pre>
<p>结构如下：</p>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1602130129.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="常见装饰器模式实现">常见装饰器模式实现</h2>
<h3 id="io-流">IO 流</h3>
<p>结构如下：</p>
<figure data-type="image" tabindex="3"><img src="http://image.kuranado.com/blog/1602130138.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>各个类在装饰器中扮演的角色如下：</p>
<ul>
<li><code>InputStream</code> 对应 <code>Component</code></li>
<li><code>FileInputStream</code> 对应 <code>ConcretComponent</code></li>
<li><code>FilterInputStream</code> 对应 <code>Decorator</code></li>
<li><code>DataInputStream</code>、<code>BufferedInputStream</code>、<code>PushbackInputStream</code> 均是具体的装饰器实现</li>
</ul>
<p>示例代码：</p>
<pre><code class="language-java">/**
 * @Author: Xinling Jing
 * @Date: 2019-07-21 18:21
 */
public class IOTest {

    public static void main(String[] args) {

        DataInputStream dataInputStream = null;
        try {
            dataInputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(&quot;/Users/jing/Desktop&quot; +
                &quot;/IOTest.txt&quot;)));
            byte[] buff = new byte[dataInputStream.available()];
            dataInputStream.read(buff);
            System.out.println(new String(buff));
        } catch (IOException e) {
             e.printStackTrace();
        } finally {
            try {
                if (dataInputStream != null) {
                    dataInputStream.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<h2 id="总结">总结</h2>
<p>下面开始装饰器模式的技术总结：</p>
<ul>
<li>装饰器模式的本质是<strong>动态组合</strong></li>
<li>装饰器用来装饰组件，装饰器一定要实现和组件类一致的接口，保证它们是同一个类型，并且具有同一个外观，这样组合完成的装饰才能递归调用下去</li>
<li>各个装饰器之间最好是完全独立的功能，不要有依赖，以在装饰组合的时候，可以随心所欲，不受先后顺序的限制，也就是说先装饰谁和后装饰谁都应该是一样的，否则会大大降低装饰器组合的灵活性。虽然在实际应用中，可以根据具体的功能要求而有顺序的限制，但应该尽量避免这种情况</li>
</ul>
<h3 id="优点">优点</h3>
<ul>
<li>装饰模式比继承更灵活。继承是静态的，一旦继承，所有子类都有一样的功能，然而有时候有些子类可能并不需要这些继承而来的功能；装饰模式把功能分离到多个装饰器中，然后通过对象组合的方式，在运行时动态的组合功能，每个被装饰的对象最终拥有哪些功能，是由运行时期动态组合的功能来决定的</li>
<li>功能容易复用。一个对象可以使用多个装饰器，一个装饰器也可以用来装饰多个对象，从而实现功能复用</li>
</ul>
<h3 id="缺点">缺点</h3>
<ul>
<li>会产生很多细粒度的对象。装饰模式是把一系列复杂的功能分散到多个装饰器当中，一般每个装饰器只实现一个功能，这样会产生很多细粒度的对象，而且功能越复杂，需要的细粒度对象也就越多，大量小对象占据内存，一定程度上会影响性能</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>《研磨设计模式》</li>
</ul>
<h2 id="源码">源码</h2>
<ul>
<li><a href="https://github.com/KURANADO2/DesignPatterns">https://github.com/KURANADO2/DesignPatterns</a></li>
</ul>
]]></content>
    </entry>
</feed>