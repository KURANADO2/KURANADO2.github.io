<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://blog.kuranado.com</id>
    <title>KURANADO</title>
    <updated>2020-10-01T02:01:35.645Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://blog.kuranado.com"/>
    <link rel="self" href="http://blog.kuranado.com/atom.xml"/>
    <subtitle>笔记/博客</subtitle>
    <logo>http://blog.kuranado.com/images/avatar.png</logo>
    <icon>http://blog.kuranado.com/favicon.ico</icon>
    <rights>All rights reserved 2020, KURANADO</rights>
    <entry>
        <title type="html"><![CDATA[电影 & 电视剧.md]]></title>
        <id>http://blog.kuranado.com/post/dian-ying-and-dian-shi-ju-md/</id>
        <link href="http://blog.kuranado.com/post/dian-ying-and-dian-shi-ju-md/">
        </link>
        <updated>2020-10-01T01:09:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="已看">已看</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-401143"><label class="task-list-item-label" for="task-item-401143"> Rango 蓝戈</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8424138"><label class="task-list-item-label" for="task-item-8424138"> 超能陆战队</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4007902"><label class="task-list-item-label" for="task-item-4007902"> 忠犬八公的故事</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6653004"><label class="task-list-item-label" for="task-item-6653004"> 肖申克的救赎</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3563630"><label class="task-list-item-label" for="task-item-3563630"> 魔女宅急变</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3523261"><label class="task-list-item-label" for="task-item-3523261"> 致命魔术</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-282682"><label class="task-list-item-label" for="task-item-282682"> 机器人瓦利</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3070396"><label class="task-list-item-label" for="task-item-3070396"> 超级大坏蛋</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7115612"><label class="task-list-item-label" for="task-item-7115612"> 功夫熊猫 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6689304"><label class="task-list-item-label" for="task-item-6689304"> 龙猫</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1944780"><label class="task-list-item-label" for="task-item-1944780"> 冰雪奇缘 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3994707"><label class="task-list-item-label" for="task-item-3994707"> 冰雪奇缘-生日惊喜</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9684739"><label class="task-list-item-label" for="task-item-9684739"> 恐怖游轮</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7111760"><label class="task-list-item-label" for="task-item-7111760"> 天空之城</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7768694"><label class="task-list-item-label" for="task-item-7768694"> 千与千寻</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3744013"><label class="task-list-item-label" for="task-item-3744013"> 哈尔的移动城堡</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-50086"><label class="task-list-item-label" for="task-item-50086"> 杀死比尔 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9028573"><label class="task-list-item-label" for="task-item-9028573"> 速度与激情 3、4、5、6、7、8</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9085452"><label class="task-list-item-label" for="task-item-9085452"> 天将雄师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-679773"><label class="task-list-item-label" for="task-item-679773"> 神偷奶爸 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8295393"><label class="task-list-item-label" for="task-item-8295393"> 小黄人大冒险</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9242506"><label class="task-list-item-label" for="task-item-9242506"> 钢铁侠</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6853643"><label class="task-list-item-label" for="task-item-6853643"> 海扁王 1</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7810640"><label class="task-list-item-label" for="task-item-7810640"> 东成西就</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1354590"><label class="task-list-item-label" for="task-item-1354590"> 起风了</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1262384"><label class="task-list-item-label" for="task-item-1262384"> 婚纱</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8493761"><label class="task-list-item-label" for="task-item-8493761"> 天降美食 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3556230"><label class="task-list-item-label" for="task-item-3556230"> 指环王-护戒使者</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1949666"><label class="task-list-item-label" for="task-item-1949666"> 指环王-双塔奇兵</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4587392"><label class="task-list-item-label" for="task-item-4587392"> 指环王-王者归来</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8623455"><label class="task-list-item-label" for="task-item-8623455"> 霍比特人-意外之旅</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5126645"><label class="task-list-item-label" for="task-item-5126645"> 霍比特人-史矛革荒漠</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2169859"><label class="task-list-item-label" for="task-item-2169859"> 霍比特人-五军之战</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3711724"><label class="task-list-item-label" for="task-item-3711724"> 头脑特工队</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8434656"><label class="task-list-item-label" for="task-item-8434656"> 源代码</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9676480"><label class="task-list-item-label" for="task-item-9676480"> 记忆碎片</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8127561"><label class="task-list-item-label" for="task-item-8127561"> 妈妈再爱我一次</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8852067"><label class="task-list-item-label" for="task-item-8852067"> 青春派</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4180068"><label class="task-list-item-label" for="task-item-4180068"> 黑客帝国 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4061531"><label class="task-list-item-label" for="task-item-4061531"> 模仿游戏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3490516"><label class="task-list-item-label" for="task-item-3490516"> 天才眼镜狗</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1388971"><label class="task-list-item-label" for="task-item-1388971"> 穿靴子的猫</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1746210"><label class="task-list-item-label" for="task-item-1746210"> 穿靴子的猫番外篇-萌猫三剑客</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2692761"><label class="task-list-item-label" for="task-item-2692761"> 盗梦空间</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9605140"><label class="task-list-item-label" for="task-item-9605140"> 逆世界</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-741256"><label class="task-list-item-label" for="task-item-741256"> 终结者</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-997362"><label class="task-list-item-label" for="task-item-997362"> 碟中谍 1、2、3、4、5</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3974172"><label class="task-list-item-label" for="task-item-3974172"> 黑衣人 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-162562"><label class="task-list-item-label" for="task-item-162562"> 少年班</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9159252"><label class="task-list-item-label" for="task-item-9159252"> 教父 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1780041"><label class="task-list-item-label" for="task-item-1780041"> 阿甘正传</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2643248"><label class="task-list-item-label" for="task-item-2643248"> 剪刀手爱德华</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2396953"><label class="task-list-item-label" for="task-item-2396953"> 第九区</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2462030"><label class="task-list-item-label" for="task-item-2462030"> 人工智能</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8849094"><label class="task-list-item-label" for="task-item-8849094"> 惊天魔盗团 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6817181"><label class="task-list-item-label" for="task-item-6817181"> 大圣归来</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7969467"><label class="task-list-item-label" for="task-item-7969467"> 马达加斯加的企鹅 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8550358"><label class="task-list-item-label" for="task-item-8550358"> 狮子王</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4405712"><label class="task-list-item-label" for="task-item-4405712"> 百万富翁</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6152329"><label class="task-list-item-label" for="task-item-6152329"> 驯龙高手 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2275042"><label class="task-list-item-label" for="task-item-2275042"> 怪物史莱克 1、2、3、4</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9862155"><label class="task-list-item-label" for="task-item-9862155"> 机器管家</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5169058"><label class="task-list-item-label" for="task-item-5169058"> 返老还童</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6259852"><label class="task-list-item-label" for="task-item-6259852"> 飞屋环游记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6424298"><label class="task-list-item-label" for="task-item-6424298"> 像素大战</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3462536"><label class="task-list-item-label" for="task-item-3462536"> 蚁人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6058592"><label class="task-list-item-label" for="task-item-6058592"> 侏罗纪公园</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-637696"><label class="task-list-item-label" for="task-item-637696"> 憨豆特工</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4544347"><label class="task-list-item-label" for="task-item-4544347"> 憨豆的黄金周</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-645388"><label class="task-list-item-label" for="task-item-645388"> 玛丽与马克思</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8748064"><label class="task-list-item-label" for="task-item-8748064"> 海上钢琴师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-583901"><label class="task-list-item-label" for="task-item-583901"> 功夫之王</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7917736"><label class="task-list-item-label" for="task-item-7917736"> 四大名捕</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5708130"><label class="task-list-item-label" for="task-item-5708130"> 天下无贼</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2418524"><label class="task-list-item-label" for="task-item-2418524"> 那些年我们一起追过的女孩</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8500521"><label class="task-list-item-label" for="task-item-8500521"> 功夫</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5966745"><label class="task-list-item-label" for="task-item-5966745"> 长江7号</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4248731"><label class="task-list-item-label" for="task-item-4248731"> 后天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4413612"><label class="task-list-item-label" for="task-item-4413612"> 2012</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3033179"><label class="task-list-item-label" for="task-item-3033179"> 我是传奇</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2090773"><label class="task-list-item-label" for="task-item-2090773"> 超人汉考克</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9243739"><label class="task-list-item-label" for="task-item-9243739"> 哥斯拉</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3508997"><label class="task-list-item-label" for="task-item-3508997"> 暮光之城 1、2、3、4 破晓上、4 破晓下</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4304623"><label class="task-list-item-label" for="task-item-4304623"> 风之谷</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7914904"><label class="task-list-item-label" for="task-item-7914904"> 叶问 1、2、3、4</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9565065"><label class="task-list-item-label" for="task-item-9565065"> 海绵宝宝历险记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4890543"><label class="task-list-item-label" for="task-item-4890543"> 十月围城</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3694127"><label class="task-list-item-label" for="task-item-3694127"> 一代宗师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4890302"><label class="task-list-item-label" for="task-item-4890302"> 师父</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5625002"><label class="task-list-item-label" for="task-item-5625002"> 镖门</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5204180"><label class="task-list-item-label" for="task-item-5204180"> 极速蜗牛</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5990037"><label class="task-list-item-label" for="task-item-5990037"> 史蒂夫乔布斯</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6559379"><label class="task-list-item-label" for="task-item-6559379"> 乔布斯传</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4505117"><label class="task-list-item-label" for="task-item-4505117"> 疯狂动物城</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5557783"><label class="task-list-item-label" for="task-item-5557783"> 美人鱼</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6151035"><label class="task-list-item-label" for="task-item-6151035"> 楚门的世界</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6494592"><label class="task-list-item-label" for="task-item-6494592"> 雷蒙-斯尼奇的不幸历险</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3851833"><label class="task-list-item-label" for="task-item-3851833"> 机械姬</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4944364"><label class="task-list-item-label" for="task-item-4944364"> 拯救大兵瑞恩</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6945703"><label class="task-list-item-label" for="task-item-6945703"> 入殓师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-347388"><label class="task-list-item-label" for="task-item-347388"> 盗走达芬奇</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8838839"><label class="task-list-item-label" for="task-item-8838839"> 蝴蝶效应 1、2、3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7384157"><label class="task-list-item-label" for="task-item-7384157"> 偷天换日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7297035"><label class="task-list-item-label" for="task-item-7297035"> 十二只猴子</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6985858"><label class="task-list-item-label" for="task-item-6985858"> 星际穿越</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7149542"><label class="task-list-item-label" for="task-item-7149542"> 死侍 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8231082"><label class="task-list-item-label" for="task-item-8231082"> 异邦人-无皇刃谭</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9105779"><label class="task-list-item-label" for="task-item-9105779"> 饥饿游戏 1</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-607967"><label class="task-list-item-label" for="task-item-607967"> 机械心（法国）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1348362"><label class="task-list-item-label" for="task-item-1348362"> 怪兽大学</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7785168"><label class="task-list-item-label" for="task-item-7785168"> 美国队长 3</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8313567"><label class="task-list-item-label" for="task-item-8313567"> 神战 - 权利之眼</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4719835"><label class="task-list-item-label" for="task-item-4719835"> 心灵捕手</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9703779"><label class="task-list-item-label" for="task-item-9703779"> 头文字D剧场版-梦现</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6973854"><label class="task-list-item-label" for="task-item-6973854"> 哆啦A梦-伴我同行</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1720190"><label class="task-list-item-label" for="task-item-1720190"> BAT MAN VS SUPER MAN</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4794837"><label class="task-list-item-label" for="task-item-4794837"> 鲁滨逊漂流记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8154690"><label class="task-list-item-label" for="task-item-8154690"> 泰迪熊 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1978821"><label class="task-list-item-label" for="task-item-1978821"> 爱宠大机密</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8038521"><label class="task-list-item-label" for="task-item-8038521"> 生化危机 1 - 变种生还</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2261016"><label class="task-list-item-label" for="task-item-2261016"> 生化危机 2 - 启示录</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5498936"><label class="task-list-item-label" for="task-item-5498936"> 生化危机 3 - 灭绝</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7954059"><label class="task-list-item-label" for="task-item-7954059"> 生化危机 4 - 战神再生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6773220"><label class="task-list-item-label" for="task-item-6773220"> 生化危机 5 - 惩罚</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1666548"><label class="task-list-item-label" for="task-item-1666548"> 生化危机 6 - 终章</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9834255"><label class="task-list-item-label" for="task-item-9834255"> 生化危机-恶化</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5992862"><label class="task-list-item-label" for="task-item-5992862"> 这个杀手不太冷</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3006338"><label class="task-list-item-label" for="task-item-3006338"> 生化危机-诅咒</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2944142"><label class="task-list-item-label" for="task-item-2944142"> 茱莉亚的眼睛</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9552023"><label class="task-list-item-label" for="task-item-9552023"> 你的名字</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5862304"><label class="task-list-item-label" for="task-item-5862304"> 秒速五厘米</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6133321"><label class="task-list-item-label" for="task-item-6133321"> 机械师 2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3197957"><label class="task-list-item-label" for="task-item-3197957"> 佩小姐的奇幻城堡</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4912714"><label class="task-list-item-label" for="task-item-4912714"> 猫的报恩</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4482111"><label class="task-list-item-label" for="task-item-4482111"> 权力的游戏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-935101"><label class="task-list-item-label" for="task-item-935101"> 杀戮都市 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7219317"><label class="task-list-item-label" for="task-item-7219317"> 热血高校 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8492783"><label class="task-list-item-label" for="task-item-8492783"> 言叶之庭</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9631865"><label class="task-list-item-label" for="task-item-9631865"> 加勒比海盗 1、2、3、4、5</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-780603"><label class="task-list-item-label" for="task-item-780603"> 萤火虫之墓</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3399205"><label class="task-list-item-label" for="task-item-3399205"> 变形金刚 1、2、3、4、5</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2031858"><label class="task-list-item-label" for="task-item-2031858"> 当幸福来敲门</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4272613"><label class="task-list-item-label" for="task-item-4272613"> 少年派的奇幻漂流</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6365710"><label class="task-list-item-label" for="task-item-6365710"> 美丽心灵</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7163533"><label class="task-list-item-label" for="task-item-7163533"> 序列之争</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8458513"><label class="task-list-item-label" for="task-item-8458513"> 凉宫春日的消失</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4258041"><label class="task-list-item-label" for="task-item-4258041"> 境界的彼方-未来篇</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6641825"><label class="task-list-item-label" for="task-item-6641825"> 菊次郎的夏天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1765330"><label class="task-list-item-label" for="task-item-1765330"> 环太平洋 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6386324"><label class="task-list-item-label" for="task-item-6386324"> 轻音少女剧场版</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3610489"><label class="task-list-item-label" for="task-item-3610489"> 玉子的爱情故事</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7343647"><label class="task-list-item-label" for="task-item-7343647"> 寻梦环游记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1336943"><label class="task-list-item-label" for="task-item-1336943"> 明日边缘</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8304411"><label class="task-list-item-label" for="task-item-8304411"> 土拨鼠之日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7710061"><label class="task-list-item-label" for="task-item-7710061"> 魁拔 1 - 十万火急</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8955435"><label class="task-list-item-label" for="task-item-8955435"> 魁拔 2 - 大战元泱界</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1546616"><label class="task-list-item-label" for="task-item-1546616"> 魁拔 3 - 战神崛起</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4344610"><label class="task-list-item-label" for="task-item-4344610"> 英伦对决</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2124587"><label class="task-list-item-label" for="task-item-2124587"> 奇幻森林</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-166188"><label class="task-list-item-label" for="task-item-166188"> 唐人街探案 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3201092"><label class="task-list-item-label" for="task-item-3201092"> 电锯惊魂 1、8</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3804824"><label class="task-list-item-label" for="task-item-3804824"> 艺伎回忆录</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9112224"><label class="task-list-item-label" for="task-item-9112224"> 猫汤</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-816443"><label class="task-list-item-label" for="task-item-816443"> 伊豆的舞女</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9476350"><label class="task-list-item-label" for="task-item-9476350"> 神鞭</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7597410"><label class="task-list-item-label" for="task-item-7597410"> 达芬奇密码</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3142688"><label class="task-list-item-label" for="task-item-3142688"> 哈利波特 1 - 魔法师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7698407"><label class="task-list-item-label" for="task-item-7698407"> 哈利波特 2 - 密室</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6115562"><label class="task-list-item-label" for="task-item-6115562"> 西虹市首富</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2254696"><label class="task-list-item-label" for="task-item-2254696"> 奇异博士</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4480395"><label class="task-list-item-label" for="task-item-4480395"> 失恋 33 天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6942126"><label class="task-list-item-label" for="task-item-6942126"> 情书</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5226799"><label class="task-list-item-label" for="task-item-5226799"> 朝花夕誓</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2848963"><label class="task-list-item-label" for="task-item-2848963"> 风雨哈佛路</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1716867"><label class="task-list-item-label" for="task-item-1716867"> 飓风营救</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-101397"><label class="task-list-item-label" for="task-item-101397"> 摩天营救</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8067217"><label class="task-list-item-label" for="task-item-8067217"> 摄影机不要停</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1871430"><label class="task-list-item-label" for="task-item-1871430"> 阿尔法-狼伴归途</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7171758"><label class="task-list-item-label" for="task-item-7171758"> 疯狂的麦克斯 1、4</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-5248767"><label class="task-list-item-label" for="task-item-5248767"> 流浪地球</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9121708"><label class="task-list-item-label" for="task-item-9121708"> 海王</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1014068"><label class="task-list-item-label" for="task-item-1014068"> 特种部队 2 - 全面反击</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3522973"><label class="task-list-item-label" for="task-item-3522973"> 白蛇缘起</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-886059"><label class="task-list-item-label" for="task-item-886059"> 花牌情缘 上之句</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4566201"><label class="task-list-item-label" for="task-item-4566201"> 花牌情缘 下之句</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-6644096"><label class="task-list-item-label" for="task-item-6644096"> 神探夏洛克</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8427394"><label class="task-list-item-label" for="task-item-8427394"> 惊奇队长</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9246682"><label class="task-list-item-label" for="task-item-9246682"> X 战警</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3222207"><label class="task-list-item-label" for="task-item-3222207"> 银河护卫队 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2147114"><label class="task-list-item-label" for="task-item-2147114"> 帕丁顿熊 2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3428333"><label class="task-list-item-label" for="task-item-3428333"> 复仇者联盟 1、2、3、4</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2355086"><label class="task-list-item-label" for="task-item-2355086"> 阿丽塔</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1051061"><label class="task-list-item-label" for="task-item-1051061"> 蜘蛛侠 - 英雄远征</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2683399"><label class="task-list-item-label" for="task-item-2683399"> 哪吒之魔童降世</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8150733"><label class="task-list-item-label" for="task-item-8150733"> 中国机长</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-3676259"><label class="task-list-item-label" for="task-item-3676259"> 天气之子</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1369777"><label class="task-list-item-label" for="task-item-1369777"> 生死狙击</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7594318"><label class="task-list-item-label" for="task-item-7594318"> 星际探索</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-173295"><label class="task-list-item-label" for="task-item-173295"> 猩球崛起</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9697356"><label class="task-list-item-label" for="task-item-9697356"> 全民风暴</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1527956"><label class="task-list-item-label" for="task-item-1527956"> 忍者神龟-变种时代</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8181853"><label class="task-list-item-label" for="task-item-8181853"> 荒野猎人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9568022"><label class="task-list-item-label" for="task-item-9568022"> 调音师</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-1900208"><label class="task-list-item-label" for="task-item-1900208"> 忍者神龟 2 - 破影而出 2020年4月25日星期六</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-692524"><label class="task-list-item-label" for="task-item-692524"> 灭绝 - 烂片</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2968051"><label class="task-list-item-label" for="task-item-2968051"> Hello World</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-4015093"><label class="task-list-item-label" for="task-item-4015093"> 黑金</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2647715"><label class="task-list-item-label" for="task-item-2647715"> 灵魂摆渡</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2942951"><label class="task-list-item-label" for="task-item-2942951"> 画壁</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-9065142"><label class="task-list-item-label" for="task-item-9065142"> 诸神之怒</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-8513935"><label class="task-list-item-label" for="task-item-8513935"> 诸神之战 2020年7月11日星期六</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2359019"><label class="task-list-item-label" for="task-item-2359019"> X 特遣队</label></li>
</ul>
<h2 id="待看">待看</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9196828"><label class="task-list-item-label" for="task-item-9196828"> 幽灵公主</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5029663"><label class="task-list-item-label" for="task-item-5029663"> 种下星星的日子</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8591374"><label class="task-list-item-label" for="task-item-8591374"> 蜘蛛侠-英雄归来</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6115654"><label class="task-list-item-label" for="task-item-6115654"> 匆匆那年</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5677864"><label class="task-list-item-label" for="task-item-5677864"> 泰坦尼克号</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5956568"><label class="task-list-item-label" for="task-item-5956568"> 罗马假日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7350610"><label class="task-list-item-label" for="task-item-7350610"> 红猪</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5896021"><label class="task-list-item-label" for="task-item-5896021"> 侧耳倾听</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7989986"><label class="task-list-item-label" for="task-item-7989986"> 小美人鱼</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9214205"><label class="task-list-item-label" for="task-item-9214205"> 玩具总动员</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6138718"><label class="task-list-item-label" for="task-item-6138718"> 怪兽大战外星人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7811051"><label class="task-list-item-label" for="task-item-7811051"> 料理鼠王</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9965898"><label class="task-list-item-label" for="task-item-9965898"> ET</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5026731"><label class="task-list-item-label" for="task-item-5026731"> 硅谷传奇</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9263948"><label class="task-list-item-label" for="task-item-9263948"> 卧虎藏龙</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5989880"><label class="task-list-item-label" for="task-item-5989880"> 阿凡达 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6071571"><label class="task-list-item-label" for="task-item-6071571"> 冰河世纪</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1057390"><label class="task-list-item-label" for="task-item-1057390"> 疯狂原始人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8367029"><label class="task-list-item-label" for="task-item-8367029"> 守护者联盟</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9692784"><label class="task-list-item-label" for="task-item-9692784"> 贫民窟的百万富翁</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6832753"><label class="task-list-item-label" for="task-item-6832753"> 银翼杀手</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4052465"><label class="task-list-item-label" for="task-item-4052465"> 彗星来的那一夜</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9432881"><label class="task-list-item-label" for="task-item-9432881"> 希特勒的名单</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2830668"><label class="task-list-item-label" for="task-item-2830668"> 十二怒汉</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2508923"><label class="task-list-item-label" for="task-item-2508923"> 异次元骇客</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3005167"><label class="task-list-item-label" for="task-item-3005167"> 感官游戏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5366253"><label class="task-list-item-label" for="task-item-5366253"> 冒名顶替</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-476646"><label class="task-list-item-label" for="task-item-476646"> 无姓之人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9581934"><label class="task-list-item-label" for="task-item-9581934"> 香草的天空</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2132452"><label class="task-list-item-label" for="task-item-2132452"> 星际迷航</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9493156"><label class="task-list-item-label" for="task-item-9493156"> 独立日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1850027"><label class="task-list-item-label" for="task-item-1850027"> 荒野猎人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1291689"><label class="task-list-item-label" for="task-item-1291689"> 第三种爱情</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3192035"><label class="task-list-item-label" for="task-item-3192035"> 拉登日记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4476662"><label class="task-list-item-label" for="task-item-4476662"> 乱世佳人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1999542"><label class="task-list-item-label" for="task-item-1999542"> 苔丝</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2721991"><label class="task-list-item-label" for="task-item-2721991"> 霸王别姬</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4264580"><label class="task-list-item-label" for="task-item-4264580"> 美丽人生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3684666"><label class="task-list-item-label" for="task-item-3684666"> 三傻大闹宝莱坞</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2648042"><label class="task-list-item-label" for="task-item-2648042"> 放牛班的春天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9812868"><label class="task-list-item-label" for="task-item-9812868"> 怦然心动</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2553582"><label class="task-list-item-label" for="task-item-2553582"> V字仇杀队</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6150190"><label class="task-list-item-label" for="task-item-6150190"> 被嫌弃的松子的一生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3912225"><label class="task-list-item-label" for="task-item-3912225"> 穿越时空的少女</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-83346"><label class="task-list-item-label" for="task-item-83346"> 荒野生存</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2603808"><label class="task-list-item-label" for="task-item-2603808"> 叛逆的物语</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-408392"><label class="task-list-item-label" for="task-item-408392"> 沉默的羔羊</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-310613"><label class="task-list-item-label" for="task-item-310613"> 控方证人</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4319838"><label class="task-list-item-label" for="task-item-4319838"> 锅匠 裁缝 士兵 间谍（Tinker Tailor Soldier Spy）</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6523809"><label class="task-list-item-label" for="task-item-6523809"> 第六感</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1305430"><label class="task-list-item-label" for="task-item-1305430"> 傲慢与偏见</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6022161"><label class="task-list-item-label" for="task-item-6022161"> 刺客联盟</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8114821"><label class="task-list-item-label" for="task-item-8114821"> 末日崩塌</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6879008"><label class="task-list-item-label" for="task-item-6879008"> 隧道</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3163508"><label class="task-list-item-label" for="task-item-3163508"> 感冒</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2643323"><label class="task-list-item-label" for="task-item-2643323"> 铁线虫入侵</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4076665"><label class="task-list-item-label" for="task-item-4076665"> 恐怖直播</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-201190"><label class="task-list-item-label" for="task-item-201190"> 万物理论</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4825342"><label class="task-list-item-label" for="task-item-4825342"> 社交网络</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7261408"><label class="task-list-item-label" for="task-item-7261408"> 缩小人生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1588519"><label class="task-list-item-label" for="task-item-1588519"> 地球停转之日</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5252211"><label class="task-list-item-label" for="task-item-5252211"> 恋空</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7595782"><label class="task-list-item-label" for="task-item-7595782"> 黑镜</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8392115"><label class="task-list-item-label" for="task-item-8392115"> 死亡诗社</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5665914"><label class="task-list-item-label" for="task-item-5665914"> 和莎莫的 500 天</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3268048"><label class="task-list-item-label" for="task-item-3268048"> 饮食男女</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1028241"><label class="task-list-item-label" for="task-item-1028241"> 我是大哥大</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1756326"><label class="task-list-item-label" for="task-item-1756326"> 星运里的错</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6987733"><label class="task-list-item-label" for="task-item-6987733"> 突袭</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5215201"><label class="task-list-item-label" for="task-item-5215201"> 无敌破坏王 1</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1165664"><label class="task-list-item-label" for="task-item-1165664"> 无敌破坏王 2 - 大闹互联网</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8715523"><label class="task-list-item-label" for="task-item-8715523"> 回到未来</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6524309"><label class="task-list-item-label" for="task-item-6524309"> 刺客信条</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6988552"><label class="task-list-item-label" for="task-item-6988552"> 死亡笔记</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3857144"><label class="task-list-item-label" for="task-item-3857144"> 金田一</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3010088"><label class="task-list-item-label" for="task-item-3010088"> 安德的游戏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-1563699"><label class="task-list-item-label" for="task-item-1563699"> 王牌特工</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2509778"><label class="task-list-item-label" for="task-item-2509778"> 最终幻想</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7086105"><label class="task-list-item-label" for="task-item-7086105"> 阿拉丁神灯</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7931164"><label class="task-list-item-label" for="task-item-7931164"> 木乃伊</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7377831"><label class="task-list-item-label" for="task-item-7377831"> 国家宝藏</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7101596"><label class="task-list-item-label" for="task-item-7101596"> 博物馆奇妙夜</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8719353"><label class="task-list-item-label" for="task-item-8719353"> 舞出我人生</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-6811562"><label class="task-list-item-label" for="task-item-6811562"> 赌博默示录 1、2</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3850498"><label class="task-list-item-label" for="task-item-3850498"> 超体</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-9022038"><label class="task-list-item-label" for="task-item-9022038"> 蓝色大海的传说</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2135489"><label class="task-list-item-label" for="task-item-2135489"> 来自星星的你</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2528384"><label class="task-list-item-label" for="task-item-2528384"> 巨额来电</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7532306"><label class="task-list-item-label" for="task-item-7532306"> 二代妖精</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8321978"><label class="task-list-item-label" for="task-item-8321978"> 可可西里的美丽传说</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-4166128"><label class="task-list-item-label" for="task-item-4166128"> 信条</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-281118"><label class="task-list-item-label" for="task-item-281118"> 摩天大楼</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式总结.md]]></title>
        <id>http://blog.kuranado.com/post/zheng-ze-biao-da-shi-zong-jie-md/</id>
        <link href="http://blog.kuranado.com/post/zheng-ze-biao-da-shi-zong-jie-md/">
        </link>
        <updated>2020-10-01T00:59:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基本">基本</h2>
<ul>
<li>正则表达式区分字母大小写</li>
<li><code>.</code> 字符可以匹配<strong>任意</strong>单个字符、字母、数字、空格甚至是 <code>.</code> 字符本身。但在绝大多数正则表达式实现里，<code>.</code> 不能匹配换行符</li>
<li><code>\</code> 用于转义</li>
<li><code>\.</code> 匹配字符 <code>.</code> 本身</li>
<li><code>\\</code> 匹配字符 <code>\</code></li>
</ul>
<hr>
<h2 id="字符区间">字符区间</h2>
<ul>
<li><code>[abc]</code> 匹配字符 <code>a</code> 或 <code>b</code> 或 <code>c</code>，</li>
<li><code>[0-9]</code> 等价于 <code>[0123456789]</code></li>
<li><code>[a-z]</code> 等价于 <code>[abcdefghijklmnopqrstuvwxyz]</code>，<code>[A-Z]</code> 等价于 <code>[ABCDEFGHIJKLMNOPQRSTUVWXYZ]</code>，<code>[A-z]</code> 等价于 <code>[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]</code>（按照 Ascii 顺序），<code>[A-Za-z0-9]</code> 等价于 <code>[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789]</code></li>
</ul>
<blockquote>
<p>很多程序员喜欢把一个字符也定义为一个字符区间，如 <code>[a]</code> 等价于 <code>a</code>，<code>[\r]?</code> 等价于 <code>\r?</code>，但前者可以避免产生误解、增加可读性，所以建议一个字符也定义为字符区间</p>
</blockquote>
<hr>
<h2 id="排除">排除</h2>
<ul>
<li><code>[^a-c]</code> 排除 <code>a</code> 或 <code>b</code> 或 <code>c</code></li>
</ul>
<hr>
<h2 id="空白字符">空白字符</h2>
<ul>
<li><code>[\b]</code> 匹配回退（并删除）一个字符（Backspace 键）</li>
<li><code>\f</code> 匹配换页符</li>
<li><code>\r</code> 匹配回车符</li>
<li><code>\n</code> 匹配换行符</li>
<li><code>\t</code> 匹配制表符（Tab 键）</li>
<li><code>\v</code> 匹配垂直制表符</li>
</ul>
<blockquote>
<p>在 Unix 或 Linux 上使用 <code>\n</code> 匹配行尾标记，Windows 上使用 <code>\r\n</code> 匹配行尾标记</p>
</blockquote>
<hr>
<h2 id="特定字符类型">特定字符类型</h2>
<ul>
<li><code>\d</code> 匹配任何一个数字字符，等价于 <code>[0-9]</code></li>
<li><code>\D</code> 匹配任何一个<strong>非数字</strong>字符，等价于 <code>[^0-9]</code></li>
<li><code>\w</code> 匹配任何一个字母（大小写均可）或数字类型或下划线字符，等价于 <code>[A-z0-9_]</code></li>
<li><code>\W</code> 匹配任何一个<strong>非字母（大小写均可）或数字类型或下划线字符</strong>，等价于 <code>[^A-z0-9_]</code></li>
<li><code>\s</code> 匹配任何一个空白字符，等价于 <code>[\f\r\n\t\v ]</code>，注意包含空格</li>
<li><code>\S</code> 匹配任何一个非空白字符，等价于 <code>[^\f\r\n\t\v ]</code></li>
</ul>
<hr>
<h2 id="转义">转义</h2>
<ul>
<li><code>.</code>、<code>[</code>、<code>]</code>、<code>\</code>、<code>+</code>、<code>*</code>、<code>?</code>、<code>(</code>、<code>)</code> 等具有特殊含义的符号被称为<strong>元字符</strong>，如果要匹配元字符，则需要对元字符进行转义，如 <code>\.</code> 匹配字符 <code>.</code>，<code>\[</code> 匹配字符 <code>[</code>，<code>\]</code> 匹配字符 <code>]</code>，<code>\\</code> 匹配字符 <code>\</code></li>
<li><code>/</code> 字符并不是元字符，在绝大多数正则表达式解析器中如果要匹配字符 <code>/</code> 并不需要转义，但有些解析器却要求必须转义才能够匹配，所以建议总是在需要匹配字符 <code>/</code> 时对其进行转义，即使用 <code>\/</code> 匹配字符 <code>/</code>，这样在所有解析器中都能够正常工作</li>
<li>像 <code>.</code>、<code>+</code> 这样的元字符出现在字符区间内部时，将会被解释为普通字符，可以不用转义，如 <code>[\w\.]</code> 等价于 <code>[\w.]</code>，但为了防止误解，建议显示转义</li>
</ul>
<hr>
<h2 id="重复匹配">重复匹配</h2>
<ul>
<li><code>+</code> 元字符匹配一个或多个字符，如 <code>a+</code> 匹配一个或多个连续的 <code>a</code>，<code>[0-9]+</code> 匹配一个或多个连续的数字</li>
<li><code>*</code> 元字符匹配 0 个或多个字符</li>
<li><code>?</code> 元字符匹配 0 个或 1 个字符</li>
<li><code>{n}</code> 重复匹配 n 次</li>
<li><code>{m,n}</code> 重复匹配 m ~ n 次，如 <code>{0,1}</code> 表示最少匹配 0 次，最多匹配 1 次，等价于 <code>?</code></li>
<li><code>{m,}</code> 重复匹配至少 m 次</li>
<li><code>*</code> 和 <code>+</code> 是贪婪型元字符，它们会尽可能地从一段文本的开头一致匹配到末尾，而不是碰到一个匹配时就停止，如果想要碰到第一个匹配时就停止，则应该使用元字符对应的懒惰型。<code>*</code> 元字符对应的懒惰型为 <code>*?</code>，<code>+</code> 元字符对应的懒惰型为 <code>+?</code>。如想要匹配 HTML <code>&lt;b&gt;</code> 标签中的文本，贪婪型正则如下：<pre><code>&lt;[Bb]&gt;.*&lt;\/[Bb]&gt;
</code></pre>
但对于如下文本匹配却有问题：<br>
<img src="http://image.kuranado.com/blog/1601514029.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
正确写法是使用懒惰型：<pre><code>&lt;[Bb]&gt;.*?&lt;\/[Bb]&gt;
</code></pre>
匹配结果：<br>
<img src="http://image.kuranado.com/blog/1601514040.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></li>
</ul>
<blockquote>
<p>在为字符区间加后缀的时候，必须把后缀放到区间外面，如 <code>[0-9]+</code> 是正确的，而 <code>[0-9+]</code> 是错误的，同理 <code>[0-9]*</code>、<code>[0-9]?</code> 是正确的，而 <code>[0-9*]</code>、<code>[0-9?]</code> 是错误的<br>
注意 <code>{m,n}</code> 是正确的，<code>{m, n}</code> 是不正确的，因为个人习惯在英文 <code>,</code> 后加一个空格，但在使用此正则时需要注意避免</p>
</blockquote>
<hr>
<h2 id="位置匹配">位置匹配</h2>
<ul>
<li><code>\b</code> 表示边界（boundary），匹配<strong>单词</strong>的开头或结尾。这里所谓的单词是指能够被 <code>\w</code> 匹配的内容即称为单词，<code>\b</code> 匹配的时字符之间的一个位置：一边是单词（能够被 <code>\w</code> 所匹配的），一边是其它内容（能够被 <code>\W</code> 所匹配的）。<code>b</code> 匹配的是一个位置，而不是任何实际字符</li>
<li><code>\B</code> 不匹配单词边界</li>
<li><code>^</code> 匹配字符串开头位置。<code>^</code> 用于字符区间中表示排除，如 <code>[^abc]</code> <code>[^a-c]</code> 排除 <code>a</code> 或 <code>b</code> 或 <code>c</code>，但当 <code>^</code> 用于字符区间之外时，则表示匹配字符串的起始位置</li>
<li><code>$</code> 匹配字符串结尾位置</li>
<li><code>(?m)</code> 用于开启多行模式，<code>(?m)</code> 必须出现在整个模式的最前面，但实际包括 JavaScript 在内的许多正则表达式都不支持 <code>(?m)</code></li>
</ul>
<hr>
<h2 id="子表达式">子表达式</h2>
<ul>
<li>前面介绍的重复匹配只作用于紧挨着它的前一个字符或元字符，为了能够重复匹配多个字符，需要使用子表达式</li>
<li>子表达式必须出现在元字符 <code>(</code> 和 <code>)</code> 之间</li>
<li>对于不需要使用子表达式的地方，如果加上元字符 <code>(</code> 和 <code>)</code> 使其成为子表达式，虽然对匹配结果不会有任何影响，但可能会影响性能，如把 <code>\d{1,3}</code> 如果写成子表达式：<code>(\d{1,3})</code>，匹配结果完全一样，但后者可能会影响性能</li>
<li>因为模式是从左到右进行评估的，首先测试第一个，然后测试第二个，只要有任何一个模式匹配，就不再测试选择结构中的其它模式。比如 IP 地址的匹配：<br>
IP 地址范围为 0.0.0.0 ~ 255.255.255.255，总结如下：
<ol>
<li>任意的 1 位或 2 位数字</li>
<li>任意的以 1 开头的 3 位数字</li>
<li>任意的以 2 开头，第二位数字在 0 到 4 之间的 3 位数字</li>
<li>任意的以 25 开头，第三位数字在 0 到 5 之间的 3 位数字<br>
很容易写出如下正则：</li>
</ol>
<pre><code>(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))
</code></pre>
但这个正则却是错误的，如 IP 地址：<code>12.159.46.200</code> 的匹配结果如下图，最后的 0 无法被匹配，这是因为 <code>20</code> 已经被子表达式 <code>(\d{1, 2})</code> 匹配，并没有被 <code>(25[0-5])</code> 匹配<br>
<img src="http://image.kuranado.com/blog/1601514063.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
正确的写法如下：<pre><code>((((25[0-5])\d)|(2[0-4]\d)|(1\d{2})|(\d{1,2}))\.){3}(((25[0-5])\d)|(2[0-4]\d)|(1\d{2})|(\d{1,2}))
</code></pre>
匹配结果：<br>
<img src="http://image.kuranado.com/blog/1601514071.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></li>
</ul>
<hr>
<h2 id="反向引用">反向引用</h2>
<ul>
<li>
<p>反向引用允许正则表达式模式引用之前匹配的结果，如想要匹配所有的 HTML 标题，正则如下：</p>
<pre><code>(&lt;[Hh]1&gt;.*?&lt;\/[Hh]1&gt;)|(&lt;[Hh]2&gt;.*?&lt;\/[Hh]2&gt;)|(&lt;[Hh]3&gt;.*?&lt;\/[Hh]3&gt;)|(&lt;[Hh]4&gt;.*?&lt;\/[Hh]4&gt;)|(&lt;[Hh]5&gt;.*?&lt;\/[Hh]5&gt;)|(&lt;[Hh]6&gt;.*?&lt;\/[Hh]6&gt;)
</code></pre>
<p>匹配结果也的确是正确的：<br>
<img src="http://image.kuranado.com/blog/1601514090.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
但是这样写未免过于臃肿，所以有人可能会这样写：</p>
<pre><code>&lt;[Hh][1-6]&gt;.*?&lt;\/[Hh][1-6]&gt; 
</code></pre>
<p>但实际这却是错误的，因为他会将 <code>&lt;h2&gt;</code> 和 <code>&lt;/h3&gt;</code> 匹配到一块，而这是错误的 HTML 标题：       <img src="http://image.kuranado.com/blog/1601514113.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></p>
<p>正确的写法是使用反向引用：</p>
<pre><code>&lt;[Hh]([1-6])&gt;.*?&lt;\/[Hh]\1&gt;
</code></pre>
<p>匹配结果：<br>
<img src="http://image.kuranado.com/blog/1601514136.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
使用了 <code>\1</code> 引用了第 1 个子表达式 <code>([1-6])</code>，如果有第 2 个、第 3 个等子表达式，则使用 <code>\2</code>、<code>\3</code> 引用</p>
</li>
<li>
<p>反向引用只能引用括号里的子表达式</p>
</li>
<li>
<p>不同的正则实现中，反向引用的语法存在很大差异，如 JavaScript 和 vim 在搜索时使用 <code>\</code> 标识反向引用，在替换时使用 <code>$</code> 标识反向引用，Perl 搜索和替换都使用 <code>$</code> 标识反向引用</p>
</li>
</ul>
<hr>
<h2 id="反向引用替换">反向引用替换</h2>
<ul>
<li>如将文档中的所有邮箱地址全替换为 HTML 链接
<ol>
<li>先写出正则表达式，找出所有的邮箱地址，为了能够使用反向引用，加 <code>(</code> 和 <code>)</code> 让其变成子表达式：<pre><code>(\w+[\w\.]*@[\w\.]+\.\w+)
</code></pre>
</li>
<li>编写替换的表达式：<pre><code>&lt;a href=&quot;mailto:$1&quot;&gt;$1&lt;/a&gt;
</code></pre>
</li>
<li>开始替换，可以使用编程语言，如 JavaScript，这里简单直接以 VsCode 操作为例（注意要选择正则表达式模式）：<br>
<img src="http://image.kuranado.com/blog/1601514160.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"><br>
点击替换按钮，替换结果如下：<br>
<img src="http://image.kuranado.com/blog/1601514172.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></li>
</ol>
</li>
<li>反向引用替换大小写转换（并不是所有正则表达式实现都支持）：
<ul>
<li><code>\U</code> 把 <code>\U</code> 到 <code>\E</code> 之间的字符全部转换为大写</li>
<li><code>\L</code> 把 <code>\L</code> 到 <code>\E</code> 之间的字符全部转换为小写</li>
<li><code>\E</code> 结束 <code>\U</code> 或 <code>\L</code> 转换</li>
<li><code>u</code> 把下一个字符转换为大写</li>
<li><code>l</code> 把下一个字符转换为小写</li>
</ul>
</li>
</ul>
<hr>
<h2 id="环视">环视</h2>
<ul>
<li><code>?=</code> 表示向前查看，如：<code>?=:</code> 匹配字符 <code>:</code> 但不消耗字符 <code>:</code>，所谓的不消耗是指匹配到的 <code>:</code> 不会在最终的匹配结果中返回。如对于如下文本：<pre><code>http://www.baidu.com
</code></pre>
表达式 <code>http:</code> 匹配 <code>http:</code>，而如果使用向前查看，表达式为：<code>http(?=:)</code>，匹配结果为：<code>http</code>，不包含字符 <code>:</code></li>
<li><code>?&lt;=</code> 表示向后查看，如：<code>?&lt;=\$</code> 匹配字符 <code>$</code>，但不消耗字符 <code>$</code>，如对于如下文本：<pre><code>ABC01: $253.00
</code></pre>
表达式 <code>\$[\d\.]+\d{2}</code> 匹配 <code>$253.00</code>，而如果使用向后查看，表达式为：<code>(?&lt;=\$)[\d\.]+\d{2}</code>，匹配结果为：<code>253.00</code>，不包含字符 <code>$</code></li>
<li>向前查看和向后查看的否定式分别为：<code>?!</code> 和 <code>?&lt;!</code>，即将肯定式中的 <code>=</code> 换成 <code>!</code></li>
</ul>
<blockquote>
<p>所有主流正则表达式实现都支持向前查看，但有些语言不支持向后查看，如 JavaScript</p>
</blockquote>
<hr>
<h2 id="正则测试网站">正则测试网站</h2>
<ul>
<li><a href="https://regex101.com/">https://regex101.com/</a></li>
<li><a href="https://www.regextester.com/">https://www.regextester.com/</a></li>
</ul>
<hr>
<h2 id="参考">参考</h2>
<ul>
<li>《正则表达式必知必会修订版》</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 元素的显示模式.md]]></title>
        <id>http://blog.kuranado.com/post/css-yuan-su-de-xian-shi-mo-shi-md/</id>
        <link href="http://blog.kuranado.com/post/css-yuan-su-de-xian-shi-mo-shi-md/">
        </link>
        <updated>2020-10-01T00:36:19.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="块元素">块元素</h2>
<ul>
<li>div、p、h1 ~ h6、ul、ol、li 标签都是典型的块元素</li>
<li>独占一行</li>
<li>宽度、高度、外边距、内边距都可以控制</li>
<li>宽度默认是容器（父元素）的 100%</li>
<li>不会继承父元素的高度</li>
<li>是一个容器或盒子，里面可以放块元素或行内元素</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>文字类的元素内不能再放块元素，如 p 标签内不能再放块元素，特别是不能再放 div 标签，同理，h1 ~ h6 也是文字类块元素，里面不能再放其它块元素</li>
</ul>
<h2 id="行内元素">行内元素</h2>
<ul>
<li>a、strong、b、em、i、del、s、ins、u、span 标签都是典型的行内元素，行内元素也称为内联元素</li>
<li>相邻行内元素显示在一行上，一行可以显示多个行内元素</li>
<li><strong>为行内元素设置宽度、高度是不生效的</strong></li>
<li>默认宽度就是它本身内容的宽度</li>
<li>行内元素只能容纳文本或其它行内元素（a 标签除外，a 标签内可以再放块元素，如 div 标签）</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>a 标签内不能再放其它 a 标签</li>
<li>a 标签内可以再放块元素，如 div 标签，但是一般的做法是将 a 标签转换为块元素，然后再在 a 标签内放块元素（这种情况下，a 不转换为块级元素也可以，但是安全起见，建议当 a 标签内包含块级元素时，将 a 标签转换为块级元素）</li>
</ul>
<h2 id="行内块元素">行内块元素</h2>
<ul>
<li>img、input、td 都是典型的行内块元素，它们同时具有块元素和行内元素的特点</li>
<li>相邻行内块元素显示在一行上，但是它们之间会有空白缝隙，一行可以显示多个行内块元素</li>
<li>默认宽度就是它本身内容的宽度</li>
<li>宽度、高度、外边距、内边距都可以控制</li>
</ul>
<h2 id="元素显示模式转换">元素显示模式转换</h2>
<h3 id="转换为行内元素使用的很少">转换为行内元素（使用的很少）</h3>
<pre><code>div {
    background-color: skyblue;
    display: inline;
}
&lt;div&gt;转行内元素一&lt;/div&gt;
&lt;div&gt;转行内元素二&lt;/div&gt;
</code></pre>
<h3 id="转换为块元素最常用">转换为块元素（最常用）</h3>
<pre><code>span {
    width: 200px;
    height: 200px;
    background-color: pink;
    display: block;
}
&lt;span&gt;转块元素一&lt;/span&gt;
&lt;span&gt;转块元素二&lt;/span&gt;
</code></pre>
<h3 id="转换为行内块元素常用">转换为行内块元素（常用）</h3>
<pre><code>span {
    width: 200px;
    height: 200px;
    background-color: pink;
    display: inline-block;
}
&lt;span&gt;转行内块元素一&lt;/span&gt;
&lt;span&gt;转行内块元素二&lt;/span&gt;
</code></pre>
<h2 id="单行文字垂直居中原理">单行文字垂直居中原理</h2>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601512614.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>行高等于文字本身高度 + 上边距 + 下边距，如果盒子高度等于行高，文字显然会垂直居中，如：</p>
<pre><code>a {
    display: block;
    width: 200px;
    height: 40px;
    font-size: 14px;
    line-height: 40px;
    color: white;
    font-weight: 700;
    text-decoration: none;
    padding-left: 30px;
    background-color: #434648;
}
a:hover {
    background-color: #F74E00;
}
&lt;a href=&quot;#&quot;&gt;手机 电话卡&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;电视 盒子&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;笔记本 平板&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;出行 穿戴&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;智能 路由器&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;健康 儿童&lt;/a&gt;
&lt;a href=&quot;#&quot;&gt;耳机 音箱&lt;/a&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1601512625.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>如果行高小于盒子高度，则文字会偏上；如果行高大于盒子高度，则文字会偏下</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VsCode 中 Emmet 语法快速生成HTML 和 CSS 代码.md]]></title>
        <id>http://blog.kuranado.com/post/vscode-zhong-emmet-yu-fa-kuai-su-sheng-cheng-html-he-css-dai-ma-md/</id>
        <link href="http://blog.kuranado.com/post/vscode-zhong-emmet-yu-fa-kuai-su-sheng-cheng-html-he-css-dai-ma-md/">
        </link>
        <updated>2020-09-30T01:36:35.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<blockquote>
<p>敲完简写后，按 Tab 自动完成</p>
</blockquote>
<h2 id="html">HTML</h2>
<ul>
<li><code>div</code></li>
</ul>
<pre><code>&lt;div&gt;&lt;/div&gt;
</code></pre>
<ul>
<li><code>div*3</code></li>
</ul>
<pre><code>&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</code></pre>
<ul>
<li><code>{}</code> 定义标签内的内容，<code>div{Hello}</code></li>
</ul>
<pre><code>&lt;div&gt;Hello&lt;/div&gt;
</code></pre>
<ul>
<li><code>div{Hello}*3</code></li>
</ul>
<pre><code>&lt;div&gt;Hello&lt;/div&gt;
&lt;div&gt;Hello&lt;/div&gt;
&lt;div&gt;Hello&lt;/div&gt;
</code></pre>
<ul>
<li>父子关系标签，使用 <code>&gt;</code>，如 <code>ul&gt;li</code>：</li>
</ul>
<pre><code>&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p><code>div&gt;p</code>：</p>
<pre><code>&lt;div&gt;
    &lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<ul>
<li>兄弟关系标签，使用 <code>+</code>，如 <code>div+p</code>：</li>
</ul>
<pre><code>&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
</code></pre>
<ul>
<li><code>()</code> 指定优先级，如 <code>ul&gt;(li+bq)</code>：</li>
</ul>
<pre><code>&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/ul&gt;
</code></pre>
<p><code>(ul&gt;li)+bq</code>：</p>
<pre><code>&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
</code></pre>
<ul>
<li>带有类选择器，如 <code>.gray</code>，默认生成 class 为 gray 的 div：</li>
</ul>
<pre><code>&lt;div class=&quot;gray&quot;&gt;&lt;/div&gt;
</code></pre>
<p>如果要生成其它标签 class 为 gray，则 <code>p.gray</code>：</p>
<pre><code>&lt;p class=&quot;gray&quot;&gt;&lt;/p&gt;
</code></pre>
<p>一次生成多个 class 选择器，如 <code>.box1.box2.box3</code>：</p>
<pre><code>&lt;div class=&quot;box1 box2 box3&quot;&gt;&lt;/div&gt;
</code></pre>
<p><code>p.box1.box2.box3</code>：</p>
<pre><code>&lt;p class=&quot;box1 box2 box3&quot;&gt;&lt;/p&gt;
</code></pre>
<ul>
<li>带有 ID 选择器，如 <code>#gray</code>，默认生成 id 为 gray 的 div：</li>
</ul>
<pre><code>&lt;div id=&quot;gray&quot;&gt;&lt;/div&gt;
</code></pre>
<p>如果要生成其它标签 id 为 gray，则 <code>p#gray</code>：</p>
<pre><code>&lt;p id=&quot;gray&quot;&gt;&lt;/p&gt;
</code></pre>
<p>既有类选择器，又有 id 选择器，如 <code>p.box1.box2#gray</code>：</p>
<pre><code>&lt;p class=&quot;box1 box2&quot; id=&quot;gray&quot;&gt;&lt;/p&gt;
</code></pre>
<ul>
<li><code>[]</code> 表示属性，如 <code>ul&gt;li&gt;a[href=&quot;#&quot;]</code>：</li>
</ul>
<pre><code>&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<ul>
<li><code>$</code> 表示自增，如 <code>div{$}*3</code>：</li>
</ul>
<pre><code>&lt;div&gt;1&lt;/div&gt;
&lt;div&gt;2&lt;/div&gt;
&lt;div&gt;3&lt;/div&gt;
</code></pre>
<p><code>div.gray$*3</code>：</p>
<pre><code>&lt;div class=&quot;gray1&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;gray2&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;gray3&quot;&gt;&lt;/div&gt;
</code></pre>
<p><code>p.gray${$}*3</code>：</p>
<pre><code>&lt;p class=&quot;gray1&quot;&gt;1&lt;/p&gt;
&lt;p class=&quot;gray2&quot;&gt;2&lt;/p&gt;
&lt;p class=&quot;gray3&quot;&gt;3&lt;/p&gt;
</code></pre>
<p><code>ul&gt;li.gray${Hello$}*3</code>：</p>
<pre><code>&lt;ul&gt;
    &lt;li class=&quot;gray1&quot;&gt;Hello1&lt;/li&gt;
    &lt;li class=&quot;gray2&quot;&gt;Hello2&lt;/li&gt;
    &lt;li class=&quot;gray3&quot;&gt;Hello3&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<h2 id="css">CSS</h2>
<p>CSS 中一般取每个单词首字母，然后 Tab 即可自动补全/生成：</p>
<ul>
<li><code>w200</code>：</li>
</ul>
<pre><code>width: 200px;
</code></pre>
<ul>
<li><code>h200</code>：</li>
</ul>
<pre><code>height: 200px;
</code></pre>
<ul>
<li><code>lh26px</code>：</li>
</ul>
<pre><code>line-height: 26px;
</code></pre>
<ul>
<li><code>ti2em</code>：</li>
</ul>
<pre><code>text-indent: 2em;
</code></pre>
<ul>
<li><code>tdn</code>：</li>
</ul>
<pre><code>text-decoration: none;
</code></pre>
<ul>
<li><code>tac</code>：</li>
</ul>
<pre><code>text-align: center;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 选择器.md]]></title>
        <id>http://blog.kuranado.com/post/css-xuan-ze-qi-md/</id>
        <link href="http://blog.kuranado.com/post/css-xuan-ze-qi-md/">
        </link>
        <updated>2020-09-30T00:14:07.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="基础选择器">基础选择器</h2>
<h3 id="标签选择器">标签选择器</h3>
<pre><code>/** 选择所有 p 标签 **/
p {
    color: red;
}
</code></pre>
<h3 id="类选择器">类选择器</h3>
<pre><code>/** 选择所有 class 属性值为 red 的标签 **/
.red {
    color: red;
}
&lt;p class=&quot;red&quot;&gt;Hello&lt;/p&gt;
</code></pre>
<h3 id="类选择器-多类名">类选择器-多类名</h3>
<pre><code>.box {
    width: 100px;
    height: 100px;
    font-size: 35px;
}
.red {
    color: red;
}
.green {
    color: green;
}
&lt;div class=&quot;box red&quot;&gt;红色&lt;/div&gt;
&lt;div class=&quot;box green&quot;&gt;绿色&lt;/div&gt;
&lt;div class=&quot;box red&quot;&gt;红色&lt;/div&gt;
</code></pre>
<h3 id="id-选择器">ID 选择器</h3>
<pre><code>#pink {
    color: pink;
}
&lt;p id=&quot;pink&quot;&gt;Hello&lt;/p&gt;
</code></pre>
<h3 id="通配符选择器">通配符选择器</h3>
<pre><code>/** 选择页面所有标签 **/
* {
    maring: 0;
    padding: 0;
}
</code></pre>
<h2 id="复合选择器">复合选择器</h2>
<h3 id="后代选择器又称包含选择器重要">后代选择器（又称包含选择器，重要）</h3>
<pre><code>/** 选择 ol 下的所有 li 标签（包括子元素、孙子元素、重孙等） **/
ol li {
    color: pink;
}
</code></pre>
<h3 id="子选择器重要">子选择器（重要）</h3>
<pre><code>/** 只选择第一代子元素（只选择亲儿子） **/
div &gt; a {
    color: red;
}
</code></pre>
<h3 id="并集选择器重要">并集选择器（重要）</h3>
<pre><code>/** 选择 div 标签、 p 标签和 .nav 下的 ul 下的 li 标签 **/
div, 
p, 
.nav ul li {
    color: red;
}
</code></pre>
<h3 id="伪类选择器">伪类选择器</h3>
<h4 id="链接伪类选择器">链接伪类选择器</h4>
<pre><code>/** 选择所有未被点击过的链接（不常用，一般直接用 a 标签选择器选择） **/
a:link {
    color: black;
}
/** 选择所有点击过的链接 **/
a:visited {
    color: orange;
}
/** 选择鼠标悬浮的链接，最常用 **/
a:hover {
    color: blue;
}
/** 选择鼠标按下，还没有抬起的链接 **/
a:active {
    color: green;
}
</code></pre>
<p>一般只会用到 a:hover 选择器，如果 4 个链接伪类选择器都要使用，则一定要按照 <strong>LVHA</strong> 的先后顺序定义，否则将不会生效</p>
<h4 id="focus-伪类选择器">focus 伪类选择器</h4>
<pre><code>/** 选择获取焦点的表单元素 **/
input:focus {
    background-color: yellow;
}
</code></pre>
<h2 id="选择器权重优先级">选择器权重（优先级）</h2>
<ul>
<li>!import &gt; 行内样式 &gt; ID 选择器 &gt; 类选择器，伪类选择器 &gt; 标签选择器 &gt; 继承或者 <code>*</code></li>
</ul>
<table>
<thead>
<tr>
<th>选择器</th>
<th>权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>继承或者 <code>*</code></td>
<td>0 0 0 0</td>
</tr>
<tr>
<td>标签选择器，伪元素选择器</td>
<td>0 0 0 1</td>
</tr>
<tr>
<td>类选择器，伪类选择器，属性选择器（CSS3）</td>
<td>0 0 1 0</td>
</tr>
<tr>
<td>ID 选择器</td>
<td>0 1 0 0</td>
</tr>
<tr>
<td>行内样式</td>
<td>1 0 0 0</td>
</tr>
<tr>
<td>!import</td>
<td>无穷大</td>
</tr>
</tbody>
</table>
<ul>
<li>浏览器为 a 标签默认指定了蓝色、带下划线的样式，如：</li>
</ul>
<pre><code>body {
    color: red;
}
&lt;body&gt;
    &lt;!-- 显示为蓝色带下划线，因为浏览器默认为 a 标签指定了蓝色下划线，而标签选择器优先级 &gt; 继承，所以最终显示为蓝色带下划线 --&gt;
    &lt;a href=&quot;#&quot;&gt;链接&lt;/a&gt;
&lt;/body&gt;
</code></pre>
<ul>
<li>复合选择器会有权重叠加，如：</li>
</ul>
<pre><code>ul li {
    color: red;
}
li {
    color: green;
}
&lt;ul&gt;
    &lt;!-- 显示为红色，而不是绿色，因为标签选择器的权重为 0 0 0 1，所以复合选择器 ul li 的权重为 0 0 0 1 + 0 0 0 1 = 0 0 0 2，0 0 0 2 &gt; 标签选择器 li 的权重 0 0 0 1，所以最后显示为红色而不是绿色 --&gt;
    &lt;li&gt;Hello&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>再如：</p>
<pre><code>.nav li {
    color: pink;
}
ul li {
    color: red;
}
li {
    color: green;
}
&lt;ul class=&quot;nav&quot;&gt;
    &lt;!-- 显示为粉色，不是红色也不是绿色，复合选择器 .nav li 的权重为 0 0 1 0 + 0 0 0 1 = 0 0 1 1，该值大于复合选择器 ul li 的权重 0 0 0 2，也大于标签选择器 li 的权重 0 0 0 1，所以最后显示为粉色 --&gt;
    &lt;li&gt;Hello&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<ul>
<li>权重虽然会有叠加，但一定不会有进位，如 0 0 0 9 + 0 0 0 2 = 0 0 0 11 而不是 0 0 1 1</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同时管理 GitHub/GitLab/Gitee 等多个 SSH  Key.md]]></title>
        <id>http://blog.kuranado.com/post/githubgitlab-tong-shi-guan-li-duo-ge-ssh-keymd/</id>
        <link href="http://blog.kuranado.com/post/githubgitlab-tong-shi-guan-li-duo-ge-ssh-keymd/">
        </link>
        <updated>2020-09-29T01:17:21.000Z</updated>
        <content type="html"><![CDATA[<p>平时在 GitHub 拉取、提交代码时都是通过本地放置 <code>~/.ssh/id_rsa</code> 私钥，GitHub 账号下配置公钥 <code>id_rsa.pub</code> 完成的<br>
但除了 GitHub，有时候还需要用到 GitLab、Gitee 等代码托管平台，如何在同一台电脑上配置多对秘钥呢？</p>
<h2 id="生成-ssh-key">生成 ssh key</h2>
<p>生成并添加第一个ssh key</p>
<pre><code>cd ~/.ssh
ssh-keygen -t rsa -C &quot;youremail@163.com&quot;
</code></pre>
<p>这时可以一路回车，不输入任何字符，将自动生成 id_rsa 和 id_rsa.pub 文件<br>
然后把 id_rsa.pub 内容添加到 GitHub 账号下，私钥保留在 <code>~/.ssh</code> 目录</p>
<p>生成并添加第二个ssh key</p>
<pre><code>$ ssh-keygen -t rsa -C &quot;youremail@163.com&quot;
</code></pre>
<p>注意，这时不能一路回车，否则邮箱将覆盖上一次生成的 ssh key，给这个文件起一个名字， 比如叫 id_rsa_gitlab, 相应的也会生成一个 id_rsa_gitlab.pub 文件。</p>
<p>此时查看 <code>~/.ssh</code> 下的目录文件，发现多了 id_rsa_gitlab 和 id_rsa_gitlab.pub 两个文件<br>
同样，将 id_rsa_gitlab.pub 文件内容复制到 GitLab 账号下，id_rsa_gitlab 文件留在 <code>~/.ssh</code> 目录下</p>
<h2 id="增加修改配置文件">增加/修改配置文件</h2>
<p>在 <code>~/.ssh</code> 目录下新建一个 config 文件</p>
<pre><code>touch config
</code></pre>
<p>并添加以下内容</p>
<pre><code># gitlab
Host gitlab.com
    HostName gitlab.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
# github
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github
</code></pre>
<p><strong>需要注意的是，公司一般都是自建 GitLab，如公司自建 GitLab 地址为 <code>http://gitlab.companyname.com</code>，则 Host 和 HostName 就需要配置为 <code>gitlab.companyname.com</code> 才可以</strong>：</p>
<pre><code># github
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
# gitlab
Host gitlab.companyname.com
    HostName gitlab.companyname.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_gitlab
</code></pre>
<p>同理可以继续为其它代码托管平台生成公私钥</p>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601342260.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="测试">测试</h2>
<pre><code>$ ssh -T git@github.com
</code></pre>
<p>如果输出：Hi xxx You've successfully authenticated, but GitHub does not provide shell access.，说明成功的连上 github 了，以后可以自由从 GitHub 克隆、拉取、提交代码<br>
但是如果提示：Bad owner or permissions on /home/jing/.ssh/config，则是因为 <code>~/.ssh/config</code> 文件的权限不对，执行 <code>chmod 600 ~/.ssh/config</code> 修改权限即可</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="http://xuyuan923.github.io/2014/11/04/github-gitlab-ssh/">GitHub/GitLab 同时管理多个ssh key</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 泛型总结.md]]></title>
        <id>http://blog.kuranado.com/post/java-fan-xing-zong-jie-md/</id>
        <link href="http://blog.kuranado.com/post/java-fan-xing-zong-jie-md/">
        </link>
        <updated>2020-09-28T09:30:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="泛型类">泛型类</h2>
<p>我们知道使用泛型可以使类型错误在编译时就被检测到，从而能够增加程序的健壮性。</p>
<h3 id="定义泛型类">定义泛型类</h3>
<pre><code>public class Generic&lt;T&gt; {

    private T key;

    public Generic(T key) {
        this.key = key;
    }

    public T getKey() {
        return key;
    }

    public void setKey(T key) {
        this.key = key;
    }
}
</code></pre>
<h3 id="实例化泛型类">实例化泛型类</h3>
<pre><code>Generic&lt;String&gt; genericString = new Generic&lt;&gt;(&quot;abc&quot;);
Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
System.out.println(genericString.getKey());
System.out.println(genericInteger.getKey());
</code></pre>
<p>需要注意的是泛型的类型参数必须是<code>引用类型</code>（类、接口、数组等都是 <code>引用类型</code>）而不能是简单类型，如 <code>Generic&lt;int&gt; generic = new Generic&lt;&gt;(123);</code> 是不允许的。</p>
<p>当然和 List 等一样，实例化泛型类可以传入任意类型而并不一定非要传入泛型类实参，只不过既然我们将类定义为泛型类，其目的就是希望开发者们能够传入确定的类型实参，以增加程序健壮性：</p>
<pre><code>Generic generic = new Generic(&quot;abc&quot;);
Generic generic2 = new Generic(123);
Generic generic3 = new Generic(true);
</code></pre>
<h2 id="泛型接口">泛型接口</h2>
<h3 id="定义泛型接口">定义泛型接口</h3>
<pre><code>public interface Generator&lt;T&gt; {
    public T fun();
}
</code></pre>
<h3 id="实现泛型接口">实现泛型接口</h3>
<pre><code>public class PersonGenerator&lt;T&gt; implements Generator&lt;T&gt; {
    @Override
    public T fun() {
        return null;
    }
}
</code></pre>
<p>可见当类实现泛型接口时若没有传入泛型实参，则需要将泛型也加到类的定义中，否则像下面的代码将会出现编译错误：</p>
<pre><code>public class PersonGenerator implements Generator&lt;T&gt; {
    @Override
    public T fun() {
        return null;
    }
}
</code></pre>
<p>如果实现泛型接口时传入了泛型实参，则该类中所有使用泛型的地方都要替换成传入的泛型实参：</p>
<pre><code>public class PersonGenerator implements Generator&lt;String&gt; {
    @Override
    public String fun() {
        return null;
    }
}
</code></pre>
<h2 id="泛型方法">泛型方法</h2>
<p>为了判断数组中是否包含某值写了如下两个重载方法：</p>
<pre><code>public static void main(String[] args) {
    Integer[] integers = new Integer[]{1, 2, 3};
    String[] strings = new String[]{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
    System.out.println(contains(2, integers));
    System.out.println(contains(&quot;b&quot;, strings));
}
public static boolean contains(Integer integer, Integer[] integers) {
    return Arrays.asList(integers).contains(integer);
}
public static boolean contains(String s, String[] strings) {
    return Arrays.asList(strings).contains(s);
}
</code></pre>
<p>但如果还想要判断 Float 类型的数组中是否包含某个值就有需要编写一个重载方法，好在我们可以通过泛型方法有效的避免这些冗余的方法：</p>
<pre><code>public static void main(String[] args) {
    Integer[] integers = new Integer[]{1, 2, 3};
    String[] strings = new String[]{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
    Float[] floats = new Float[]{0.1f, 0.2f, 0.3f};
    System.out.println(contains(2, integers));
    System.out.println(contains(&quot;b&quot;, strings));
    System.out.println(contains(0.2f, floats));
}
public static &lt;T&gt; boolean contains(T t, T[] ts) {
    return Arrays.asList(ts).contains(t);
}
</code></pre>
<p>需要注意的是方法返回值前需要包含形式参数，如 <code>&lt;T&gt;</code>， <strong>否则该方法不能被称为泛型方法</strong>，编译也将出错。<br>
值得一提的是，如果同时保留以下两个方法：</p>
<pre><code>public static &lt;T&gt; boolean contains(T t, T[] ts) {
    return Arrays.asList(ts).contains(t);
}
public static boolean contains(Integer integer, Integer[] integers) {
    return Arrays.asList(integers).contains(integer);
}
</code></pre>
<p><code>contains(&quot;b&quot;, strings)</code> 会自动匹配泛型方法，而 <code>contains(2, integers)</code> 匹配的是普通方法而不是泛型方法。</p>
<h2 id="泛型通配符">泛型通配符</h2>
<h3 id="无限定通配符-unbounded-wildcard">无限定通配符-Unbounded Wildcard</h3>
<p>我们知道 Integer、Double、Float 等都是 Number 类的子类，所以下面的代码完全没问题：</p>
<pre><code>public static void main(String[] args) {
    printMsg(123);
}
public static void printMsg(Number number) {
    System.out.println(number);
}
</code></pre>
<p>基本类型 123 被自动装箱成 Integer 类型，而 Integer 又是 Number 类的子类，所以可以作为 printMsg 方法的实参。</p>
<p>但泛型类 <code>Generic&lt;Number&gt;</code> 和 <code>Generic&lt;Integer&gt;</code> 可以认为是两个完全没有关联的新类型，两者之间不具有任何继承关系，所以下面的代码会出现编译错误：</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Number&gt; genericNumber = new Generic&lt;&gt;(123);
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    printMsg(genericNumber);  // 编译通过
    printMsg(genericInteger); // 编译出错，因为 Generic&lt;Integer&gt; 和 Generic&lt;Number&gt; 二者之间没有任何继承关系
}
public static void printMsg(Generic&lt;Number&gt; generic) {
    System.out.println(generic.getKey());
}
</code></pre>
<p>而如果就是希望 printMsg 方法既能接收 <code>Generic&lt;Number&gt;</code> 又能够接收 <code>Generic&lt;Integer&gt;</code>类型，甚至是能够接收传入了任意实参类型的 <code>Generic</code> 泛型类（如 <code>Generic&lt;String&gt;</code>、<code>Generic&lt;Random&gt;</code>等），则需要用到泛型通配符 <code>?</code> 了：</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Number&gt; genericNumber = new Generic&lt;&gt;(123);
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    printMsg(genericNumber);  // 编译通过
    printMsg(genericInteger); // 编译通过
}
public static void printMsg(Generic&lt;?&gt; generic) {
    System.out.println(generic.getKey());
}
</code></pre>
<h3 id="上限通配符-upper-bounded-wildcard">上限通配符-Upper Bounded Wildcard</h3>
<p>为泛型添加上边界，即传入的类型实参必须是指定类型或指定类型的子类。使用 <code>extends</code> 指定上限通配符</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Number&gt; genericNumber = new Generic&lt;&gt;(123);
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    Generic&lt;Float&gt; genericFloat = new Generic&lt;&gt;(0.5f);
    Generic&lt;String&gt; genericString = new Generic&lt;&gt;(&quot;Hello&quot;);
    printMsg(genericNumber);  // 编译通过
    printMsg(genericInteger); // 编译通过
    printMsg(genericFloat);   // 编译通过
    printMsg(genericString);  // 编译出错
}
public static void printMsg(Generic&lt;? extends Number&gt; generic) {
    System.out.println(generic.getKey());
}
</code></pre>
<p>因为 <code>Generic&lt;? extends Number&gt; generic</code> 指定了传入的类型实参必须是 Number 类或 Number 类的子类，所以<code>printMsg(genericString);</code> 出错，因为 String 不是 Number 的子类</p>
<h3 id="下限通配符-lower-bounded-wildcard">下限通配符-Lower Bounded Wildcard</h3>
<p>和上限通配符类似，下限通配符使用 <code>super</code> 关键字实现：</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Number&gt; genericNumber = new Generic&lt;&gt;(123);
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    Generic&lt;Float&gt; genericFloat = new Generic&lt;&gt;(0.5f);
    Generic&lt;String&gt; genericString = new Generic&lt;&gt;(&quot;Hello&quot;);
    printMsg(genericNumber);  // 编译通过
    printMsg(genericInteger); // 编译通过
    printMsg(genericFloat);   // 编译出错
    printMsg(genericString);  // 编译出错
}
public static void printMsg(Generic&lt;? super Integer&gt; generic) {
    System.out.println(generic.getKey());
}
</code></pre>
<p>因为 <code>Generic&lt;? super Integer&gt; generic</code> 指定了传入的类型实参必须是 Integer 类或 Integer 类的父类，所以 <code>printMsg(genericFloat);</code> 和 <code>printMsg(genericString);</code> 出现编译错误，因为 Float 和 String 都不是 Integer 类的父类</p>
<h2 id="类型擦除-type-erasure">类型擦除-Type Erasure</h2>
<p>Java 的泛型只在编译阶段有效，编译过程中正确检验泛型结果后，会将泛型相关信息擦除，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法，即泛型信息不回进入运行时阶段：</p>
<pre><code>public static void main(String[] args) {
    Generic&lt;Integer&gt; genericInteger = new Generic&lt;&gt;(123);
    Generic&lt;String&gt; genericString= new Generic&lt;&gt;(&quot;Hello&quot;);
    System.out.println(genericInteger.getClass() == genericString.getClass());  // 返回 true
}
</code></pre>
<p>结果返回 <code>true</code> ，说明虽然编译时 <code>Generic&lt;Integer&gt;</code> 和 <code>Generic&lt;String&gt;</code> 是不同的类型，但因为泛型的类型擦除，所以编译后 <code>genericInteger</code> 和 <code>genericString</code> 为相同的类型</p>
<h2 id="命名规则">命名规则</h2>
<p>JDK 中文档经常能看到 <code>T</code>、<code>K</code>、<code>V</code>、<code>E</code>、<code>N</code> 等类型参数，而我们在编写泛型相关代码时，这些符号都可以随意使用，实际上还可以使用 JDK 文档中从来没用过的符号，如 <code>A</code>、<code>B</code>、<code>C</code> 等，但却极力不推荐这样做</p>
<p>JDK 文档中各符号的含义：</p>
<ul>
<li>T：类型</li>
<li>K：键</li>
<li>V：值</li>
<li>E：元素（如集合类中的元素全部用该符号表示）</li>
<li>N：Number</li>
</ul>
<p>我们应该遵循 JDK 中已有的规范</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://blog.csdn.net/u012152619/article/details/47253811">java泛型详解</a><br>
<a href="https://blog.csdn.net/s10461/article/details/53941091/">java 泛型详解-绝对是对泛型方法讲解最详细的，没有之一</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[适配器模式.md]]></title>
        <id>http://blog.kuranado.com/post/gua-pei-qi-mo-shi-md/</id>
        <link href="http://blog.kuranado.com/post/gua-pei-qi-mo-shi-md/">
        </link>
        <updated>2020-09-28T04:52:46.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>适配器模式又叫 Adapter 模式</p>
</blockquote>
<h2 id="什么是适配器模式">什么是适配器模式</h2>
<blockquote>
<p>将一个类的接口转换成客户希望的另一个接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的类可以在一起工作</p>
</blockquote>
<p>适配器模式中的角色：</p>
<ul>
<li>Target：目标接口。客户所期望的接口，可以是具体的类，也可以是抽象类或接口</li>
<li>Adaptee：需要适配的类</li>
<li>Adapter：适配器。通过包装一个需要适配的对象，把原接口转换成目标接口</li>
</ul>
<h2 id="栗子">栗子</h2>
<p>网购一块键盘，收到货时却是这样的：</p>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601268804.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>......，黑心店家竟然发了块 PS2 接口的键盘</p>
<p>可把我给气坏了！！！</p>
<figure data-type="image" tabindex="2"><img src="http://image.kuranado.com/blog/1601268819.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>因为笔记本接口是这样的：</p>
<figure data-type="image" tabindex="3"><img src="http://image.kuranado.com/blog/1601268843.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>只有 USB 接口</p>
<p>黑心店家不给退货，没办法，翻箱倒柜，DIY 了一个 PS2 转 USB 的转换器：</p>
<figure data-type="image" tabindex="4"><img src="http://image.kuranado.com/blog/1601268890.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>最终如愿以偿的用上了新键盘</p>
<figure data-type="image" tabindex="5"><img src="http://image.kuranado.com/blog/1601268901.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>好了，就以这个场景为例，简单写下代码吧：</p>
<h3 id="adaptee">Adaptee</h3>
<p>拥有 PS2 接口的键盘是需要被适配的类</p>
<pre><code>package com.kuranado.adaptor;

/**
 * PS2 键盘（要被适配的对象）
 * @Author: Xinling Jing
 * @Date: 2018-12-23 13:28
 */
public class PS2KeyboardAdaptee {

    public void specificRequest() {
        System.out.println(&quot;处理打字请求&quot;);
    }

}
</code></pre>
<h3 id="target">Target</h3>
<p>客户（也就是笔记本）所期望的 USB 接口</p>
<pre><code>package com.kuranado.adaptor;

/**
 * USB 接口（目标接口，客户所期望的接口）
 * @Author: Xinling Jing
 * @Date: 2018-12-23 13:33
 */
public interface USBTarget {

    void handleRequest();

}
</code></pre>
<h3 id="adapter">Adapter</h3>
<p>PS2 和 USB 的转换器，通过组合的方式包装了被适配的对象，并调用被适配对象所具有的功能。<br>
因为客户端只关心 USB 接口的使用，所以需要实现 USBTarget</p>
<pre><code>package com.kuranado.adaptor;

/**
 * PS2 到 USB 转接口（适配器）
 * @Author: Xinling Jing
 * @Date: 2018-12-23 13:43
 */
public class PS22USBAdapter implements USBTarget {

    private PS2KeyboardAdaptee adaptee;

    @Override
    public void handleRequest() {
        adaptee.specificRequest();
    }

    public PS22USBAdapter(PS2KeyboardAdaptee adaptee) {
        this.adaptee = adaptee;
    }
}
</code></pre>
<h3 id="client">Client</h3>
<p>客户端调用 Target 接口</p>
<pre><code>package com.kuranado.adaptor;

/**
 * 电脑客户端类
 * @Author: Xinling Jing
 * @Date: 2018-12-23 13:31
 */
public class ComputerClient {

    public void test(USBTarget target) {
        target.handleRequest();
    }

    public static void main(String[] args) {
        ComputerClient client = new ComputerClient();
        PS2KeyboardAdaptee adaptee = new PS2KeyboardAdaptee();
        USBTarget target = new PS22USBAdapter(adaptee);
        client.test(target);
    }
}
</code></pre>
<p>程序运行效果：</p>
<pre><code>处理打字请求
</code></pre>
<p>总结适配器模式各个角色的的关系如下图：</p>
<figure data-type="image" tabindex="6"><img src="http://image.kuranado.com/blog/1601268916.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<h2 id="实际业务中的栗子">实际业务中的栗子</h2>
<p>上面的例子比较简单，但真正业务中该如何应用适配器模式呢？此处把《研磨设计模式》中的例子拿过来与大家一起学习</p>
<h3 id="1-logmodel日志类用于保存日志相关信息">1. LogModel：日志类，用于保存日志相关信息：</h3>
<pre><code>/**
 * 日志类
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:01
 */
@Data
public class LogModel implements Serializable {

    private static final long serialVersionUID = -2324527735778406382L;
   
    private String logId;
    /**
     * 日志内容
     */
    private String logContent;
    /**
     * 操作人
     */
    private String operateUser;
    /**
     * 操作时间
     */
    private String operateTime;

    public LogModel() {
    }

    public LogModel(String logId, String logContent, String operateUser, String operateTime) {
        this.logId = logId;
        this.logContent = logContent;
        this.operateUser = operateUser;
        this.operateTime = operateTime;
    }
}
</code></pre>
<h3 id="2-logfileoperateapi从文件中读取日志或向文件中写入日志的接口">2. LogFileOperateApi：从文件中读取日志或向文件中写入日志的接口：</h3>
<pre><code>/**
 *
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:08
 */
public interface LogFileOperateApi {

    List&lt;LogModel&gt; readLogFile();

    void writeLogFile(List&lt;LogModel&gt; logModels);
}
</code></pre>
<h3 id="3-logfileoperateapi-接口的实现类">3. LogFileOperateApi 接口的实现类：</h3>
<pre><code>/**
 *
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:10
 */
public class LogFileOperateApiImpl implements LogFileOperateApi {

    // 默认的日志路径
    private String logFilePathName = &quot;/Users/jing/Code/GitHub/DesignPatterns/src/main/resources/AdaptorLog.log&quot;;

    public LogFileOperateApiImpl(String logFilePathName) {
        if (logFilePathName != null &amp;&amp; logFilePathName.trim().length() &gt; 0) {
            this.logFilePathName = logFilePathName;
        }
    }

    @Override
    @SuppressWarnings(&quot;unchecked&quot;)
    public List&lt;LogModel&gt; readLogFile() {
        File file;
        ObjectInputStream objectInputStream = null;
        List&lt;LogModel&gt; logModels = null;
        try {
            file = new File(logFilePathName);
            if (file.exists()) {
                InputStream inputStream = new FileInputStream(file);
                if (inputStream.available() != 0) {
                    objectInputStream = new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)));
                    logModels = (List&lt;LogModel&gt;) objectInputStream.readObject();
                } else {
                    return null;
                }
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            if (objectInputStream != null) {
                try {
                    objectInputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return logModels;
    }

    @Override
    public void writeLogFile(List&lt;LogModel&gt; logModels) {
        ObjectOutputStream objectOutputStream = null;
        File file;
        try {
            file = new File(logFilePathName);
            objectOutputStream = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
            objectOutputStream.writeObject(logModels);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (objectOutputStream != null) {
                try {
                    objectOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
</code></pre>
<h3 id="4-client">4. Client:</h3>
<pre><code>/**
 * 客户端
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:01
 */
public class Client {

    public static void main(String[] args) {

        LogModel logModel = new LogModel(&quot;0001&quot;, &quot;这是第一条测试日志&quot;, &quot;JING&quot;, &quot;2018-08-03 09:44:35&quot;);

        List&lt;LogModel&gt; logModels = new ArrayList&lt;&gt;();
        logModels.add(logModel);

        LogFileOperateApi logFileOperateApi = new LogFileOperateApiImpl(&quot;&quot;);
        logFileOperateApi.writeLogFile(logModels);
        List&lt;LogModel&gt; models = logFileOperateApi.readLogFile();
        System.out.println(models);
    }
}
</code></pre>
<p>客户端创建了一个日志对象，并将该日志对象写入了文件，然后从文件中读取出日志，并打印出来：</p>
<pre><code>[LogModel(logId=0001, logContent=这是第一条测试日志, operateUser=JING, operateTime=2018-08-03 09:44:35)]
</code></pre>
<p>这样程序正常运行着，可是突然有一天 leader 说为了方便日志管理，要求把日志存储到数据库中，于是你快速定义了将日志存取到数据库的接口：</p>
<h3 id="5-logdboperateapi">5. LogDbOperateApi:</h3>
<pre><code>/**
 *
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:15
 */
public interface LogDbOperateApi {

    /**
     * 将日志保存到数据库
     * @param logModel
     */
    void createLog(LogModel logModel);

    /**
     * 更新数据库中的日志
     * @param logModel
     */
    void updateLog(LogModel logModel);

    /**
     * 删除数据库中的日志
     * @param logModel
     */
    void removeLog(LogModel logModel);

    /**
     * 获取数据库中的所有日志
     * @return
     */
    List&lt;LogModel&gt; getAllLog();

}
</code></pre>
<p>然后实现该接口：</p>
<h3 id="6-logdboperateapiimpl">6. LogDbOperateApiImpl：</h3>
<pre><code>/**
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:48
 */
public class LogDbOperateApiImpl implements LogDbOperateApi {

    @Override
    public void createLog(LogModel logModel) {
        System.out.println(&quot;成功插入日志:&quot; + logModel.toString() + &quot;到数据库中&quot;);
    }

    @Override
    public void updateLog(LogModel logModel) {
        System.out.println(&quot;成功更新数据库中日志:&quot; + logModel.toString());
    }

    @Override
    public void removeLog(LogModel logModel) {
        System.out.println(&quot;成功删除数据库中日志:&quot; + logModel.toString() + &quot;到数据库中&quot;);
    }

    @Override
    public List&lt;LogModel&gt; getAllLog() {
        System.out.println(&quot;已找到数据库中的所有日志&quot;);
        return null;
    }
}
</code></pre>
<h3 id="7-client">7. Client:</h3>
<pre><code>/**
 * 客户端
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:01
 */
public class Client {

    public static void main(String[] args) {

        LogModel logModel = new LogModel(&quot;0001&quot;, &quot;这是一条测试日志&quot;, &quot;JING&quot;, &quot;2018-08-03 09:44:35&quot;);
        LogDbOperateApi logDbOperateApi = new LogDbOperateApiImpl();
        logDbOperateApi.createLog(logModel);
    }
}
</code></pre>
<p>程序运行结果：</p>
<pre><code>成功插入日志:LogModel(logId=0001, logContent=这是一条测试日志, operateUser=JING, operateTime=2018-08-03 09:44:35)到数据库中
</code></pre>
<p><strong>到这里我们把 LogFileOperateApi 叫做第一版接口，LogDbOperateApi 叫做第二版接口</strong></p>
<p>好啦，所有的工作都做完了，终于可以开开心心的去撩妹啦</p>
<p>刚和妹子约好晚上共度良宵，leader 却又找到了你，因为他觉得还 是 把 日 志 存 储 到 文 件 中 比 较 好！！！</p>
<figure data-type="image" tabindex="7"><img src="http://imgblog.kuranado.com/womeishengqi.jpeg" alt="" loading="lazy"></figure>
<p>此刻内心想法：I have a line of MMP to tell you when the perfect timing comes to us. （╯' - ')╯︵ ┻━┻</p>
<p>工作还得继续，硬着头皮想到了这么几个解决办法：</p>
<ul>
<li>方法一：修改客户端调用，重新修改为调用第一版的接口</li>
<li>方法二：按照第二版的接口重新实现一个将日志存取到文件的实现类</li>
<li>方法三：不修改客户端调用，编写一个适配器，将第二版的接口适配到第一版的实现上，也就是使用适配器模式</li>
</ul>
<p>这三个方法哪个更可取呢？</p>
<ul>
<li>方法一：现在所有的业务都使用第二版接口，要更改为第一版接口的话，即要更改整个项目所有地方，费时费力</li>
<li>方法二：已经完成的功能何必再重做一遍呢</li>
<li>方法三：复用已有代码，省时省力</li>
</ul>
<h3 id="8-adapter">8. Adapter</h3>
<pre><code>/**
 *
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:59
 */
public class Adapter implements LogDbOperateApi {

    private LogFileOperateApi adaptee;

    public Adapter(LogFileOperateApi adaptee) {
        this.adaptee = adaptee;
    }

    @Override
    public void createLog(LogModel logModel) {
        List&lt;LogModel&gt; logModels = adaptee.readLogFile();
        logModels.add(logModel);
        adaptee.writeLogFile(logModels);
    }

    @Override
    public void updateLog(LogModel logModel) {
        List&lt;LogModel&gt; logModels = adaptee.readLogFile();
        for (int i = 0; i &lt; logModels.size(); i ++) {
            if (logModels.get(i).getLogId().equals(logModel.getLogId())) {
                logModels.set(i, logModel);
                break;
            }
        }
        adaptee.writeLogFile(logModels);
    }

    @Override
    public void removeLog(LogModel logModel) {
        List&lt;LogModel&gt; logModels = adaptee.readLogFile();
        logModels.remove(logModel);
    }

    @Override
    public List&lt;LogModel&gt; getAllLog() {
        return adaptee.readLogFile();
    }
}
</code></pre>
<h3 id="9-client">9. Client</h3>
<p>此时客户端只要做一点小修改即可：</p>
<pre><code>/**
 * 客户端
 * @Author: Xinling Jing
 * @Date: 2018-12-23 19:01
 */
public class Client {

    public static void main(String[] args) {

        LogModel logModel = new LogModel(&quot;0002&quot;, &quot;这是第二条测试日志&quot;, &quot;JING&quot;, &quot;2019-09-04 10:55:46&quot;);
        List&lt;LogModel&gt; logModels = new ArrayList&lt;&gt;();
        logModels.add(logModel);
        LogFileOperateApi logFileOperateApi = new LogFileOperateApiImpl(&quot;&quot;);
        LogDbOperateApi target = new Adapter(logFileOperateApi);
        target.createLog(logModel);
        System.out.println(target.getAllLog());
    }
}
</code></pre>
<pre><code>[LogModel(logId=0001, logContent=这是第一条测试日志, operateUser=JING, operateTime=2018-08-03 09:44:35), LogModel(logId=0002, logContent=这是第二条测试日志, operateUser=JING, operateTime=2019-09-04 10:55:46)]
</code></pre>
<p>整体结构：</p>
<figure data-type="image" tabindex="8"><img src="http://image.kuranado.com/blog/1601271526.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>第二版接口对应适配器中的 Target，第一版的实现扮演适配器中的 Adaptee。整个适配器模式中最关键的就是 Adapter，它需要实现第二版的接口，但在内部实现的时候通过对象组合的方式调用第一版已经实现的功能。</p>
<p>好啦，这回终于可以结束工作，时间也还早，可以放心的去陪妹子逛街啦！</p>
<h2 id="工作中的应用场景">工作中的应用场景</h2>
<ul>
<li>旧系统的改造和升级</li>
<li>系统维护</li>
</ul>
<h2 id="常见实现">常见实现</h2>
<h3 id="java-io">Java IO</h3>
<ul>
<li>java.io.InputStreamReader(InputStream)：通过适配器将字节流转换为我们需要的字符流</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=HKVZNuZwVhQ&amp;t=1280s&amp;list=PLkQ01vCRt9bUFnXOD66dabj2NM9Wbjhoc&amp;index=7">【GOF23设计模式】 适配器模式</a></li>
<li><a href="https://mrdear.cn/2018/03/14/experience/design_patterns--adapter/">学长博客</a></li>
<li>《研磨设计模式》</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 多线程 - 内存可见性.md]]></title>
        <id>http://blog.kuranado.com/post/java-duo-xian-cheng-nei-cun-ke-jian-xing-md/</id>
        <link href="http://blog.kuranado.com/post/java-duo-xian-cheng-nei-cun-ke-jian-xing-md/">
        </link>
        <updated>2020-09-27T14:45:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="jmm">JMM</h2>
<p><code>JMM(Java Memory Model)</code> 即 Java 内存模型，描述了 Java 程序中各种变量（线程共享变量）的访问规则，以及在 <code>JVM</code>中将变量存储到内存和从内存中读取出变量这样的底层细节，JMM 有如下几条规则：</p>
<ul>
<li>所有的变量都存储在<code>主内存</code>中</li>
<li>每个线程都有自己独立的<code>工作内存</code>，里面保存该线程使用到的变量的副本（<code>主内存</code>中该变量的一份拷贝）</li>
<li>线程对<code>共享变量</code>的所有操作都必须在自己的<code>工作内存</code>中进行，不能直接从<code>主内存</code>中读写</li>
<li>不同线程之间无法直接访问其他线程<code>工作内存</code>中的变量，线程间变量值的传递需要通过<code>主内存</code>来完成</li>
</ul>
<figure data-type="image" tabindex="1"><img src="http://image.kuranado.com/blog/1601218014.png?imageMogr2/thumbnail/!70p" alt="" loading="lazy"></figure>
<p>根据上图也可以发现：线程不能直接与<code>主内存</code>进行交互，<code>工作内存</code>负责与线程和<code>主内存</code>进行交互</p>
<h2 id="共享变量">共享变量</h2>
<p>如果一个变量在多个线程的<code>工作内存</code>中都存在副本，那么这个变量就是这几个线程的<code>共享变量</code></p>
<h2 id="可见性">可见性</h2>
<p>一个线程对<code>共享变量</code>值的修改，能够及时被其他线程看到则称这个<code>共享变量</code>在线程之间是可见的</p>
<h2 id="重排序">重排序</h2>
<p>代码书写的顺序与实际执行的顺序不同,指令重排序是编译器或处理器为了提高程序性能而做的优化</p>
<h3 id="as-if-serial语义">as-if-serial语义</h3>
<p>无论如何重排序，程序执行的结果应该与代码顺序执行的结果一致，Java 编译器、运行时和处理器都会保证 Java 在<strong>单线程下</strong>遵循 as-if-serial 语义，所以重排序不会给单线程带来内存可见性问题，但是在多线程中程序交错执行时，重排序可能会造成内存可见性问题</p>
<pre><code>int num1 = 3;
int num2 = 5;
int sum = num1 + num2;
</code></pre>
<p>在单线程中，第 1 行和第 2 行代码可以进行重排序，但第 3 行代码不可以进行重排序，也就是说代码实际执行顺序可能是1 -&gt; 2 -&gt; 3 或 2 -&gt; 1 -&gt; 3，但绝不可能是3 -&gt; 1 -&gt; 2 或 3 -&gt; 2 -&gt; 1，因为这和代码顺序执行的结果不一致，不满足 as-if-serial 语义</p>
<h2 id="实现共享变量可见性">实现共享变量可见性</h2>
<p>要实现共享变量的可见性，必须保证两点：</p>
<ol>
<li>线程修改后的<code>共享变量</code>值能够及时从该线程的<code>工作内存</code>刷新到<code>主内存</code>中</li>
<li>其他线程能够及时把<code>共享变量</code>的最新值从<code>主内存</code>更新到自己的<code>工作内存</code>中</li>
</ol>
<p>而 Java 保证<code>共享变量</code>可见性主要通过 <code>synchronized</code> 或 <code>volatile</code> 关键字实现：</p>
<h3 id="synchronized">synchronized</h3>
<p><code>synchronized</code> 能够实现：</p>
<ul>
<li>原子性（同步）</li>
<li>内存可见性</li>
</ul>
<p><code>JMM</code> 关于 <code>synchronized</code> 的两条规定：</p>
<ul>
<li>线程解锁前，必须把<code>共享变量</code>的最新值刷新到<code>主内存</code>中</li>
<li>线程加锁时，将清空<code>工作内存</code>中共享变量的值，从而使用<code>共享变量</code>时，需要从<code>主内存</code>中重新读取最新的值（注意：加锁与解锁需要是同一把锁）</li>
</ul>
<p>可见 <code>synchronized</code> 的这两条规定刚好满足要实现<code>共享变量</code>可见性所必须要保证的两点</p>
<p><code>synchronized</code> 实现可见性过程如下：</p>
<ol>
<li>获得互斥锁</li>
<li>清空<code>工作内存</code></li>
<li>从<code>主内存</code>拷贝变量的最新副本到<code>工作内存</code></li>
<li>执行代码</li>
<li>将更改后的<code>共享变量</code>的值刷新到<code>主内存</code></li>
<li>释放互斥锁</li>
</ol>
<p>下面上一段代码：</p>
<pre><code>public class Synchronpublic class SynchronizedDemo {
    // 共享变量
    private boolean ready = false;
    private int result = 0;
    private int number = 1;
    // 写操作
    public void write(){
        ready = true; // 1.1
        number = 2; // 1.2
    }
    // 读操作
    public void read(){
        if(ready){ // 2.1
            result = number * 3; // 2.2
        }
        System.out.println(&quot;result的值为：&quot; + result);
    }

    // 内部线程类
    private class ReadWriteThread extends Thread {
        // 根据构造方法中传入的flag参数，确定线程执行读操作还是写操作
        private boolean flag;
        public ReadWriteThread(boolean flag){
            this.flag = flag;
        }
        @Override
        public void run() {
            if(flag){
                // 构造方法中传入true，执行写操作
                write();
            }else{
                // 构造方法中传入false，执行读操作
                read();
            }
        }
    }

    public static void main(String[] args) {
        SynchronizedDemo synDemo = new SynchronizedDemo();
        // 启动线程执行写操作
        synDemo.new ReadWriteThread(true).start();

        // 启动线程执行读操作
        synDemo.new ReadWriteThread(false).start();
    }
}
</code></pre>
<p>执行这段代码输出结果可能为 6，可能为 0，也可能为 3，而不论哪种结果，都可能有多种执行顺序</p>
<p>result = 6 1.1-&gt;1.2-&gt;2.1-&gt;2.2<br>
result = 6 1.1-&gt;2.1-&gt;1.2-&gt;2.2<br>
result = 6 1.2-&gt;1.1-&gt;2.1-&gt;2.2<br>
result = 3 1.1-&gt;2.1-&gt;2.2-&gt;1.2<br>
result = 0 1.2-&gt;2.1-&gt;2.2-&gt;1.1 （1.1 和 1.2 进行了重排序，先执行了 1.2，然后写线程让出 CPU 资源执行读线程 ）<br>
result = 0 1.2-&gt;2.2-&gt;2.1-&gt;1.1 （1.1 和 1.2 进行了重排序，2.1 和 2.2 也进行了重排序）<br>
...</p>
<p>注：代码 2.1 和代码 2.2 也可以进行重排序，因为在单线程中，2.1 和 2.2 无论谁先执行，都不会影响 result 的值</p>
<p>上面的例子简单说明了导致<code>共享变量</code>在线程中不可见的原因可能是线程的交叉执行或重排序，通过 <code>synchronized</code> 可以解决：</p>
<p>导致共享变量在线程间不可见的原因|synchronized解决方案<br>
-|<br>
线程的交叉执行（比如先执行 1.1 后执行 2.1）|原子性，synchronized保证了锁内部代码的原子性，避免了锁内部代码在线程之间交叉执行<br>
重排序结合线程交叉执行|原子性<br>
共享变量更新后的值没有在工作内存与主内存之间及时更新|可见性</p>
<p><code>synchroized</code> 实现可见性代码：</p>
<pre><code>//写操作
public synchronized void write(){
    ready = true;	//1.1
    number = 2;	//1.2
}
//读操作
public synchronized void read(){
    if(ready){	//2.1
        result = number * 3;	//2.2
    }
    System.out.println(&quot;result的值为：&quot; + result);
}
</code></pre>
<p>这样程序的输出结果将总是 6</p>
<h3 id="volatile">volatile</h3>
<p><code>volatile</code> 关键字：</p>
<ul>
<li>能够保证 volatile 变量的可见性</li>
<li>在 JDK 1.5 之后，volatile 变量能够禁止指令重排序</li>
<li>不能保证 volatile 变量复合操作的原子性</li>
</ul>
<p><code>volatile</code> 如何实现内存可见性：</p>
<p>volatile 变量在每次被线程访问时，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最新的值刷新到主内存，这样任何时刻，不同的线程总能看到该变量的最新值</p>
<p>线程写 <code>volatile</code> 变量的过程:</p>
<ol>
<li>改变线程工作内存中 <code>volatile</code> 变量副本的值</li>
<li>将改变后的副本的值从工作内存刷新到主内存</li>
</ol>
<p>线程读 <code>volatile</code> 变量的过程:</p>
<ol>
<li>从主内存中读取 <code>volatile</code> 变量的最新值到线程的工作内存中</li>
<li>从工作内存中读取 <code>volatile</code> 变量的副本</li>
</ol>
<p>上代码：</p>
<pre><code>public class VolatileDemo {

    private volatile int number = 0;
    private Lock lock = new ReentrantLock();

    public void increase() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        this.number++;
    }

    public int getNumber() {
        return this.number;
    }

    public static void main(String[] args) {
        VolatileDemo volatileDemo = new VolatileDemo();
        for (int i = 0; i &lt; 500; i ++) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    volatileDemo.increase();
                }
            }).start();
        }
        //如果还有子线程在运行，主线程就让出CPU资源，
        //直到所有子线程都运行完了，主线程再继续往下执行
        while (Thread.activeCount() &gt; 2) { //在IDEA中设置大于2，在Eclipse中设置为大于1即可，因为IDEA除了主线程之外还会有一个监视线程在运行
            Thread.yield();
        }
        System.out.println(&quot;number:&quot; + volatileDemo.getNumber());
    }

}
</code></pre>
<p>这段代码的执行结果可能为 500，也可能小于 500，而问题就出在 <code>number ++;</code> 上，因为 <code>number ++</code> 实际要分为如下 3 步执行：</p>
<ol>
<li>读取 number 的值</li>
<li>将 number 的值加 1</li>
<li>写入最新的 number 值</li>
</ol>
<p>而 <code>volatile</code> 虽然能够保证<code>共享变量</code>的内存可见性，但却不能保证复合操作的原子性，假设有两个线程 A 和 B，volatile int number = 5，线程 A 和 B 并发执行 <code>number ++;</code> 操作时就可能产生下面的执行顺序：</p>
<ol>
<li>线程 A 从主内存读取 number 的值</li>
<li>线程 B 从主内存读取 number 的值</li>
<li>线程 B 执行加 1 操作</li>
<li>线程 B 向主内存写入最新的 number 值</li>
<li>线程 A 执行加 1 操作</li>
<li>线程 A 向主内存写入最新的 number 值</li>
</ol>
<p>两个线程都执行了 <code>number ++;</code>，但主内存中共享变量 <code>number</code> 的值却是 6 而不是 7</p>
<p>解决办法有两种，一是通过 <code>synchronized</code> 加锁保证自增操作原子性，二是通过 <code>ReentrantLock</code> 对象加锁保证自增操作原子性</p>
<ol>
<li>使用 synchronized 关键字保证 number 自增操作的原子性</li>
</ol>
<pre><code>public synchronized void increase() {
    try {
        Thread.sleep(100);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    this.number++;
}
</code></pre>
<p>当然加锁的范围应该尽量更小一些：</p>
<pre><code>public void increase() {
    try {
        Thread.sleep(100);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    synchronized (this) {
        this.number++;
    }
}
</code></pre>
<ol start="2">
<li>使用 <code>ReentrantLock</code> 保证 number 自增操作的原子性</li>
</ol>
<pre><code>public void increase() {
    try {
        Thread.sleep(100);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    lock.lock(); // 加锁
    try {
        this.number ++;
    } finally {
        lock.unlock(); // 释放锁
    }
}
</code></pre>
<p>使用上面两种方法的任意一种输出结果将总是 500</p>
<p><code>synchronized</code> 和 <code>volatile</code> 比较：</p>
<ul>
<li><code>volatile</code> 不需要加锁，比 <code>synchronized</code> 更轻量级，不会阻塞线<br>
程，执行效率更高</li>
<li><code>synchronized</code> 既能保证<code>共享变量</code>的可见性，又能保证<code>共享变量</code>的原子性，而 <code>volatile</code>只能保证<code>共享变量</code>的可见性，无法保证<code>共享变量</code>的原子性。</li>
</ul>
<p>最后，我们知道 Java 中 long 和 double 都是64 位的数据类型，而 <code>JMM</code> 允许 JVM 将没有被 <code>volatile</code> 修饰的 64 位数据类型的读写操作划分为两次 32 位的读写操作来进行，这就可能会导致读取到“半个变量”的情况，为了预防这种情况，最好为 long 和 double 类型的变量加上 <code>volatile</code> 关键字</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.imooc.com/learn/352">细说Java多线程之内存可见性</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单例模式.md]]></title>
        <id>http://blog.kuranado.com/post/dan-li-mo-shi-md/</id>
        <link href="http://blog.kuranado.com/post/dan-li-mo-shi-md/">
        </link>
        <updated>2020-09-27T14:36:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是单例模式">什么是单例模式</h2>
<p>所谓单例模式即单例类只能有一个实例，并向外部提供一个访问该实例的全局访问点。</p>
<p>单例模式优点：</p>
<ul>
<li>可以避免类的频繁创建与销毁</li>
<li>只创建一个实例，节省系统资源</li>
</ul>
<h2 id="饱汉式-单线程">饱汉式-单线程</h2>
<p>饱汉式又称懒汉式（吃饱了可不就懒得动弹了嘛）：</p>
<pre><code>public class Test {

    public static void main(String[] args) {
        Singleton singleton = Singleton.getSingleton();
        Singleton singleton2 = Singleton.getSingleton();
        // 输出 true
        System.out.println(singleton == singleton2);
    }

}
class Singleton {

    private static Singleton singleton;

    private Singleton () {}

    public static Singleton getSingleton() {

        if (singleton == null) {
            singleton = new Singleton();
        }

        return singleton;
    }
}
</code></pre>
<p>这就是最简单的单例模式，为了防止外部通过 <code>new</code> 创建多个 Singleton 类的对象，将构造方法设为 <code>private</code>；向外部提供 <code>getSingleton</code> 方法，通过 <code>if</code> 判断，即便外部多次调用该方法也只会创建一次实例；因为 new 关键字已被禁用，无法通过 <code>new Singleton().getSingleton()</code> 的形式创建实例，所以该方法为静态方法，可以直接通过 <code>Singleton.getSingleton()</code> 调用该方法创建实例；因为静态方法不能访问普通变量，所以 Singleton 变量也使用 <code>static</code> 修饰。</p>
<h2 id="饱汉式-多线程">饱汉式-多线程</h2>
<p>饱汉式-单线程的代码在单线程下的执行效率很高，同时也实现了懒加载（外部调用 getInstance() 方法时才创建 Singleton 类的实例），但缺点也很明显，那就是在多线程情况下，并不能保证只创建一次实例，如两个线程 A 和 B，A 执行完 <code>if (singleton == null)</code> 后，线程 B 获得处理器资源也执行到 <code>if (singleton == null)</code> ，这样线程 A 和 B 将都会创建一次实例。解决办法也很简单，使用 <code>synchronized</code> 修饰 <code>getSingleton</code> 方法即可：</p>
<pre><code>public static synchronized Singleton getSingleton() {

    if (singleton == null) {
        singleton = new Singleton();
    }

    return singleton;
}
</code></pre>
<p>这样即可保证多线程下也只会创建一次实例，但同样存在很大的缺陷：加锁会影响效率，实际应该在创建完第一个实例后就解锁，否则每个线程调用 <code>getSingleton</code> 时都要上锁阻塞其他线程，导致执行效率极低。</p>
<h2 id="双重检验锁double-checked-locking">双重检验锁(Double Checked Locking)</h2>
<p>双重检验锁是对饱汉式-多线程的优化，做到一旦创建完第一个实例后就不再加锁的效果：</p>
<pre><code>class Singleton {

    private volatile static Singleton singleton;
    
    private Singleton () {}

    public static Singleton getSingleton() {
        // 可能会有多个线程都进入了此 if
        if (singleton == null) { // 第一次检查
            // 加锁
            synchronized (Singleton.class) {
                // 第一个进入锁内的线程才会进入此 if
                if (singleton == null) { // 第二次检查
                    singleton = new Singleton();
                }
            }
        }

        return singleton;
    }
}
</code></pre>
<p>关键点在于 <code>volatile</code> 关键字的使用，此处为何要使用 <code>volatile</code> 关键字呢？</p>
<p>问题在于 <code>singleton = new Singleton();</code> 这行代码上，这行代码在底层可以粗略的分为以下几步执行：</p>
<ol>
<li>栈内存开辟空间给 singleton 引用</li>
<li>堆内存开辟空间准备初始化对象</li>
<li>初始化对象</li>
<li>栈中引用指向这个堆内存空间地址</li>
</ol>
<p>因为指令重排序的原因，这行代码的执行顺序可能是 1 -&gt; 2 -&gt; 3 -&gt; 4，也可能是 1 -&gt; 2 -&gt; 4 -&gt; 3。在某个时刻，确实可以保证只有一个线程进入同步代码块，如果进入同步代码块的线程刚好执行到 1 -&gt; 2 -&gt; 4，并没有执行到 3，但此时 singleton 已经非空，如果这时还有一个线程抢占资源调用 getInstance() 方法，则该线程执行到第一个 <code>if</code> 判断时，由于 singleton 非空，直接返回该 singleton，而实际上，该 singleton 所指向的堆内存空间地址并没有存放初始化后的对象，造成我们并没有拿到正确的对象实例。</p>
<p><code>volatile</code> 刚好可以解决上述问题，我们知道 <code>volatile</code> 有 3 个特点：</p>
<ol>
<li>能够保证 <code>volatile</code> 变量的可见性</li>
<li>在 JDK 1.5 之后，<code>volatile</code> 变量能够禁止指令重排序</li>
<li>不能保证 <code>volatile</code> 变量复合操作的原子性。</li>
</ol>
<p>其中禁止指令重排序的特性正是我们所需要的。</p>
<h2 id="饥汉式">饥汉式</h2>
<p>饥汉式又称饿汉式，实现代码最为简单：</p>
<pre><code>class Singleton {

    private static Singleton singleton = new Singleton();

    private Singleton () {}

    public static Singleton getSingleton() {
        return singleton;
    }
}
</code></pre>
<p>饥汉式一上来就在类加载时创建好对象，由于 Java 的类加载机制避免了多线程的同步问题（类的加载方式是按需加载，且只加载一次，因为这个类在整个生命周期中只会被加载一次，所以只会创建一个实例），所以执行效率非常高。但饥汉式也存在如下两个缺点：</p>
<ol>
<li>没有实现懒加载，即便根本没有人主动调用 getSingleton 方法，不管三七二十一，也会在类加载时就创建 Singleton 类实例。假设 Singleton 类实例的创建非常消耗系统资源的话，则会造成系统资源浪费。</li>
<li>像 Spring 等框架的设计中也都用到了单例模式，但这些框架常常需要通过参数进行配置，如果直接像饥汉式一样 <code>private static Singleton singleton = new Singleton();</code> 将创建对象写死，将无法传入配置参数。</li>
</ol>
<h2 id="静态内部类">静态内部类</h2>
<pre><code>class Singleton {

    private Singleton() {}
    
    // 私有静态内部类，用到时才加载，所以时懒加载
    private static class SingletonHolder {
        private static final Singleton INSTANCE = new Singleton();
    }

    public static Singleton getSingleton() {
        return SingletonHolder.INSTANCE;
    }
}
</code></pre>
<p>静态内部类的加载不需要依附外部类，在使用到静态内部类时才加载，所以实现了懒加载。同时和饥汉式一样，类加载时就创建好对象，Java 的类加载机制也避免了多线程的同步问题，区别只在于这里是内部类</p>
<h2 id="枚举">枚举</h2>
<p>常有人说实现单例模式的最佳方法是使用枚举，这是因为枚举拥有以下特性，且代码实现简洁：</p>
<ul>
<li>枚举类的构造器只能使用 <code>private</code> 修饰，若省略 <code>private</code>，则默认也是使用 <code>private</code> 修饰，如果省略构造器，默认也会提供一个 <code>private</code> 修饰的构造器，这和我们前面 5 种写法完全吻合</li>
<li>枚举类的每个实例系统都会自动为其添加 <code>public static final</code> 修饰，保证了枚举中的实例都只会被实例化一次</li>
<li>线程安全</li>
</ul>
<pre><code>public class Test {

    public static void main(String[] args) {
        Singleton singleton = Singleton.SINGLETON;
        Singleton singleton2 = Singleton.SINGLETON;
        // 输出 true
        System.out.println(singleton == singleton2);
    }

}

enum Singleton {
    SINGLETON
}
</code></pre>
<p>遗憾的是枚举类加载时就开始加载枚举实例，所以并没有实现懒加载。</p>
<h2 id="总结">总结</h2>
<p>各种写法特性总结如下：</p>
<table>
<thead>
<tr>
<th>s</th>
<th>饱汉式-单线程</th>
<th>饱汉式-多线程</th>
<th>双重检验锁</th>
<th>饥汉式</th>
<th>静态内部类</th>
<th>枚举</th>
</tr>
</thead>
<tbody>
<tr>
<td>支持多线程</td>
<td>✘</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td>懒加载</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✘</td>
<td>✔</td>
<td>✘</td>
</tr>
<tr>
<td>效率</td>
<td>高</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
</tbody>
</table>
<p>综合来说我更倾向于使用双重检验锁方式，但每种写法各有其优缺点，在开发中应该根据需求选择，引用一段话：</p>
<blockquote>
<p>既应当考虑到需求可能出现的扩展与变化，也应该避免无谓的提升设计、实现复杂度，最终反而会带来工期、性能和稳定性的损失，设计不足与设计过度都是危害，正所谓：没有最好的单例模式，只有最合适的单例模式。</p>
</blockquote>
<h2 id="参考资料">参考资料</h2>
<ul>
<li>《Java 疯狂讲义》</li>
<li><a href="http://www.runoob.com/design-pattern/singleton-pattern.html">菜鸟教程单例模式</a></li>
<li><a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/">如何正确地写出单例模式</a></li>
<li><a href="http://www.importnew.com/23535.html">Java并发：volatile内存可见性和指令重排</a></li>
<li><a href="http://www.kuranado.com/2018/03/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7/">Java多线程之内存可见性</a></li>
<li><a href="https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">The &quot;Double-Checked Locking is Broken&quot; Declaration</a></li>
<li><a href="https://www.cnblogs.com/cielosun/p/6596475.html">Java枚举enum以及应用：枚举实现单例模式</a></li>
</ul>
]]></content>
    </entry>
</feed>